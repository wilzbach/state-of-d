#	Do you use D?	How happy are you with D?	Why did you stop using D?	What has prevented you from using D?	"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification	#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli	Professional training	"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms	Other	How would you rate your experience learning D?	What were your biggest hurdles when learning D?	How would you rate the quality of Phobos's (Standard Library) documentation?	What do you dislike or find lacking about the documentation of Phobos (Standard Library)?	How would you rate the importance of having documentation and error messages translated into your native language?	How do you rate D's website (dlang.org)?	Does dlang.org's frontpage provide an informative overview to you?	What do you dislike or find lacking about dlang.org?	Have you used the DTour?	How would you rate the quality of tour.dlang.org?	What, if anything, do you dislike the most about tour.dlang.org?	Do you read the official DBlog?	How would you judge the quality of the content of the DBlog?	What do you dislike or find lacking about the DBlog?	Do you feel welcome in the D community?	D Forum	#d on IRC	#d on StackOverflow	dlang.slack.com	My colleagues	I don't need help	Other	How helpful were the answers to your questions?	Should we switch to StackOverflow instead of using D.Learn?	Do you prefer a different option for asking questions? If so, what and why?	Has upgrading the compiler in 2017 broken your project?	What is your tolerance for stability vs. breaking changes that fix "warts", inconsistencies, and/or historical baggage in the language.	How regularly do you use D?	Web development	Desktop applications	IoT	DevOps	Security	Game Development	Big Data	Embedded Systems	Machine Learning	Kernel Development	Science/Research	Other	Official Windows .exe installer	Official tarballs	Official .rpm packages	Official .deb packages	Official OSX dmg installer	Official dlang.org/install.sh script	d-apt Debian/Ubuntu	Arch Linux	Homebrew	Gentoo	Choco	Docker	I didn't install D	I compiled D from source	Other	2.079.0 (nightly)	2.078.3 (latest)	2.077.1 (latest LDC)	2.076.1 (static foreach)	2.075.1 (removed built-in .sort)	2.074.1 (compile-time format checking)	2.073.1 (new Ddoc theme)	2.072.2 (native TLS on OSX 64-bit)	2.071.2 (import access check fixes)	2.070.2 (alias as a function literal)	2.069.2 (initial Objective-C support)	2.068.2 (last C++ release)	D1	Other	What's your favorite D compiler?	Linux	macOS	Windows	BSD-variant	Android	iOS	WebAssembly	Embedded	Other	dmd	rdmd	dub	make	cmake	meson	scons	Other	Do you or your company use D at work?	What's your main editor?	Other	How satisfied are you with your editor's D support?	Have you ever reported an issue on D's Bugzilla?	How satisfied are you with D's Bugzilla?	What, if anything, do you dislike about D's issue process?	What, if anything, has prevented you from opening an issue?	 How happy are you with the D compiler?	If you could wish for one thing for the D compiler, what would it be?	How happy are you with the language syntax?	What, if anything, is bothering you about the language syntax?	tuples	string interpolation	in-place struct initialization	named arguments	assert diagnostics	language binding to X	multiple alias this	UDAs for attributes	@mutable in immutable	static break	writing files at compile-time	UFCS for local symbols	Static inheritance	Nothing - D is already awesome	Other	Do you use -betterC?	How would you rate the quality of D's specification?	What do you dislike or find lacking about D's specification?	Do you use Phobos (D's Standard Library)?	How do you feel about the amount of legacy code in Phobos (D's Standard Library)?	Is Phobos's API intuitive for you?	Can you easily find what you need in Phobos (D's Standard Library)?	Nothing - Phobos (Standard Library) is great	Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes	Other	@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes	Other	I'm happy as is.	std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)	Other	Which parts of Phobos (D's Standard Library), if any, do you find difficult to work with?	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container	std.conv	std.csv	std.datetime	std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json	std.math	std.mathspecial	std.meta	std.outbuffer	std.parallelism	std.path	std.process	std.random	std.regex	std.signals	std.socket	std.stdint	std.string	std.system	std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	What else, if anything, is bothering you about Phobos (D's Standard Library)?	Have you contributed to dlang on GitHub?	How would you rate your experience?	What went wrong?	Finding good issues to get started	Time is my only enemy	Personal laziness	No roadmap	D community	High barrier to entry	I don't use D	I am just starting to learn D	Other	Nothing	Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems	Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000	Other	Nothing	Poor Phobos (Standard Library) documentation	Compiler regressions	Poor compiler error messages	Poor GC implementation / performance	Other	Nothing	Non-enterprise IDE support	Poor debugging	dub	DLL support on Windows	Missing support for platform X	D's dependence on a large and bulky runtime	Other	Nothing	Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library	Other	Nothing	Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials	No good point for learning D	Few transition guides from programming language Y	Other	Nothing.	Too much low-level focus (C/C++)	Frequent breaking changes	Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level	Other	Do you think D has other weak points?	How would you describe D in three words?	Where did you hear about D the first time?	Why did you learn D?	What's your favorite D library?	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler	Contracts	Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm	Other	static foreach	opt-in GC and runtime	DMD as a DUB library	Templated vector operations	Compile-time format string checking	-betterC	stdx.checkedint	New range functionality (substitute, slide)	toString with output ranges	Deprecation of the integral promotion for unary operators	Back referencing of mangled symbols	Reproducible builds	Removed prelude assert for constructors & destructors	DMD support for AVX2	Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org	docarchives.dlang.io	Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE	Other	What is motivating you to use D?	What's your least favorite D feature / bug?	Would you or your company donate to the D Language Foundation (DLF)?	Anything else you would like to share	Tabs or spaces?	Start Date (UTC)	Submit Date (UTC)	Network ID
acafaf58b8e572fdd8a72da49efc089c	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										3	Documentation out of date with language and compiler changes.	4	The function-level documentation is usually very good, it's just hard to search for the best way to accomplish common tasks and algorithms and such. Often when things get deprecated there's not particularly great documentation on why, and how to move code to the new recommended solutions.	4	4	4		0			0			4	D Forum							3	I don't care.	Slack seems like a good solution, but last I checked it wasn't public and required knowing someone to join/get an invite?	Yes, it was hard to find out why.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development					Game Development							Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu									2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux		Windows									dub						No	Visual Studio + VisualD		4	0			It's often difficult to figure out if the issue is with D itself or one of the libraries I am using (ex. vibe.d). Thus it's usually easier to file with the library owner as they are often more plugged into current Dlang/DMD issues than I am.	4	Fewer breaking changes. For me to justify more serious use of it at work and otherwise, it needs to start to stabilize more than it has been in the past couple years.	It's awesome, but I miss a few features	I don't love how thread local storage and multithreading is handled. Message passing works well for some styles of applications but very poorly for others. In a lot of cases things like simple parallel for and fork/join are sufficient and simpler to reason about so it would be good to have first class language support for stuff like that as well.														Nothing - D is already awesome		No	4		Yes	4	3	2						Reliance on the GC			@safe for all modules	@nogc		Performance					std.eventloop	@nogc containers	better json serialization			std.database												std.compiler	std.complex	std.concurrency					std.demangle														std.parallelism					std.signals	std.socket												std.xml				No, but to other D repositories				Time is my only enemy				High barrier to entry							Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)					Compiler regressions		Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging								Attribute bloat							Fewer third-party libraries than other language			Few showcases / flagship projects			Lack of good examples / tutorials						Frequent breaking changes						More modern C	Work colleague	Looked like a language with some interesting ideas and much cleaner syntax in areas than C++.	vibe.d! It is honestly the primary reason I use D.		Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C				Closeness to C/C++	Simple, but powerful module system							Inline assembler																					DMD support for AVX2							vibe.d 0.8						vibe.d's coroutines and easy integration with web services (REST or even just doing a web UI).		Maybe, I miss accountability at the moment		Spaces	2018-03-15 07:48:26	2018-03-15 08:07:40	7e61d479ca
f2e40a5e1791f3c3563e8b493d20e606	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification										4	It is a complex language. But in general it is not hard coming from C++ and Scala.	5		3	4	4	I think we should shut down the forum and switch to blogs. Mostly because of the feedback I am getting from non-D programmers. They pick up information which is misleading.	0			1	Always great content		5						I don't need help		5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly											Science/Research																GNU Guix			2.077.1 (latest LDC)												LDC	Linux												make					Yes, I work with D part time	emacs		5	1	5			5		It's awesome, but I miss a few features																pattern matching, tuple unpacking	No	4		Yes	3	5	6										@nogc		Performance		More/better container classes		I'm happy as is.																																																												Things can always get better.	No, but to other D repositories																												Nothing								Nothing								Nothing											Nothing.							It would be great to get one of the major companies on board. But I realise D is an engineering language. It serves a class of problems now addressed by C/C++. I do not think it will ever become a popular general purpose language. So we should not aim for that space.	Fast compiler, fast code, good in my toolset.	Early days of D1	I hate C++	parallel	Ranges & std.algorithm	Mixin				Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system						Garbage collection					std.concurrency & std.process		Functional programming paradigm													Reproducible builds		DMD support for AVX2					New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages		Cross-compilation with LDC			Just beats the hell out of other languages in its niche.	GC halting threads, it would save us from avoiding the GC in some code.	No, I'm already donating my free time			2018-03-15 06:32:00	2018-03-15 06:59:13	18575caef3
aa2ad0ac41329e78021c3d9f410ef536	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org			D Forum: Learn							telegram	3	poorly documentation	3	poorly structured and lack of description and examples	0	3	4		1	3	it should be more interactive	0			4	D Forum				My colleagues		telegram	4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications										networking	Official Windows .exe installer				Official OSX dmg installer												2.078.3 (latest)													DMD	Linux	macOS	Windows									dub						Yes, I work with D part time	Visual Studio Code		4	0				4		It's awesome - keep it as is																				Yes	1	3	4				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance	More -betterC support	More/better container classes			std.eventloop		better json serialization					std.benchmark																																																					No, but to other D repositories					Personal laziness								Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation			Poor GC implementation / performance			Non-enterprise IDE support												C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library				Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials							Lack of progress on DIPs	Lack of focus at the management level				fast beauty expressive	on job		vibe-core	Ranges & std.algorithm					Performance				-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays			Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm				DMD as a DUB library	Templated vector operations	Compile-time format string checking	-betterC			toString with output ranges					DMD support for AVX2		Runnable examples on dlang.org		Deprecation of the comma operator											Yes, I'm already doing so		Meh, I don't care.	2018-03-15 04:24:04	2018-03-15 04:37:32	8726f4674c
a6675e8e4284dd44142ba1b3607464fe	Yes	4				tour.dlang.org	Language specification								d-idioms		3	Finding a decent IDE	5	The different types of standard exceptions lack any real documentation (How many exist? I don't know.)	0	4	4		0			1	Always great content	No way to get notifications for it such as email (that I can find).	4						I don't need help		4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications				Game Development														Arch Linux								2.079.0 (nightly)														DMD	Linux		Windows									dub						Not applicable	Intellij		3	0				5		It's awesome, but I miss a few features	I think ? as a null-safe . is a nice feature from Swift (that I would love to use in D).  I also dislike that there isn't anyway to initialize a struct (with values) on demand. I can understand not liking the {} out of nowhere so I propose: func(structType { variable: value });			in-place struct initialization				multiple alias this	UDAs for attributes								No	5	I dislike the absence of a "final" variable where it's value can not be changed after the object is created.	Yes	3	3	4			Auto-decoding isn't nothrow				Fear to do breaking changes										std.eventloop								std.decimal	std.color	std.image																																																	I think there should be more standard exception types (such as a runtime exception).	No, and I don't plan to											Too nervous	Nothing										Nothing							Non-enterprise IDE support							Nothing															Lack of good examples / tutorials				Nothing.							From my perspective, one of the biggest weaknesses of D is the not-so-great IDE support.	Better than C++	Randomly came across it on the internet	It interested me because I always thought about making a powerful (native) language that didn't have all of C++'s design flaws. While D doesn't have everything I've wanted, I do like it a lot more than C++.			Mixin	CTFE (static if, static foreach)			Performance						Simple, but powerful module system	Templates	Built-in documentation (Ddoc)		In, out, ref parameters		Garbage collection						Multi-paradigm						Templated vector operations				New range functionality (substitute, slide)										Deprecation of the comma operator						Cross-compilation with LDC			I love being able to write an application without having to worry about garbage collection (mostly) and using syntax that is far less overwhelming than C++.		Maybe, I'm still a student	Keep up the great work!	Meh, I don't care.	2018-03-15 02:59:25	2018-03-15 04:10:00	15de87c448
df9f7bbe2f1b0b008d7a18bdcaf8df25	Yes	4								"Programming in D" by Ali Çehreli							4		4	A few parts (such as the condition variable primitive class) are thinly documented.		4	5		0			0														No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly													Official Windows .exe installer			Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub						No	Sublime		4	0				4		It's ok	Lots of keyword reuse for different purposes e.g. with static, in/out/inout, alias, auto		string interpolation											Static inheritance			No			Yes	5	4	5														More/better container classes							std.graph	std.database				std.color				Containers are limited, synchronization primitives (e.g. mutex, cond var) seem hidden in the documentation																																																												Language complexity (e.g. inout, abuse of mixin)										Poor Phobos (Standard Library) documentation									DLL support on Windows										Ugly bits of the standard library													Nothing.										Easier than C++, less limiting than Java				CTFE (static if, static foreach)			Performance	Native interoperability with C		UFCS				Templates					Garbage collection						Multi-paradigm											toString with output ranges							Runnable examples on dlang.org													Maybe, I'm still a student		Spaces	2018-03-14 23:12:47	2018-03-15 00:01:35	01e88ecb02
4376c56c93aee3ee211e7750ce5ab1e8	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification							"D Cookbook" by Adam D. Ruppe	d-idioms		4	Lack of non-trivial examples	4	The format. I find the layout of the documentation confusing. The documentation for one class seems to run right into the next, and it's easy to think that an operation belong to one class when it really belongs to another. I would also like to see the library documentation be made available in formats like epub or mobi, like the language specification. 	3	5	5	Nothing. I can find what I need.	0			0			3						I don't need help			I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications		DevOps							Science/Research	System administration 	Official Windows .exe installer		Official .rpm packages						Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows		Android					dmd		dub				scons		No	Sublime		4	0				4		It's awesome - keep it as is																				Yes	3	2	4					Old modules like std.outbuffer or std.socket									More/better container classes	Better documentation, especially with respect to some of the OS-specific functionality.				better json serialization	better xml serialization		std.database			std.decimal									std.compiler											stdx.allocator									std.outbuffer	std.parallelism																						No, but I want to to				Time is my only enemy												Non-perfect C++ integration													Non-enterprise IDE support	Poor debugging															Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages																	Flexible, fast, enjoyable 	Don't recall	I'm interested in languages in general, and was looking for a statically-typed language that was higher-level and more convenient than C++ (I have over 30 years of C++ experience), yet faster than scripting languages like Python.	I use d-yaml a lot, and I've written my own utility library.		Mixin	CTFE (static if, static foreach)		std.traits			Readable syntax	UFCS		Closeness to C/C++		Templates										std.concurrency & std.process																														It's an enjoyable language to use. I like the syntax in general, simpler constraint on templates, opDispatch for a more dynamic style of programming than is available in C++ 				Spaces	2018-03-14 18:27:38	2018-03-14 21:13:02	524ade9b57
15140c8c50e3e96892b67e9a8816f5c2	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification										5		5		0	5	5		1	5		1	Mostly great content		4	D Forum							5	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly								Embedded Systems			Science/Research			Official tarballs				Official dlang.org/install.sh script		Arch Linux	Homebrew	Gentoo							2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux									dmd	rdmd	dub	make				Tup, Redo	Not applicable	emacs		3	0				3		It's awesome, but I miss a few features		tuples		in-place struct initialization													No	5		Yes	6	4	4						Reliance on the GC						Performance				I'm happy as is.																																																													No, and I don't plan to										I am just starting to learn D																																																								Mir	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C	Readable syntax	UFCS						Built-in unittests																							Reproducible builds													newCTFE						Meh, I don't care.	2018-03-14 20:07:55	2018-03-14 20:24:27	1bd471df12
039d206873c9b5b96b857f258c288a17	Yes	4				tour.dlang.org	Language specification		D Forum: Learn							stackoverflow	4	finding out the shortcuts that exist in this language	4		1	4	4		1	4		0			4			#d on StackOverflow				I google them	4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications								Kernel Development		OS Development			Official .rpm packages												scoop		2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows	BSD-variant			WebAssembly	Embedded				dub	make	cmake				Not applicable	Visual Studio + VisualD		3	0			I had none to report	4		It's awesome - keep it as is																				Yes	3	4	3	Nothing - Phobos (Standard Library) is great									@nogc		Performance	More -betterC support	More/better container classes					better json serialization	better xml serialization			std.i18n		std.decimal								std.bitmanip					std.conv			std.demangle																																				No, but I want to to										I am just starting to learn D		Nothing										Nothing							Non-enterprise IDE support												C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language			Few showcases / flagship projects							Nothing.								mixture of c++, c# and java	wikipedia	mixture of c++, c#, java		Ranges & std.algorithm	Mixin				Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters		Garbage collection	Inline assembler				std.concurrency & std.process	Multi-paradigm				opt-in GC and runtime	DMD as a DUB library			-betterC		New range functionality (substitute, slide)	toString with output ranges			Reproducible builds			Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)			DCompute	Cross-compilation with LDC			small community, new language to try out		Maybe, I'm still a student		Tabs	2018-03-14 17:58:02	2018-03-14 19:43:51	4cb60c6847
68098b602d5c200c17d04d96946f49a0	No, I have never used D			Just learned about it		tour.dlang.org	Language specification									Wikibook	5	Love the language, but unsure how to use it practically.	3	It's daunting for newcomers. The organization is unclear and newcomers don't know what to search for.	3	5	5	Nothing it's the best language website I've ever used.	1	4	The controls are too intuitive if that makes sense. I kept thinking, "is it really this simple?"	1	Mostly great content	The tone can be very informal at times	2							Haven't yet	3	I don't care.	I wish the subreddit were more active. I generally see that as a welcoming place.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely											Science/Research								d-apt Debian/Ubuntu																						I don't know	GDC	Linux				Android												Haven't gotten that far	No	Visual Studio Code		3	0			Haven't had one	5		It's awesome, but I miss a few features	Coming from science, I miss the colons in slices.	tuples			named arguments		language binding to X										No	4		Yes	3	2	1				Poor naming choices					@safe for all modules					More/better container classes					better json serialization		std.graph					std.color	std.image	std.drawing (2D)																																																	No, but I want to to										I am just starting to learn D											No Fortran interoperability	Nothing						Nothing								Nothing									Fewer third-party libraries than other language										Nothing.							It's impossible to search for help on Google. More community members should use word dlang like the Go community uses golang.	Fast, pretty, easy	Wikipedia	I want something statically typed, C-like, and with vectorized operations and without the awful syntax of C++.	ndslice	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax				Simple, but powerful module system												Multi-paradigm	Functional programming paradigm																	Runnable examples on dlang.org											I need something faster than Python, more readable than C++, and more familiar than Fortran.	That slices of dynamic arrays don't return copies.	Maybe, I'm still a student	Fortran interoperability would be a killer feature. So much is already in Fortran that it is hard to justify using anything else.	Spaces	2018-03-14 14:47:41	2018-03-14 15:14:17	17b2819b54
cb110d7a4a45c4c6942b9a0a24088c20	Yes	4					Language specification										4		3		1	4	3		0			0			2						I don't need help			I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development							Official Windows .exe installer							Arch Linux						I compiled D from source		2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux		Windows	BSD-variant	Android	iOS											scripts	Yes, I work with D part time	Sublime		4	1	3			4	Allow to use some non-allocating language features without the runtime	It's awesome - keep it as is																				Yes, but only for some projects	2	3	3		Auto-decoding for strings	Auto-decoding isn't nothrow			Reliance on the GC	Fear to do breaking changes					Performance	More -betterC support			I'm happy as is.															std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container		std.csv		std.demangle	std.digest	std.encoding			stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json		std.mathspecial	std.meta	std.outbuffer	std.parallelism				std.regex	std.signals	std.socket	std.stdint		std.system		std.typecons		std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	Compilation performance, I don't use Phobos because just importing it increases compile times greatly	Yes													Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems							Poor compiler error messages					Poor debugging				D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat						Nothing																Wrong decisions at the management level			Kitchen sink language	Googled and investigated native languages years ago	Needed a good language for game development			Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax			Closeness to C/C++								Inline assembler			import("myfile")		Multi-paradigm			static foreach	opt-in GC and runtime				-betterC							Removed prelude assert for constructors & destructors		Automatic compilation of imports (dmd -i)							Colorized error messages		Cross-compilation with LDC	newCTFE			Expensive template compilation	Yes, but only for a specific project		Spaces	2018-03-14 12:57:55	2018-03-14 13:11:50	320b8b5e45
360adc4cf2d9bf519939aa00fd924b6e	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							4	Lack of documentation for less popular parts of the library/lang, and for corner cases/errors	4	Quality is inconsistent; everything needs examples, sometimes even non-trivial ones - especially for corner cases, specialized versions of templates/algorithms/etc.	0	4	4	Third party Javascript	0			1	Always great content	Needs even more content, from all areas of D development	4	D Forum	#d on IRC	#d on StackOverflow					4	Yes, I like StackOverflow.	I prefer still having a forum. But StackOverflow is better for most uses and strategically important.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly			IoT		Security	Game Development		Embedded Systems								Official .deb packages			d-apt Debian/Ubuntu							I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux			BSD-variant	Android			Embedded			rdmd	dub						No	vim / neovim		4	1	4	Too long ago since my last issue, but - slowness of response especially if the bug is not in top dev's interest		5		It's awesome - keep it as is																				Yes	2	5	5			Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance	More -betterC support	More/better container classes				@nogc containers						std.benchmark		std.color	std.image	std.drawing (2D)		... containers, which is why I don't use them																						std.mathspecial		std.outbuffer														std.uri				std.windows				As above - optional GC, @safe/pure/nothrow where possible, more pervasive std.allocator support	Yes	3	Reaction time (long ago)										Nothing													Poor compiler error messages					Poor debugging			Missing support for platform X	D's dependence on a large and bulky runtime						Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library				Less corporate support (including jobs) than other languages	Little marketing / no evangelists											Lack of progress on DIPs				Past it's 'hype time', hard to market today.	Fast, Readable, Maintainable	no idea	C++ sucked	std.allocator?	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++		Templates		Built-in unittests				Inline assembler	Contracts				Multi-paradigm			static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking	-betterC			toString with output ranges													Colorized error messages		Cross-compilation with LDC	newCTFE		I don't give in to hype	Probably DDoc's inconsistency WRT markdown (as in, part works, part does not. Macros are horrible to read and should not have to be used 99% of the time.)	Maybe, I miss accountability at the moment		Spaces	2018-03-14 11:54:42	2018-03-14 12:22:48	058e3d6d59
d57dbae7a6a025acc0a7b3ca5820760d	Yes	5								"Programming in D" by Ali Çehreli							5		4		0	5	5		0			0			5						I don't need help		5	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly						Game Development							Official Windows .exe installer															2.079.0 (nightly)														DMD			Windows							dmd		dub		cmake				No	Visual Studio + VisualD		3	0				5		It's awesome, but I miss a few features				in-place struct initialization	named arguments												No	4		Yes	0	3	4				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc		Performance		More/better container classes					better json serialization	better xml serialization			std.i18n				std.image	std.drawing (2D)						std.compiler												stdx.checkedint			std.getopt																		std.uni										No, but I want to to			Finding good issues to get started		Personal laziness								Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC					Nothing							Non-enterprise IDE support	Poor debugging		DLL support on Windows										Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages									Nothing.							operator overloading is ugly, comparing to C++	awesome, potentital, new				Ranges & std.algorithm					Performance		Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system							Inline assembler				std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach													DMD support for AVX2	Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org						Colorized error messages	DCompute						Yes, just tell me how		Tabs	2018-03-14 10:34:16	2018-03-14 12:03:43	bf8eadfb94
a5b1ef31fcff8949d3345c7a45801c7d	No, I have stopped using D		I didn't find a say to incorporate it at my work where we work with C# and Unity							"Programming in D" by Ali Çehreli							4	I never managed to figure out how alias template params work under the hood. Otherwise it was great.	3	It is just visually hard to navigate.	0	3	4	Visual design. When I opened it for the first time my first impression was: "this site wasn't updated in a least 15 years".	0			1	Always great content	It is great	5	D Forum							4	I don't care.	I'm ok with forum and slack.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development	Desktop applications				Game Development							Official Windows .exe installer																	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows		Android	iOS	WebAssembly					dub						No	Visual Studio + VisualD		5	1	4			5		It's awesome - keep it as is																				Yes	5	5	3				Poor naming choices		Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000			More/better container classes				@nogc containers	better json serialization	better xml serialization		std.database								Only experimental packages.	std.base64	std.bigint		std.compiler	std.complex						std.demangle											std.mathspecial	std.meta	std.outbuffer																std.uuid					std.zip	1. Everything is latest (no old/deprecated code) 2. There is a great (non experimental) allocator package 3. Phobos offers nogc for most functionalities	No, but to other D repositories				Time is my only enemy						I am just starting to learn D							Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)			Nothing										DLL support on Windows	Missing support for platform X			Nothing								Nothing											Nothing.							As for the language syntax I am only bothered that switch statement doesn't do break by default so you don't need to write it in 99% of the cases.	Great Amazing Fun	Jonathan Blow's video about current state of compilers	It seemed like the best choice for developing cross platform game engine.	Derelict libraries	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates				@safe strings + arrays						std.concurrency & std.process	Multi-paradigm						Templated vector operations	Compile-time format string checking										Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org								Cross-compilation with LDC			It is just a joy to use with multi-paradigm it provides.	That allocator package that seems like such a great idea is still experimental and not quite working.	No, I'm already donating my free time		Tabs	2018-03-14 09:38:09	2018-03-14 10:35:49	818803fad1
bd8120b41f4a535bd5ef3000868b3cb8	Yes				"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							4	difficult to find useful informations	1	confusing, few examples, no "best practices" 	0	4	3		1	2		1	Mostly great content	lack of real applications , case-study of D success												No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development	Desktop applications	IoT	DevOps	Security			Embedded Systems								Official .deb packages			d-apt Debian/Ubuntu												2.076.1 (static foreach)											DMD	Linux		Windows							dmd	rdmd	dub						No	Sublime		3	0				3	more speed and less system resources utilization	It's awesome, but I miss a few features	mandatory semicolon at the end of statement; const vs immutable 		string interpolation	in-place struct initialization	named arguments												No			Yes	1	1	0					Old modules like std.outbuffer or std.socket		Fear to do breaking changes					Performance		More/better container classes					better json serialization	better xml serialization		std.database	std.i18n							unicode string support; 																																															No, but to other D repositories			Finding good issues to get started					High barrier to entry		I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)			Performance problems					Poor Phobos (Standard Library) documentation			Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows		D's dependence on a large and bulky runtime											Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials	No good point for learning D							Lack of focus at the management level			I think it's like a swiss knife : potentially you can use it for anything, in practice there are better tools for each use	a swiss knife (see above)	reddit			Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C				Closeness to C/C++				Built-in unittests															Templated vector operations	Compile-time format string checking																						very interesting alternative to C/C++ 		Yes, but only for a specific project		Spaces	2018-03-14 09:54:21	2018-03-14 10:24:26	74393fe95d
c456bb0807d23debb4d299c0996b05a6	Yes	3			"The D Programming Language" by Andrei Alexandrescu			#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		5	so many features	1	no consistency, lots of old stuff gets dragged along, no base (internet) protocol implementations	0	4	4	 	0			1	Mostly great content		5	D Forum	#d on IRC						5	Yes, I like StackOverflow.	comments within the phobos docs would be more helpful. ideally a curated collection of examples and snippets	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development			DevOps			Big Data		Machine Learning											Arch Linux	Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS										dub		cmake				Yes, I work with D part time	Sublime		1	1	1	move it to github finally.		3	better stack traces and error messages	It's awesome - keep it as is																				Yes	0	2	3					Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc			More -betterC support				std.eventloop		better json serialization																std.complex											stdx.checkedint						std.mathspecial		std.outbuffer																		std.windows				inconsistency because of historical issues, incosistent naming philosophy 	Yes	5														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC								Poor compiler error messages										lack of C interop tools (e.g. possiblity of directly including C headers), lack of cmake integration. (ideally you would be able to gradually replace .c with -betterC .d files in a cmake project)							Ugly bits of the standard library			Fewer third-party libraries than other language									not suitable for http/grpc microservices					Lack of focus at the management level	Wrong decisions at the management level			fast, fun, convinient		it has many features and is fast, c interop.	asdf	Ranges & std.algorithm									-betterC	Closeness to C/C++	Simple, but powerful module system						Garbage collection							Functional programming paradigm			opt-in GC and runtime				-betterC						Reproducible builds																	Yes, but only for a specific project		Spaces	2018-03-14 08:51:38	2018-03-14 10:12:49	ce72a1c20d
be4ee4a814bc6b3e1b3b78a1d7ffeb9c	Yes	3			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							5	1. Templates 2. The sheer number of type modifiers!	5		1	4	4		0			0			5	D Forum	#d on IRC						5				Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development										Science/Research			Official tarballs																	2.076.1 (static foreach)											DMD	Linux		Windows							dmd		dub						No	emacs		4	0				3	Better error reporting for templates	It's ok	There are too many features.	tuples															No	5		Yes	2	4	5				Poor naming choices			Fear to do breaking changes																																																																																																																																																																																																		2018-03-14 09:19:49	2018-03-14 09:34:35	dd2cd811ca
b0e2383f105c780a994890f6a911c55c	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification										4	TDPL out of date  	1	Missing examples in documentation. Templates hard to read in documentation 	0	3	2		0			1	Mostly great content		3	D Forum						Google	3	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly				DevOps									Official Windows .exe installer			Official .deb packages																							2.068.2 (last C++ release)			DMD	Linux		Windows							dmd				cmake				Yes, I work with D part time	Intellij		2	0				3	Faster CTFE	It's awesome, but I miss a few features	Missing Hash compile time initializer	tuples	string interpolation	in-place struct initialization	named arguments												Yes, but only for experimenting/testing/debugging	3	No formal grammar specs	Yes	2	1	1							Fear to do breaking changes					Performance		More/better container classes					better json serialization	better xml serialization		std.database								Documentation		std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle				stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt				std.meta							std.signals								std.uri			std.variant			std.zlib	std.zip	A good example for each hand every function in the documentation 	No, and I don't plan to														Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation						Non-enterprise IDE support	Poor debugging				D's dependence on a large and bulky runtime						Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library			Fewer third-party libraries than other language						Lack of good examples / tutorials							Lack of progress on DIPs	Lack of focus at the management level					computer magazine 	Had enough of C++		Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection						Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime			Compile-time format string checking	-betterC				Deprecation of the integral promotion for unary operators	Back referencing of mangled symbols				Automatic compilation of imports (dmd -i)			Deprecation of the comma operator							newCTFE		Fast Compiler, clean syntax		Maybe, I miss accountability at the moment		Tabs	2018-03-14 08:46:13	2018-03-14 09:34:18	dd000ac3bf
c208cbec6f13da2ba9544c1e30813030	Yes	3			"The D Programming Language" by Andrei Alexandrescu												4	Nothing special	3	Spatial organisation of contents.	0	4	4	Nothing special	0			1	Huge variance in quality	Dislike: People attitude (negative, atacking). Lacking: In some technical discussions that seem to enter into an endless-loop I miss a final word from Walter and/or Andrei clarifying the point.	4	D Forum							5	Yes, I like StackOverflow.	No	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications							Machine Learning		Science/Research							Official dlang.org/install.sh script		Arch Linux								2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux									dmd		dub						No	emacs		5	0			Nothing special	3	For the momento, stop adding new things, correct as many bugs as possible with several and frequent micro versions (2.79.1, 2.79.2...) and finish the implementation of language (i.e. multiple alias this)	It's awesome - keep it as is																				Yes	3	3	1	Nothing - Phobos (Standard Library) is great													More/better container classes				@nogc containers												Nothing special															stdx.allocator	stdx.checkedint	stdx.logger																													Documentation layout. Make it hierarchical, classes, then methods then free functions. With a good spatial layout.	No, and I don't plan to										I am just starting to learn D											compiler regressions and brown-paper-bag bugs			Compiler regressions	Poor compiler error messages						dub					Nothing								Nothing																Wrong decisions at the management level		No	Sweet, Fresh, Affordable	Web	Similar to C++	Nothing special	Ranges & std.algorithm						Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system		Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters				Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm																				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)				Cross-compilation with LDC			Similar to C/C++	Slowness of some math functions (atan example)	Yes, but only for a specific project	2.79.x should finish the language implementation and the majority of bugs.  2.80.x Then would welcome new features. I would also like a change to a semver version number for the compiler.	Spaces	2018-03-14 08:44:39	2018-03-14 09:21:08	ebe84bfb99
0acc1126588bb564896f48a79867b1ef	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification	#d IRC on freenode								Throwing things at the compiler and seeing what worked.	4	Finding parts of the language where the specification and implementation did not agree.	4	Some functions are missing examples.	0	4	5		0			1	Always great content		5	D Forum	#d on IRC				I don't need help	The source code	3	I don't care.		Yes, it was a regression.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily							Big Data																				DVM	2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux										rdmd	dub	make					Yes, I work with D full time		Textadept	5	1	4	There's too much work for the compiler devs to do, so sometimes the test cases I produce for compiler regressions aren't acted on.		4	DMD's optimizer to stop producing bad code.	It's ok	It's complicated to parse.	tuples			named arguments			multiple alias this			static break		UFCS for local symbols				No	3	Nobody knows how "shared" works, and "inout" is nearly impossible to use correctly.	Yes	0	4	6		Auto-decoding for strings				Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000	Performance		More/better container classes				@nogc containers	better json serialization											std.experimental.allocator		std.bigint		std.compiler	std.complex						std.demangle		std.encoding			stdx.checkedint	stdx.logger	std.functional					std.meta	std.outbuffer						std.signals		std.stdint										std.windows	std.xml	std.zlib	std.zip	More pure nothrow, @nogc, etc. annotations so that they can be used in higher-level code. Const-correctness for Object. More/better containers.	Yes	4												Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough										Compiler regressions				Nothing								Nothing								Nothing														Lack of progress on DIPs					Best language available	Slashdot	I learned enough C++ to know that it was insane.	Vibe is a lot of code I didn't have to write.	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays		Inline assembler	Contracts				Multi-paradigm	Functional programming paradigm		static foreach				Compile-time format string checking				toString with output ranges		Back referencing of mangled symbols			DMD support for AVX2				Deprecation of the comma operator				Colorized error messages			newCTFE		The only language that comes close to looking as useful as D is Rust, and it didn't exist back when I picked D. Nothing else gives the speed and metaprogramming that D does.	Adding "-O -release -inline" to your build is dangerous.	Maybe, I miss accountability at the moment		Tabs	2018-03-14 08:14:53	2018-03-14 08:43:37	b32aecc805
88cba8b0966bd4112228e7baee10efa9	No, I have stopped using D		Lack of libraries for the kind of projects we do. Java, C#, C++ are catching up with the features I like on D. Swift, Rust and Go are becoming more relevant to my employers.		"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			3	Not everything works as documented, not understanding that TDPL wasn't actually inline with the compilers.	3	Strange naming of some methods like levenshtein distance, instead of more widespread known names.	2	3	3	Not as eye candy as other programming language sites.	0			1	Mostly great content		4	D Forum							4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development	Desktop applications	IoT			Game Development		Embedded Systems				Mobile Development	Official Windows .exe installer			Official .deb packages																									Not using it anymore.	DMD	Linux	macOS	Windows		Android	iOS	WebAssembly	Embedded		dmd		dub						No		Monodevelop with Alex's plugin (in the past).	3	1	3			3	To actually be the same frontend across all implementations.	It's ok	Attributes overload, which aren't consistent.								UDAs for attributes								No	3	Still not the same across specification and all compilers.	Yes	2	3	2				Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules			Performance		More/better container classes					better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark			std.image	std.drawing (2D)					std.bitmanip						std.csv		std.demangle				stdx.allocator	stdx.checkedint	stdx.logger																																							I don't use D				Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000				Compiler regressions		Poor GC implementation / performance	Lack of roadmap		Non-enterprise IDE support	Poor debugging		DLL support on Windows	Missing support for platform X					Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials	No good point for learning D						Lack of progress on DIPs	Lack of focus at the management level				Fast, Safe, Undecided	DDJ	Seemed a good candidate for native programming, with two big names behind it.	None							Native interoperability with C					Simple, but powerful module system	Templates			In, out, ref parameters	@safe strings + arrays	Garbage collection		Contracts			std.concurrency & std.process		Functional programming paradigm																											None, I lost track with D's progress.	Nothing, as the other languages more relevant to my job are getting the features I liked about D.	Abuse of mixins/templates.	No, I'm not interested into D		Spaces	2018-03-14 07:38:22	2018-03-14 08:32:03	6fe641edbb
3970cacb9354e0cbd982ddee5fc34246	Yes	4					Language specification										4		3	Don't always understand the terms	5	3	3	I do not typically visit the homepage	0			0			3							Have not needed to ask a question that could not be solved with Google		Yes, I like StackOverflow.			Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly		Desktop applications											Official Windows .exe installer			Official .deb packages																										GDC	Linux		Windows									dub						No	vim / neovim		4	0			Not needed to	2	The same program compiled under dmd for Windows is noticably slowed than gdc for Linux on the same machine	It's awesome - keep it as is																				Yes	3	4	4	Nothing - Phobos (Standard Library) is great											Performance							better json serialization																																																										No, and I don't plan to										I am just starting to learn D		Nothing										Nothing						Nothing								Nothing													Little info on StackOverflow						Nothing.								Quite nice C++	Saw 'Programming In D' on Reddit	Personal curiousity	I've only used phobos and derelict.sdl2											Closeness to C/C++							Garbage collection																																			It feels like C++ without the horrible syntax, it was a fun change for a project	Lack of dub documentation	Maybe, I'm still a student		Tabs	2018-03-14 03:09:09	2018-03-14 03:19:26	e031c930ad
ab594457e0c79cb18289e970c83fff43	No, I have stopped using D		D's ecosystem did not seem very well-suited to non-professionals of programming or computer science.			tour.dlang.org			D Forum: Learn	"Programming in D" by Ali Çehreli							2	Difficulty finding libraries.	3	Nothing.	0	4	4	Nothing.	1	2	Nothing.	0			3	D Forum							4	No, the D.Learn forum is fine.	No.	No.	Please don't ever break code.	Rarely		Desktop applications				Game Development							Official Windows .exe installer																	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows		Android	iOS			Videogame consoles.	dmd								Not applicable	vim / neovim		3	0			Did not feel like it.	3	Greater optimization of binary sizes.	It's awesome, but I miss a few features	Why not also include an option for the symbols: • := for =; • = for ==; • # for != ? That would look better. Some kind of switch or way to make it easy to for projects and programmers would be nice.														Nothing - D is already awesome		No	4	Nothing.	No	3	3	3	Nothing - Phobos (Standard Library) is great											Performance									std.graph	std.database				std.color	std.image	std.drawing (2D)		None.	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container	std.conv	std.csv	std.datetime	std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json		std.mathspecial	std.meta	std.outbuffer	std.parallelism	std.path	std.process		std.regex	std.signals	std.socket	std.stdint		std.system	std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	Nothing.	No, and I don't plan to				Time is my only enemy						I am just starting to learn D								Performance problems								Poor GC implementation / performance		Nothing								Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow				Few transition guides from programming language Y			Too much low-level focus (C/C++)						Not at the moment.	Nice. 	Internet.	Seemed interesting. 	Phobos.												Simple, but powerful module system													Functional programming paradigm																	Runnable examples on dlang.org						Colorized error messages					If I use it, it is because it is a good alternative to certain other languages. It was also for learning.	Nothing.	Maybe, I miss accountability at the moment	Please ensure that it pushes C++ aside all the way.	Tabs	2018-03-12 18:25:00	2018-03-12 18:49:24	308537d2a5
7fd3b5bac7131ea1dbdcf4d6b091acbe	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org			D Forum: Learn								4	early compiler issues, breadth of features	4		4	5	5	I think overall it's difficult to convey the full "personality" of the language in a concise way.	0			1	Mostly great content	occasional articles directly by Walter or Andrei would be nice.	4						I don't need help		4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly		Desktop applications				Game Development					Science/Research		Official Windows .exe installer	Official tarballs									Choco								2.076.1 (static foreach)											DMD	Linux		Windows		Android			Embedded				dub	make			scons		No	Sublime		4	0			time, level of detail required, not having read through existing issues for a match.	4		It's awesome - keep it as is																				Yes	3	4	5				Poor naming choices			Fear to do breaking changes										std.eventloop					std.database						std.drawing (2D)																																																	No, and I don't plan to				Time is my only enemy	Personal laziness			High barrier to entry				Nothing													Poor compiler error messages			Nothing										Attribute bloat										Few showcases / flagship projects										Lack of progress on DIPs				Lack of focus where programming "excitement" is at the moment (e.g., mobile platforms,AI/ML)	powerful, clean, deep.	Early games by Kenta Cho	curiosity, also disgust with C++ compromises			Mixin	CTFE (static if, static foreach)				Native interoperability with C	Readable syntax		-betterC			Templates					Garbage collection	Inline assembler																																		hobby, wanting to help move the world along from C++		Yes, just tell me how		Spaces	2018-03-12 17:00:55	2018-03-12 17:33:25	926366549b
51002601bc4358b262c370a7457882e4	Yes	4														Sociomantic Labs	4	Fibers	4	No idea.	0	5	5	Nothing, it is fine.	0			1										Sociomantic Slack	5	Yes, I like StackOverflow.			Please don't ever break code.	Daily	Web development																		d-apt Debian/Ubuntu																					D1			Linux	macOS					WebAssembly						make				maked	Yes, I work with D full time	Sublime		1	0			the fact that I am using D1.	3		It's awesome, but I miss a few features	To write the enum type fully to make a check on an enum. For example:				named arguments		language binding to X										No	3		Yes, but only for some projects	3	3	3																																																																													No, but to other D repositories																										Poor GC implementation / performance			Non-enterprise IDE support																																			Sociomantic Labs	Because I entered Sociomantic Labs.								Native interoperability with C	Readable syntax							Built-in unittests	In, out, ref parameters																																					I like to use newer languages.	mixins, because IMO they are creating a easy escape when you couldn't find on yourself a good OO design. Templates also because of the same reason.			Spaces	2018-03-12 14:13:29	2018-03-12 16:45:27	5a675dd225
e975f97e0514a25dac33f991f132927d	No, I have stopped using D		Only using Powershell and C# at work and haven’t had time to learn more. 		"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							4	Cross platform compatibility. D on Linux is a challenge to get setup. D for embedded systems is limited in capability (my primary focus at the time I was learning to program D). 	4	Example usage is not always clear. 	4	4	4		0			0			4	D Forum							4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely			IoT	DevOps				Embedded Systems					Official Windows .exe installer						d-apt Debian/Ubuntu				Choco						2.078.3 (latest)													DMD	Linux	macOS	Windows					Embedded		dmd		dub		cmake				No	Visual Studio Code		3	0			Haven’t had any that we repeatable. 	4	Easier to understand error messages, like the rustc errors. 	It's awesome - keep it as is																				Yes, but only for some projects	2	3	3							Fear to do breaking changes																																																																					Lack of customisabity for embedded systems. 	No, but I want to to										I am just starting to learn D		Nothing										Nothing												D's dependence on a large and bulky runtime																													Better than c++	From a colleague who was using it instead of c++ to write utilities. 	As an alternative to C++, Java, and C#	I don’t have one. 	Ranges & std.algorithm							Readable syntax			Closeness to C/C++													Multi-paradigm	Functional programming paradigm				DMD as a DUB library																								Easier to understand than Rust, with similar goals. 		No, I'm not interested into D		Meh, I don't care.	2018-03-12 16:03:18	2018-03-12 16:23:19	f64711a0ac
4f83c90f99ae3cb0c9e815ce2308af76	Yes	2			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org				"Programming in D" by Ali Çehreli							2	Documentation not matching the respective LDC / GDC compiler versions Outdated documentation with less practical examples	2	Missing examples, missing description of return types in case the return type is "auto"	0	4	4	#	1	4	//	1	Mostly great content	/	4	D Forum						Github bugs / PRs	5	I don't care.	/	Yes, it was a regression.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development	Desktop applications		DevOps						Kernel Development	Science/Research																Debian native			2.077.1 (latest LDC)												GDC	Linux														meson			Yes, I work with D part time		Kate	3	1	2	Responses take ages, no feedback on PRs		4	Full GCC compatibility / compatible flags	It's awesome, but I miss a few features	Incredibly decorator bloat occasionally: override pure @trusted @nogc @nothrow The ract that ref/out does not have to be repeated when calling a function (makes it difficult to see what is going on)	tuples			named arguments	assert diagnostics	language binding to X										Yes, but only for experimenting/testing/debugging	3	/	Yes	1	3	0				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers	better json serialization	better xml serialization		std.database	std.i18n							std.json (awful), std.xml, occasionally std.stdio				std.compiler	std.complex						std.demangle											std.mathspecial		std.outbuffer						std.signals												std.windows			std.zip	Sanitize function names, make code nogc (ideally), no legacy code (= less ambiguity on what to use)	No, but to other D repositories				Time is my only enemy	Personal laziness								Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)					@safe-ty problems / missing DIP1000				Compiler regressions		Poor GC implementation / performance		Nothing										Attribute bloat				Ugly bits of the standard library			Fewer third-party libraries than other language			Few showcases / flagship projects			Lack of good examples / tutorials							Lack of progress on DIPs				/				ddbc / Hibernated, D-YAML		Mixin					Native interoperability with C	Readable syntax			Closeness to C/C++											import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime																	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8								Yes, but only for a specific project		Spaces	2018-03-12 15:33:13	2018-03-12 15:50:54	c38641fcdd
3a2cbc4ab7e3ecb8e310d68e40518672	Yes	3					Language specification										3	Lack of functioning tools (IDEs, debuggers etc) Magic (e.g. you don't know if you have a pointer or not unless you know if you have a class or a struct so you have to hold a lot in your head at any one time)				3	4		0			0			3					My colleagues			4	I don't care.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily							Big Data									Official .deb packages																								D1		LDC	Linux	macOS		BSD-variant							rdmd							Yes, I work with D full time	vim / neovim		3	1	3			3	Clearer error messages/less random segfaults	It's ok				in-place struct initialization	named arguments												No	4		No																																																																																Yes	3	Fixed a bug, couldn't test as it needed windows											Language complexity (e.g. inout, abuse of mixin)													Poor GC implementation / performance				Poor debugging															Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages																It gets more complicated by the day to look at some D code and being sure what it does. Is this a pointer? Does this allocate? After all these templates what code is actually run?	better than old-C++	web? more than 15 years ago I think.	Got a job using it								Native interoperability with C	Readable syntax			Closeness to C/C++				Built-in unittests																																						Work	Having to put an empty default section in every switch statement (not the worst thing but it annoys me every time :-) 	Yes, I'm already doing so		Tabs	2018-03-12 14:12:46	2018-03-12 14:32:15	5a675dd225
09bae4f263859e78877b50d3b3487b8c																																																																																																																																																																																																																																																																																																																																																		2018-03-12 14:15:47	2018-03-12 14:16:16	5a675dd225
21f94d816cc01094d47ab5bea6b688ac	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org				"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms		3		4		4	5	5		1	5		1	Mostly great content		4	D Forum		#d on StackOverflow					4	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications				Game Development							Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows		Android					dmd		dub						Yes, I work with D part time	DlangIDE		4	0				4		It's awesome - keep it as is																				Yes	3	3	4	Nothing - Phobos (Standard Library) is great													More/better container classes			std.eventloop		better json serialization	better xml serialization	std.graph	std.database																																																							No, but I want to to				Time is my only enemy						I am just starting to learn D		Nothing										Nothing						Nothing								Nothing														Missing tutorials / documentation in spoken language X					Nothing.								elegant				Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters		Garbage collection		Contracts				Multi-paradigm	Functional programming paradigm																																	2018-03-11 20:23:51	2018-03-11 21:00:22	aa717d95a6
a03271e14245c9237d34712038bdf89c	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							4	immutability/const	4		3	4	4		1	4		1	Mostly great content	would like to see more practical tutorials on debugging memory and GC problems, profiling	5	D Forum							4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development			DevOps												Official .deb packages	Official OSX dmg installer											2.079.0 (nightly)														DMD	Linux	macOS	Windows							dmd		dub						No	Intellij		3	0				4	error messages should point more directly at the problem root	It's awesome, but I miss a few features	lack of named arguments, tuple deconstruction	tuples			named arguments			multiple alias this									No	4		Yes	5	5	4									@safe for all modules	@nogc	DIP1000			More/better container classes			std.eventloop	@nogc containers														std.bigint		std.compiler	std.complex											stdx.checkedint					std.math	std.mathspecial	std.meta	std.outbuffer																							Yes	4											Nothing																	Non-enterprise IDE support	Poor debugging	dub														Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials					Too much low-level focus (C/C++)		Lack of progress on DIPs					balanced, powerful, pleasant				Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax	UFCS			Simple, but powerful module system	Templates			In, out, ref parameters	@safe strings + arrays	Garbage collection		Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime						New range functionality (substitute, slide)							Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org											it is fun to use it		Yes, just tell me how		Spaces	2018-03-11 19:23:04	2018-03-11 19:51:06	1fbcea490c
f59ec2a8bbe8251680fcff5e7eab6889	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										3		2	Big long module pages instead of single function pages	0	3	2		0			1	Mostly great content		5	D Forum					I don't need help		4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly						Game Development							Official Windows .exe installer	Official tarballs		Official .deb packages																2.075.1 (removed built-in .sort)										DMD	Linux		Windows				WebAssembly	Embedded		dmd		dub						Not applicable	vim / neovim		2	0			Account. Formal structure	4	Better error messages in corner cases	It's awesome - keep it as is																				Yes	1	4	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket						DIP1000			More/better container classes		I'm happy as is.														std.typecons/std.meta		std.bigint	std.bitmanip	std.compiler					std.csv		std.demangle					stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json				std.outbuffer						std.signals	std.socket	std.stdint		std.system	std.traits			std.uri		std.uuid	std.variant		std.xml	std.zlib	std.zip	.save for forward ranges is very disturbing	No, but to other D repositories				Time is my only enemy	Personal laziness														Issues with language feature X (e.g. shared, @property)						Poor compiler error messages			Nothing										Attribute bloat			C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library						Few showcases / flagship projects										Lack of progress on DIPs	Lack of focus at the management level				nice. comfy. powerful.		C++ but nice	Derelict							Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates					Garbage collection											DMD as a DUB library		Compile-time format string checking				toString with output ranges						Automatic compilation of imports (dmd -i)										newCTFE		Good principles of the base design		Maybe, I'm still a student		Spaces	2018-03-11 19:09:30	2018-03-11 19:37:52	bf8388373e
fe1128cf9d58fe1a37e948d0234ab88e	Yes	5					Language specification										3	Textual layout of the specifications, lack of narrative on what method/functions do and poor or non-real world usecase  examples 	2	The layout of the methods declarations make it sometimes unclear of the parameters, and the examples are normally unit tests which don’t actually show real world usage.  	0	1	2	It needs polishing.   The site is not as exciting as other languages home pages.    I think there should be a Conscious effort in rebrand nding, new logos, new layout, re-wording of content.   Perhaps a sales/marketing consultant should be brought in.   Let’s let experts do what they do best.   D has the technical down perfect,  it just needs  work on the social/human side of things.    	1	3		0			1						I don't need help		3	Yes, I like StackOverflow.	There should be a community driven how to/knowledge base , with working download project examples.    This way the standard library can be showcased, and then any other 3rd party libraries can have a how to 	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily	Web development	Desktop applications		DevOps	Security						Science/Research							Official dlang.org/install.sh script	d-apt Debian/Ubuntu											2.077.1 (latest LDC)												LDC	Linux	macOS	Windows	BSD-variant			WebAssembly					dub	make					Not applicable	Visual Studio Code		2	0				5		It's awesome, but I miss a few features	Some of the standard library does not work the same way other languages library functions work.  STD.Regex for example.  It would also be nice for there to be things like endsWith,  there is a beginsWith for string searching but not a endsWith.    So there are some missing “easy button” type methods, that while you can implement your own solutions with a few other standard library calls it would be nice to make one call instead of 2-3 calls and a possible loop depending on what your trying to accomplish.   So a review of the standard library to identify some extra uses cases should probably happen.  Also c# style extension classes would be awesome,  where you can take a base class and add a new method to it be having the first parameter of the extension be a (Class this, <... other, parameters,...>).      So you could say  MyClass mine = new MyClass();   mine.myExtension();  MyClass mine2 = new MyClass().myExtension();  Where   class MyCoolClassExtension : MyClass {  public void myExtension(MyClass this) {       //... do something       this.public_property_var =  doSomthingResults; // the do something results; }							multiple alias this	UDAs for attributes								Yes, but only for experimenting/testing/debugging	2		Yes	3	2	2				Poor naming choices									More -betterC support	More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database	std.i18n			std.color	std.image	std.drawing (2D)					std.bitmanip																																												No, but to other D repositories				Time is my only enemy			D community								Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation						Non-enterprise IDE support	Poor debugging																Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials											Logo and branding issues, dated looking websites.  Hard to sell to management internally on why D is better than C#.  	Greater than C++ (D > C++)	stumbled upon it, after years of wishing a Lang like it existed, in a sea of corporate controlled other languages.    I found it, and I love it.   Just wish I could find a job doing it as my primary language day to day.   	Seems like the future, while still embracing the past, years of existing c code don’t have to be thrown out, you can just switch gears and keep coding.  		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection		Contracts	Debug attribute		std.concurrency & std.process	Multi-paradigm	Functional programming paradigm									New range functionality (substitute, slide)														Colorized error messages		Cross-compilation with LDC	newCTFE						Tabs	2018-03-11 15:01:28	2018-03-11 17:53:24	745a45e2b9
c5eec4093a15b9fa8b9eec140555fe42	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn				"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms		4	Templates	4	Needs more examples	3	4	4	The forums could be better	1	4		1	Always great content		4						I don't need help			I don't care.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications			Security									Official tarballs																2.077.1 (latest LDC)												LDC			Windows									dub						Not applicable	Visual Studio Code		4	0			Time	4		It's awesome - keep it as is																				Yes, but only for some projects	3	4	4		Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices		Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers				std.database		std.benchmark							std.base64	std.bigint			std.complex				std.csv	std.datetime	std.demangle	std.digest	std.encoding			stdx.checkedint	stdx.logger			std.json	std.math	std.mathspecial		std.outbuffer						std.signals	std.socket	std.stdint						std.uri		std.uuid			std.xml	std.zlib	std.zip	More usage of WinAPI	No, but I want to to				Time is my only enemy								Nothing				Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance				Poor debugging	dub	DLL support on Windows		D's dependence on a large and bulky runtime			Auto-decoding of strings											Few showcases / flagship projects			Lack of good examples / tutorials							Lack of progress on DIPs	Lack of focus at the management level					Google	The syntax was really clean and expressive	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays		Inline assembler		Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC						Reproducible builds			Automatic compilation of imports (dmd -i)						vibe.d 0.8				newCTFE				Maybe, I miss accountability at the moment		Tabs	2018-03-11 17:24:37	2018-03-11 17:46:18	0050cf64d9
ed6a73bf72c979044062526ecf72a65b	No, I have never used D			Happy with my current language														I haven't learned D...			1	4	4		0																																																																																																																																																																																																																																																																																																																									2018-03-11 15:14:06	2018-03-11 15:15:38	1a303902d1
90cdf62fed4caeb62e4ff72b55594d84	Yes	4					Language specification										3	buggy compiler	3		0	3	2	too much text	0			1	Mostly great content		4						I don't need help					Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications											Official Windows .exe installer	Official tarballs												I compiled D from source		2.079.0 (nightly)														DMD			Windows														Visual D	No	Visual Studio + VisualD		3	1	3			3		It's awesome, but I miss a few features	attributes																No	3		Yes, but only for some projects	3	3	2		Auto-decoding for strings												More/better container classes					better json serialization	better xml serialization												std.bigint			std.complex										stdx.allocator	stdx.checkedint	stdx.logger							std.outbuffer						std.signals																	Yes	3											Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.														CTFE (static if, static foreach)			Performance		Readable syntax				Simple, but powerful module system	Templates					Garbage collection									static foreach																						DCompute						No, I'm already donating my free time		Tabs	2018-03-11 14:11:27	2018-03-11 14:34:48	dc8de619b9
957958459cc2cecd9b7294d0f9b2d4a5	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn						d-idioms		3	Finding stuff like 'is/!is' (now I know that these are explained in the Expressions page) in the spec was a bit hard because they were hard to search for. 	3	I try to avoid using the standard library because it adds too much time to the compilation of the program.	0	4	5	I don't know.	1	4		1	Mostly great content	I don't know.	3	D Forum							4	I don't care.	Not really.	Yes, it was a regression.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily		Desktop applications											Official Windows .exe installer																	2.077.1 (latest LDC)												DMD	Linux		Windows							dmd								No	Sublime		4	0				5		It's awesome - keep it as is																				No	3	3	3						Reliance on the GC									I don't know.														I don't know.	I don't know.																																														Shoud't slow down the compilation process that much when using modules from std.*	No, and I don't plan to										I am just starting to learn D		Nothing									I don't know.	Nothing						Nothing								Nothing								Nothing											Nothing.								Saner C++.	I don't remember.	Fast to compile, statically typed, native, with good compile-time introspection/execution capabilities language.	I don't know.		Mixin	CTFE (static if, static foreach)			Performance			UFCS								@safe strings + arrays										static foreach	opt-in GC and runtime																							newCTFE		There is no other system programming language that I know of, that compiles fast and is as powerful and easy to use as D. (maybe Jai, but it's not out yet).	I don't know.		Nope.	Spaces	2018-03-11 10:26:38	2018-03-11 11:23:56	d3b492e20b
4ecf786b0dde64c9b194d02c000d7357	No, I have stopped using D		Lack of usable debugger													Self teaching from dlang	4		4		0	4	4		0			0			4		#d on IRC	#d on StackOverflow					4	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely						Game Development			Machine Learning	Kernel Development			Official Windows .exe installer			Official .deb packages													2.078.3 (latest)													LDC	Linux		Windows								rdmd							No	Sublime		4	0				5		It's awesome, but I miss a few features																	No			Yes	3	4	4						Reliance on the GC				@nogc		Performance	More -betterC support	More/better container classes		I'm happy as is.																																																													No, and I don't plan to				Time is my only enemy	Personal laziness																									Poor debugging																																			Fast, direct, lowlevel without C++ bloat			Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C		UFCS				Templates					Garbage collection	Inline assembler	Contracts					Functional programming paradigm															DMD support for AVX2																		2018-03-11 01:52:12	2018-03-11 02:04:51	f79f36825b
dd4cacd42af8e83cbc5ab97feae4f430	Yes	4					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4		4	examples	0	5	5		0			0			5	D Forum							5	I don't care.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly												command line utilities															official windows archives	2.079.0 (nightly)														DMD			Windows							dmd	rdmd							Not sure		FAR 3.0	3	1	4	fixing time		5		It's awesome, but I miss a few features	too many non-default attributes (pure const ...)				named arguments												No	5		Yes	3	5	5							Fear to do breaking changes				DIP1000											std.database			std.decimal				std.crypto, datetime format	date time					std.complex										stdx.allocator																																No, but I want to to								High barrier to entry			1) i need step-by-step manual to start. 2) i dismotivated by how long PR approved	Nothing										Nothing						Nothing										Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language													Lack of progress on DIPs					almost language of my dream, then some disadvantages will be fixed	don't remember, so long ago	better than C, C++, Java with like syntax; native compiled, strong typed; it was young evolving language	phobos	Ranges & std.algorithm						Native interoperability with C	Readable syntax	UFCS						Built-in unittests			Garbage collection						Multi-paradigm							Compile-time format string checking										Automatic compilation of imports (dmd -i)										newCTFE						Spaces	2018-03-10 18:05:59	2018-03-10 18:36:02	e0c726aaad
4cc376ebdb7cbaec3b129f79288eeb26	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			3	shared, alias this	3	Anti-OOP pattern	0	4	4	Missing tutorials for common IDEs	0			1	Mostly great content		3	D Forum							4	I don't care.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications											Official Windows .exe installer																2.078.3 (latest)													DMD			Windows							dmd								No	Visual Studio + VisualD		4	1	4			4	Syntactic sugar for common idioms	It's awesome, but I miss a few features	Missing bits		string interpolation		named arguments												No	3	Examples	Yes, but only for some projects	3	0	2		Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices										More/better container classes											std.decimal					ranges						std.concurrency			std.csv	std.datetime				std.exception																																Anti-OOP	No, but I want to to				Time is my only enemy										Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation		Poor compiler error messages					Poor debugging	dub	DLL support on Windows					Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library									Lack of good examples / tutorials					Too much low-level focus (C/C++)			Lack of focus at the management level	Wrong decisions at the management level			Missing the opportunity	Google	Seemed like C# on steroids	Tango :)			CTFE (static if, static foreach)										Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection	Inline assembler								static foreach																								newCTFE		Fun	concurrency approach	Yes, but only for a specific project		Spaces	2018-03-10 15:14:41	2018-03-10 15:28:47	0e4dad30af
b6f35a7546d3f40096210a6dffa4114a																																																																																																																																																																																																																																																																																																																																																		2018-03-10 12:57:16	2018-03-10 12:57:42	466e8188af
ec226a8eafa75d6bd04c7281b2757272																																																																																																																																																																																																																																																																																																																																																		2018-03-10 12:41:19	2018-03-10 12:41:35	51fde8cbb0
fff4b9031a78d92861b3b553ca8989b7	No, I have stopped using D		Clients objected to yet-another-programming-language.		"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker			d-idioms		4	Documentation and error messages (pre 2014).	4	Difficult for beginners: too much detail. Emphasize easy examples early.	0	5	3	Personally I preferred earlier versions centered on content more than presentation/marketing	1	5		1	Mostly great content		4	D Forum							5	No, improve DFeed.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development						Big Data				Science/Research			Official tarballs		Official .deb packages		Official dlang.org/install.sh script	d-apt Debian/Ubuntu													2.075.1 (removed built-in .sort)										LDC	Linux										rdmd		make					No	emacs		4	1	4			5		It's awesome - keep it as is																				Yes	3	3	5		Auto-decoding for strings		Poor naming choices								Performance		More/better container classes				@nogc containers	better json serialization			std.database									std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle	std.digest				stdx.checkedint	stdx.logger						std.meta	std.outbuffer						std.signals	std.socket							std.uri		std.uuid		std.windows	std.xml	std.zlib			Yes	3	Some hiccups in beta versioning (now fixed).											Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)						Lack of widespread adoption, especially in science area.				Poor compiler error messages		auto-decoding	Nothing									Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects						Need D Beginner forum because D Learn is advanced/intimidating 								DLangScience didn't really take off.	Convenient, powerful, efficient	Python discussion forum	Python too slow for big data	Mir (but not its name!)	Ranges & std.algorithm					Performance		Readable syntax	UFCS			Simple, but powerful module system			Built-in unittests			Garbage collection						Multi-paradigm										New range functionality (substitute, slide)	toString with output ranges							Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)										Yes, I'm already doing so		Spaces	2018-03-10 10:52:06	2018-03-10 11:31:48	bf80646f55
a379d3bb876a253c7b7cd88f50deec40	No, I have stopped using D		I'm a programmer who has first learned programming using Java and other vm/interpreted language and only later transitioned to native languages. Obviously starting with C/C++. After some time, I thought there must be a better, more modern way to native, performance-first programming. Naturally, I came across D and the syntax instantly clicked for me, I used it in a toy project, but after finishing it, I evaluated my experience and satisfaction with it and found it severely lacking.  While the language is alright (I'd like better ways to manage memory, but I'm willing to look past the gc), for me and many people of my generation (that I know of) it's about what the tool can offer on top of the language. I can write the same programs in C++ and D in roughly the same amount of time. D will same me some headache by having a default gc and shorter compile times; but the two most important issues that I have with both D and C++ is: no default stacktrace on segmentation faults (just.. why? I seriously don't want to attach gdb to find trivial bugs that could have been fixed by looking at the line specified by the simplest of stacktraces) and subpar IDEs. I know language is more than the IDE used to write in it, but this is a dealbreaker for new developers. Especially the DCD daemon is a terrible code completion tool. 				Language specification		D Forum: Learn								4	Understanding the toolchain, especially dub. Everything seems to be focused on unix development, and very little is said of Windows, when there are sometimes quite large differences. Obviously the aforementioned IDE problems apply here.	4	I actually found it quite pleasant, but searching through it was a bit of a pain.	0	3	3	I have serious problems accessing all of or parts of dlang.org during local daytime, it usually works at night. Default Google DNS cannot locate subdomains such as wiki.	0			1	Mostly great content	More frequent updates	3						I don't need help		5	Yes, I like StackOverflow.	I haven't needed help, but stackoverflow has proven effective and questions answered years ago remain relevant today. The forum is alright, but it doesn't have the same infrastructure and conciseness of stackoverflow.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely		Desktop applications	IoT		Security	Game Development			Machine Learning		Science/Research		Official Windows .exe installer																								2.070.2 (alias as a function literal)					LDC			Windows							dmd								No	Visual Studio Code		1	0				3	More explanatory error messages. I have *some* type theory background so I understand majority of error messages, but many of my colleagues and friends often ponder what the hell the error even means.	It's awesome - keep it as is																				Yes	3	4	3					Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc		Performance		More/better container classes				@nogc containers				std.database					std.image			I think I had some minor difficulties with files, but eventually worked around them. 																stdx.checkedint							std.meta													std.typecons	std.uni			std.uuid						Absence of really good logging implementation with expressiveness close to boost::log (even though the implementation of it is garbage, the expressiveness is huge)	No, and I don't plan to				Time is my only enemy											Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC								Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging	dub					Nothing									Fewer third-party libraries than other language				Little info on StackOverflow						Nothing.							As I already stated: Debugging (a modern language REQUIRES default (opt-out) segmentation fault stacktracing) and IDE.	Promising, lacking, immature	Google	Wanted to check for myself if it's worth writing my personal projects in it.	Don't have any.	Ranges & std.algorithm										Closeness to C/C++		Templates						Inline assembler						Functional programming paradigm									New range functionality (substitute, slide)																			Nothing right now. I have dropped using D because of the issues I specified earlier.	Default gc.	Maybe, I'm still a student		Tabs	2018-03-10 02:49:14	2018-03-10 03:34:06	a8270ef1d1
8547716ef8c757d30888fb98787d9757	Yes																1		2	Better examples. Better links to dmd implementation.	0	2	1		1	3	Too long. Irrelevant.	0			5								4	No, improve DFeed.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development																Official OSX dmg installer							Docker																		DMD		macOS	Windows	BSD-variant														No	Sublime		5	1	4			3		It's ok	Subslice syntax														Nothing - D is already awesome		No	5		Yes	5	2	4								No alternative to Vibe.d											better json serialization										std.net.http std.net.sctp stdx.net.http.oauth												std.demangle			std.exception							std.math	std.mathspecial																		std.uuid					std.zip		No, but I want to to					Personal laziness					I am just starting to learn D																					dub																			Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials										Too much listening to the bikeshedders.			That Facebook C++ linter.		std.algorithm	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax							Built-in unittests													opt-in GC and runtime										Reproducible builds																	No, I'm already donating my free time		Tabs	2018-03-09 20:58:07	2018-03-09 21:28:30	09076213d5
06d37b07a23797f7c8774a9788a4abcf	No, I have never used D			Most implementations I found over the internet overuse the template metaprogramming making it hard to understand. Also there is slow rate of adoption.		tour.dlang.org	Language specification										4	Not widespread among beginners or educators. Hard to adopt without falling down to learning C or C++ concepts.	4	I have not thought about it yet.	0	4	3	More success stories, more user engagement, more fun and welcoming screen (perhaps containing nice graphics).	0			0			1	D Forum							4	No, the D.Learn forum is fine.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development					Game Development			Machine Learning	Kernel Development			Official Windows .exe installer																2.078.3 (latest)													DMD			Windows		Android	iOS				dmd	rdmd	dub						No	Sublime		1	0				5		It's awesome - keep it as is																				Yes	0	3	2								Perhaps there is the need for a little better overall organization of packages. Such as .NET or Golang.						More/better container classes														std.drawing (2D)							std.complex						std.demangle												std.meta																							A little better organization, high level structured, where each part is located "logically" to it's own place. A very good design is that of .NET Framework.	No, but I want to to						No roadmap		High barrier to entry					Language complexity (e.g. inout, abuse of mixin)								Less reliance on C or C++ practices, better to switch to the direction of GoLang, enforce strong code API design guidelines to encourage simple and useful implementations.	Nothing							Non-enterprise IDE support	Poor debugging												Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials	No good point for learning D				Too much low-level focus (C/C++)						Perhaps it needs to promote simplicity first rather than powerful. A safe bet is to focus on C code and try to offer strong examples of why is better. The reasons are "simplicity" > make it widely accessible to a large audience, "C code" make it accessible to technical developers - those who will use it for fundamental technical components of serious and important projects. Also another weak point is the lack of tight cooperation with large corporations, who would give strong points to D such as promoting it internally, making it more widespread, and providing funding.	Good C++ replacement.	From Google search engine.	Because I wanted the ease of use of C# but with the efficiency of C++.	Perhaps derelict.										-betterC								Garbage collection	Inline assembler																																		C and C++ can't become any better, while C# and Java evolve gradually into monstrous creations. I hope that D would take the best parts of all languages and provide a far better and efficient option than the existing ones.		Maybe, I miss accountability at the moment	Initially Water Bright might had in mind the creation of a better C C++ therefore named it D. But the real picture is that perhaps D is the answer that improves all of the other languages as well. All of the languages tend to become either dinosaurs (becoming old) or mutated dinosaurs (godzilla). The answer to this is focusing to the most essential and fundamental design principles. For me personally if C would provide support for lists and templates would have become the most efficient language ever to the degree of discouraging everyone else from making a new language. The point in all these is that perhaps only D has the chance to end all of the other programming languages. But this would require deep strategic thinking done in the background.	Spaces	2018-03-09 16:16:42	2018-03-09 17:07:49	c7dfe9c646
9efce6575994ecff864182e26c48de27	No, I have stopped using D		Too fragmented and unstable and confusing libraries			tour.dlang.org	Language specification	#d IRC on freenode	D Forum: Learn								3	The "Range" concept is too weird. (too abstract; too generic). Also functions with 'auto' return values are very difficult to use because even the docs on the official site doesn't really explain what the return value is.	3	Functions that return `auto` type.	0	3	3	It's too much like a sales website. I prefer the old style with the information laid out clearly instead of small boxes of salesy text.	0			0			4	D Forum	#d on IRC						5	No, the D.Learn forum is fine.	Please don't ditch internal forum in favor of SO. When I say a project "outsource" its support to SO, I think to myself: these people are not serious and are just avoiding responsibility.	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development	Desktop applications				Game Development							Official Windows .exe installer				Official OSX dmg installer				Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows							dmd		dub						No	Visual Studio Code		2	0			I don't like buzilla.	4	To have a builtin build system (similar to Jai and Zig) so that there's no need for an external build system with its own separate language	It's ok	I prefer Swfit/Kotlin style syntax for function and variable declarations, but this is a very minor point.		string interpolation	in-place struct initialization	named arguments												Yes, but only for experimenting/testing/debugging	4	A bit too large maybe, but nothing particularly to complain about.	Yes	2	0	0				Poor naming choices		Reliance on the GC				@nogc			More -betterC support				std.eventloop	@nogc containers							std.decimal		std.image	std.drawing (2D)		Functions that work with "Ranges", functions that return "auto".								std.conv	std.csv		std.demangle	std.digest		std.exception		stdx.checkedint									std.parallelism																std.variant					Less templates and magic, more concrete and clear functions.	No, and I don't plan to								High barrier to entry						Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC										Just general apathy caused by many tiny little issues (gc, weird abstractions in std, no named arguments .. )	Nothing											Virtual by default									Few showcases / flagship projects			Lack of good examples / tutorials				Nothing.							It would be nice if instead of the GC, the language had Swift-like ARC and a temporary storage area (like JAI).	Fast language with GC	Very long time ago (~2003). Don't remember exactly.	I thought it was better than both C++ and Java.	Tanya, I think.			CTFE (static if, static foreach)			Performance	Native interoperability with C												Inline assembler			import("myfile")		Multi-paradigm	Functional programming paradigm			opt-in GC and runtime				-betterC									Automatic compilation of imports (dmd -i)									Cross-compilation with LDC			Lack of other high performance languages	Too much reliance on the weird abstractions around "Ranges".	No, I'm already donating my free time	betterC needs to be forked into its own language (and somehow keep it compatible with D). or at least make it more well defined.	Spaces	2018-03-09 03:48:50	2018-03-09 12:06:54	923b570d97
5a41463539c155b90171b4dfec88ea1e																																																																																																																																																																																																																																																																																																																																																		2018-03-09 07:27:32	2018-03-09 07:27:54	e3b64540c8
2dda11e87761ca5e1e97f7eba69967bd	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	Absence of dub in the early days :-)	4	Good examples of common real-world usage (examples are sometimes a bit contrived)	5	5	5		0			1	Mostly great content		5	D Forum	#d on IRC						4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development						Big Data				Science/Research								d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux				Android					dmd	rdmd	dub						Yes, I work with D part time	Atom		4	0				5		It's awesome - keep it as is																				Yes	3	4	5	Nothing - Phobos (Standard Library) is great																		better json serialization	better xml serialization		std.database	std.i18n		std.decimal																																																				No, but I want to to				Time is my only enemy											Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing						Nothing								Nothing									Fewer third-party libraries than other language										Nothing.								fast, productive, fun	On a C++ forum	Because it sounded awesome.	vibe.d	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax						Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays							Multi-paradigm							Compile-time format string checking											Runnable examples on dlang.org					vibe.d 0.8						Python is slow :-)		Yes, just tell me how	D is about 20 years overdue!	Spaces	2018-03-09 04:09:10	2018-03-09 04:22:29	07c458b077
38cc39bf97665f53256591cc4d32de6a	Yes	4					Language specification			"Programming in D" by Ali Çehreli							3		3	Sometimes hard to know which module to find range/algorithm/string functions	5	3	3		0			1	Mostly great content	I think it's pretty good.	4	D Forum	#d on IRC						5	I don't care.	No	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications					Big Data		Machine Learning		Science/Research									Arch Linux	Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows				WebAssembly					dub		cmake	meson			No	vim / neovim		3	1	4			4	Stuff like https://issues.dlang.org/show_bug.cgi?id=13868 to get fixed	It's ok	Attribute explosion	tuples			named arguments		language binding to X										Yes, my project depends on it	3		Yes	3	4	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc	DIP1000		More -betterC support	More/better container classes					better json serialization	better xml serialization		std.database	std.i18n														std.container																																							dependence on curl seems to cause issues too often	Yes	4															Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000		Nothing								Poor debugging			Missing support for platform X			Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects										Lack of progress on DIPs	Lack of focus at the management level			There seemed to be a push for better C++ integration, but that effort didn't get to the finish line.  I think Andrei said some students were working on it, but it's been mostly radio silence.		website	Level of abstraction & control sits where I like to be.			Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C			-betterC	Closeness to C/C++		Templates											Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations		-betterC										Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute	Cross-compilation with LDC	newCTFE		extensive metaprogramming	Unfinishedness of shared	Maybe, I'm still a student		Spaces	2018-03-09 03:37:52	2018-03-09 03:57:22	b6feb481fc
54ec4353bbb7447f743b2dfd2e9646b2	No, I have never used D			La poca documentación para aprender a usarlo		tour.dlang.org											3	La insuficiente cantidad de tutoriales y documentacion	4	Eplicación	5	4	3	Organización de la documentación	1	4	El desorden de ayuda	0			5	D Forum							5	No, the D.Learn forum is fine.	Si, un lugar o canal mas ordenado y ramificado (podrian abrir un canal de Discord) 	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily						Game Development							Official Windows .exe installer															2.079.0 (nightly)														DMD			Windows							dmd								No	Sublime		4	0			no entiendo la pregunta, perdonen	5		It's awesome - keep it as is																				Yes, but only for some projects	6	2	2	Nothing - Phobos (Standard Library) is great												More -betterC support														std.image			si, no la comprendo por falta de explicación																					std.math																									seria: adaptacion de opengl, documentacion en español y la extenderia para videojuegos	No, but I want to to										I am just starting to learn D		Nothing											Poor Phobos (Standard Library) documentation					Nothing								Nothing										Less corporate support (including jobs) than other languages									Nothing.							si, es un increible lenguaje, pero me gustaria mas compatibilidad con sdl, sfml y opengl, ya se que hay bindings pero no son completamente estables	Rapido, Facil(Lastima la documentación), Robusto	Tiobe Index	Me interesa el control de bajo nivel que proporciona(encajaria perfecto con sdl)	nose, lo estoy aprendiendo										-betterC																						-betterC																					Su control de bajo nivel y posible implementacion de librerias de juegos		Maybe, I'm still a student	Si, podrian ampliar la comunidad en discord y podrian adaptar mas librerias para el desarrollo de videojuegos(atraeria a mas gente)	Tabs	2018-03-08 23:44:36	2018-03-09 00:13:10	cf34216e11
38741a5f3e28effd4d03e0fa31c69f1d	Yes	3				tour.dlang.org											3	Lack of libraries similar to Numpy, Scipy, Mathplotlib, Sympy	3	Examples.  It is important to give concrete examples on how to use the functions.  Simple illustrations given at present are not very useful when I am trying to learn and develop with D.	2	4	3		0			0			3			#d on StackOverflow					3	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly											Science/Research								d-apt Debian/Ubuntu	Arch Linux									2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd		make					No	vim / neovim		3	0			I have not used advanced D features yet.  I am still a beginner who wanted to replace C with D.	3	Good compile error message.	It's awesome - keep it as is																				Yes	3	3	4	Nothing - Phobos (Standard Library) is great													More/better container classes								std.database				std.color	std.image	std.drawing (2D)		None at present									std.csv												std.math							std.random					std.string											std.zlib	std.zip	scientific library comparable to SciPy, pdf handling library, mathematical plotting library	No, but I want to to			Finding good issues to get started							I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)										Poor compiler error messages						dub					Nothing									Fewer third-party libraries than other language						Lack of good examples / tutorials		Few transition guides from programming language Y				Frequent breaking changes					Breaking changes are discouraging the development of scientific and modern data processing library.  Looking at Python 3, the issues of breaking changes are minimised by the 2to3 and Python Foundation's focus.	A better C	reddit	Speed and as good as Python	std.stdio	Ranges & std.algorithm					Performance	Native interoperability with C		UFCS						Built-in unittests			Garbage collection						Multi-paradigm	Functional programming paradigm									New range functionality (substitute, slide)											New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)			DCompute				Powerful syntax comparable to C++ but a cleaner syntax	foreach enumerate sometimes does not work as expected	Yes, just tell me how		Spaces	2018-03-07 04:30:18	2018-03-08 23:55:29	99aa66a941
82873825a716fd1a32f26b761b8fb1d7	Yes	4					Language specification			"Programming in D" by Ali Çehreli							4	struct/class, ranges, templates	3	varying degree of detail, some documentation is rather vague, lack of variety of examples in some functions	1	4	3	nothing	0			1	Huge variance in quality		4	D Forum							4	I don't care.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly							Big Data		Machine Learning		Science/Research		Official Windows .exe installer																	2.077.1 (latest LDC)												LDC	Linux		Windows		Android					dmd		dub						No	Visual Studio Code		3	0			bugzilla complexity	4	more informative messages for some errors	It's awesome - keep it as is																				Yes	2	3	4				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc		Performance	More -betterC support	More/better container classes				@nogc containers													std.base64	std.bigint		std.compiler							std.demangle		std.encoding			stdx.checkedint	stdx.logger						std.meta				std.process			std.signals							std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to										I am just starting to learn D		Nothing														Poor GC implementation / performance			Non-enterprise IDE support					D's dependence on a large and bulky runtime																Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials													Google	more productive than C++, needed to get performance and write fast prototypes for experiments. Lost too much time in C++ for getting anything working,  and other scripting languages too slow.	std.algorithm	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection							Functional programming paradigm		static foreach																		New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute	Cross-compilation with LDC					No, I'm already donating my free time		Meh, I don't care.	2018-03-08 17:42:43	2018-03-08 18:06:13	c998ae6ebc
72eebe4ee5ea655c0346e4d7bd0ebede	Yes	5					Language specification		D Forum: Learn								4	using phobos with templates. 	5	sometimes, new functions added without update the doc.	1	4	2	many topics difficult to find from toppage	1	4	nothing	1	Mostly great content	nothing	3						I don't need help		4	No, the D.Learn forum is fine.	cos' my talking skills in English	No.	Please don't ever break code.	Weekly		Desktop applications					Big Data		Machine Learning		Science/Research									Arch Linux								2.079.0 (nightly)														DMD	Linux		Windows							dmd		dub						Not applicable	vim / neovim		4	0			'cos my notices are cleared by other people	5		It's awesome - keep it as is																				Yes	3	5	4							Fear to do breaking changes						More -betterC support	More/better container classes		I'm happy as is.														nothing		std.bigint		std.compiler							std.demangle	std.digest			stdx.allocator	stdx.checkedint														std.signals		std.stdint		std.system					std.utf		std.variant	std.windows		std.zlib	std.zip	statistics functions (mean,sd,quantiles,etc)	No, but I want to to			Finding good issues to get started		Personal laziness							Nothing										Nothing						Nothing				DLL support on Windows				Nothing															Lack of good examples / tutorials					Too much low-level focus (C/C++)							easy, fast, well	maybe 2007, in web browsing	I was interested in many languages, try their	phobos	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection		Contracts	Debug attribute		std.concurrency & std.process		Functional programming paradigm																Automatic compilation of imports (dmd -i)												the best language that realize my ideas	nothing	Maybe, I'm still a student	nothing	Spaces	2018-03-08 04:45:54	2018-03-08 05:33:48	685994de92
6c6b8f90062fff80b2240f27bc60c2f2	Yes	4				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli						https://k3kaimu.github.io/dmanual/	3	Concept of Range	5		2	5	5	 	1	5	 	0			2						I don't need help		2	I don't care.	No	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly												Competitive programming	Official Windows .exe installer																		2.076.1 (static foreach)											DMD			Windows							dmd								No	Sublime		4	0				4		It's awesome - keep it as is																				Yes	3	4	4	Nothing - Phobos (Standard Library) is great											Performance				I'm happy as is.															std.base64			std.compiler	std.complex	std.concurrency			std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger		std.getopt	std.json		std.mathspecial	std.meta	std.outbuffer	std.parallelism	std.path	std.process			std.signals	std.socket	std.stdint		std.system				std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to			Finding good issues to get started		Personal laziness			High barrier to entry		I am just starting to learn D		Nothing										Nothing						Nothing								Nothing										Less corporate support (including jobs) than other languages	Little marketing / no evangelists			Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials				Nothing.								fast, easy, comfortable	twitter	for competitive programming	std.range, std.algorithm	Ranges & std.algorithm					Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates								Debug attribute																																D is fast and allowed to use in some competitive programming site.(Atcoder, Codeforces)		Maybe, I'm still a student		Meh, I don't care.	2018-03-07 20:24:59	2018-03-07 21:00:14	b86f885195
f46aba72334e72048e958a7df77f79dc																																																																																																																																																																																																																																																																																																																																																		2018-03-07 18:11:54	2018-03-07 18:13:41	fcfa8f2963
2481046d37bec03a69922c940cea6aa7	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4		4	Minor rant: some of the examples require looking up the documentation of other symbols.	1	4	5		0			1	Always great content	Not much.	4	D Forum			dlang.slack.com				4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily												Industry technician	Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu							I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows		Android	iOS								cmake				No		KDevelop	2	1	3	No syntax highlighting, no text formatting.		4	Better error messages, especially with mixins.	It's awesome, but I miss a few features	Attribute proliferation, no inference for non-templates. There may be ways to make compile-time features more elegant and less prone to trial and error.															Passing rvalues to ref parameters, UFCS for overloaded operators	No	4		Yes	3	6	6		Auto-decoding for strings				Reliance on the GC	Fear to do breaking changes			@nogc																																																																			Yes	4															Non-perfect C++ integration						Nothing							Non-enterprise IDE support						Debugging isn't poor but D function calls from GDB would be awesome	Nothing									Fewer third-party libraries than other language															Wrong decisions at the management level		Conservatism for the sake of not breaking existing code is heartbreaking. Holding language improvements for an eventual D3 is a bad choice imo, instead a gradual improvement of D would be much better and more exciting, but there should be mechanisms to specify a language subversion for a piece of D code, so that old code remains compilable even by newer compiler implementations. But ofc there is a delicate formula between corporate interest in D, compiler contributor interest that is hard to nail.	Concise, powerful (metaprogramming), fast.	When looking for an alternative to C++ with "some sort of conditional code". Although I heard of D before I basically knew nothing about it.	D looked like an awesome language.		Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates											Multi-paradigm			static foreach	opt-in GC and runtime																					DCompute	Cross-compilation with LDC	newCTFE		Best existing (imperative) language overall.		Yes, I'm already doing so		Meh, I don't care.	2018-03-07 16:04:48	2018-03-07 17:12:19	626ae37a9a
7fedef577895563b75861c82f21a4bf9	Yes	4				tour.dlang.org	Language specification										5	pointers and c interop	5	I really like it	2	4	4	not a lot, doesn't look very modern	1	5		1	Mostly great content		4	D Forum							4	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development	Desktop applications		DevOps						Kernel Development	Science/Research									Arch Linux	Homebrew								2.078.3 (latest)													DMD	Linux	macOS								dmd		dub						No	emacs		5	0				5		It's awesome, but I miss a few features	It may be me but I find the lack of -> confusing when dealing with c interop			in-place struct initialization													No	5		Yes	2	5	5					Old modules like std.outbuffer or std.socket							Performance		More/better container classes			std.eventloop										std.image																							std.json																							std.xml		std.zip		Yes	5	nothing													Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing						Nothing														Ugly bits of the standard library			Fewer third-party libraries than other language								Few transition guides from programming language Y		Nothing.								Fast clean tidy	reddit	I love c++ but it has a lot of clumsy corners. D seemed to offer much the same with fewer rough edges		Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests													opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking			New range functionality (substitute, slide)															DCompute						Maybe, I miss accountability at the moment		Spaces	2018-03-07 14:01:24	2018-03-07 14:10:42	84f29d9baa
60e45a9de6123ae2553a78830fe51ec6	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										3		4	Constraints and overloads are too verbose.		4	4		0			1	Mostly great content		3	D Forum							4	No, improve DFeed.			Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly													Official Windows .exe installer													I compiled D from source		2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux		Windows		Android					dmd	rdmd		make					Not applicable		Geany	3	1	4			3	Warnings for bug prone implicit conversions.	It's awesome, but I miss a few features	Sometimes it's too verbose, e.g. constraints could be inline or have quasi-concepts, getters could use => syntax, contracts could be expressions (see DIP). `this` parameter attributes conflict with return type storage. Some `is` expression forms are difficult to remember.		string interpolation	in-place struct initialization				multiple alias this					UFCS for local symbols	Static inheritance		Non-null types statically enforced. Opt-in implicit construction for structs. Errors for mixing signed/unsigned, char/int types.	No	3		Yes	6	3	3		Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices		Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000			More/better container classes				@nogc containers												std.container, RefCounted, Unique.	std.base64											std.digest								std.json																				std.uuid							Yes	3																			@safe-ty problems / missing DIP1000					Poor compiler error messages	Poor GC implementation / performance				Poor debugging											C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library																					Efficient, Abstractions, Safety.	Slashdot 2007.	Productivity, advance as a programmer.		Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax				Simple, but powerful module system	Templates											Multi-paradigm				opt-in GC and runtime			Compile-time format string checking				toString with output ranges		Back referencing of mangled symbols							Deprecation of the comma operator				Colorized error messages			newCTFE		Productivity.	Implicit conversions between signed/unsigned, char/int types.	No, I'm already donating my free time			2018-03-07 12:15:14	2018-03-07 13:14:21	298055386c
ec0fd9065f3a9dda725553331ce4b068	Yes	3					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							3	Documentation - it's still D's biggest hurdle Lack of consistency in library functions Poor documentation of the most powerful/useful features in fact, the more powerful and useful the feature, the worse the documentation/examples.	2	Patchy, not full-some Not enough examples to clarify uses and use-cases Not enough explanations	5	4	4	For me the problem with the website has not really been the design but the lack of clear and enabling content	0			1	Poor/unhelpful content	Oddly posts either seem to be too simple - as to be almost useless or very advanced where the advanced material is not properly explained	4	D Forum							3	I don't care.	It's not super important to me, but D might get more exposure if it was on something like StackOverflow	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly							Big Data		Machine Learning		Science/Research			Official tarballs		Official .deb packages													2.078.3 (latest)													DMD	Linux											dub	make					No	Sublime		3	0			Never sure if there's bandwidth for it	5		It's ok	Template specialisation is awkward business Template constraints is awkward business Lack of type Unions e.g. string Or double											writing files at compile-time				Unrestricted compile time file i/o	Yes, but only for experimenting/testing/debugging	3	It's adequate, but it doesn't enable someone not versed in advanced C/C++ to become a power user.	Yes	2	5	4				Poor naming choices			Fear to do breaking changes	Poor support for data science applications		@nogc		Performance		More/better container classes				@nogc containers				std.database						std.drawing (2D)		std.stdio and std.file for working with binary files - poor documentation	std.base64	std.bigint	std.bitmanip						std.csv		std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger		std.getopt	std.json				std.outbuffer		std.path			std.regex	std.signals	std.socket	std.stdint	std.string				std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip	1. Creating awesome documentation 2. Library support for numerical computation	No, but to other D repositories			Finding good issues to get started											Missing language feature X / not moving fast enough				Performance problems					Poor Phobos (Standard Library) documentation			Poor GC implementation / performance		Nothing														Ugly bits of the standard library									Lack of good examples / tutorials									Wrong decisions at the management level		Templates need to be taken a look at again, particularly specialization & restraints	Work in progress	YouTube	Wanted a more sane and powerful version of C++ Much easier syntax than C++	std.algorithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits		Native interoperability with C		UFCS	-betterC					Built-in unittests			Garbage collection		Contracts		import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC																			newCTFE		There are some things that are most conveniently written in D at the moment More modern language than C++ with native C compatibility	Template constraints/specialization	Yes, I'm already doing so	Documentation is the most desperate task - with examples. Particularly with the most advanced features.	Spaces	2018-03-07 10:02:40	2018-03-07 12:05:09	88c2ade68a
0f159083b716d46809f8fe201d5329bc	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	There are few of informations about D.	3	Some minor modules and functions have no theirs sample codes.	1	4	3	Lacking of D-man!	1	3	 	1	Mostly great content	 	2							on Twitter	2	I don't care.	 	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development												Official Windows .exe installer							Arch Linux	Homebrew							2.079.0 (nightly)		2.077.1 (latest LDC)												DMD	Linux	macOS	Windows							dmd		dub						No	Visual Studio Code		2	0			 	4	Please make the associative array to be faster.	It's ok	I need the literal of tuples, the pattern match and the destructuring. And I dislike semicolon.	tuples	string interpolation		named arguments			multiple alias this		@mutable in immutable	static break		UFCS for local symbols			Pattern match and destructuring	No	3	I want to jump to codes in Github from the specification of functions.	Yes	2	2	4					Old modules like std.outbuffer or std.socket			Lack of functions for the immutable collection				Performance		More/better container classes					better json serialization	better xml serialization									std.immutable																									std.outbuffer																			std.xml			Please a great socket module.	Yes	3	auto-tester didn't test my codes.												Missing language feature X / not moving fast enough				Performance problems			Not enough abstractive		Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance				Poor debugging				D's dependence on a large and bulky runtime							C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials	No good point for learning D				Too much low-level focus (C/C++)		Lack of progress on DIPs				Lack of libraries; for example databases, middle wares, web APIs...	Speed, Easy to write, Powerfull	The programmer I had respected have used D.	Ditto.	std.algorithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters		Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime			Compile-time format string checking	-betterC		New range functionality (substitute, slide)								Runnable examples on dlang.org		Deprecation of the comma operator				Colorized error messages			newCTFE		For competitive programming	 	No, I'm already donating my free time	Please the tuple syntax, the pattern match and the destructuring.	Spaces	2018-03-07 05:18:52	2018-03-07 06:15:39	b62573fb7f
5de2347230615520619dbb0279e8ac1f	Yes	4					Language specification										4	Lack of learning resources - that seems to have been addressed now.	3		3	4	3	Lack of non-industry examples i.e. projects like onedrive aren't shown - again a nitpick.	1	5	It's far too whirlwind - but I imagine that's what the spec's there for.	0			4						I don't need help		5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications							Machine Learning										d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows				WebAssembly					dub						Not applicable		MonoD	3	0				3	Less cryptic error messages.	It's awesome, but I miss a few features	Nitpicking - little things found in languages like multi-line string literals i.e. (C#) @"a b c"				named arguments										Nothing - D is already awesome		Yes, my project depends on it	4		Yes	4	3	3						Reliance on the GC				@nogc				More/better container classes			std.eventloop	@nogc containers		better xml serialization														std.compiler												stdx.checkedint								std.outbuffer													std.uni							std.zlib	std.zip		No, but I want to to			Finding good issues to get started			No roadmap		High barrier to entry					Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)										Poor compiler error messages				Non-enterprise IDE support																						Lack of good examples / tutorials												Fun pragmatic magic		I was fed up with C++, Java, and Python, and wanted something which was like all three.	vibe.d		Mixin	CTFE (static if, static foreach)	std.meta	std.traits				UFCS				Templates	Built-in documentation (Ddoc)				Garbage collection		Contracts																																	It's powerful, but still fun.	What's the difference?			Spaces	2018-03-06 22:48:52	2018-03-06 23:15:54	0206e0480f
97e8ac53987e2207a0a2615611acdaf1	Yes	3			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org									d-idioms		4	A missing IDE with go to declaration links. Also wrapping  my head around that a function declaration doesn't tell me the returned class -- because it's not necessarily defined.	2	No good examples, the organization of functions is arbitrary and messy.	0	4	2	Don't really visit it.. what for? I go to the forums directly.	1	4		0			3	D Forum							4	Yes, I like StackOverflow.	The questions and answers are more curated on stackoverflow. I don't want to browse through pages of comments to find out the answer of a quick question.	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development	Desktop applications							Machine Learning		Science/Research			Official tarballs							Homebrew									2.077.1 (latest LDC)												LDC	Linux	macOS			Android	iOS	WebAssembly	Embedded		dmd	rdmd	dub					Docker	Not applicable	Sublime		2	1	1			4	Error messages are hard to interpret.	It's awesome, but I miss a few features	in, out, inout..: confusing and seemingly useless	tuples	string interpolation	in-place struct initialization	named arguments	assert diagnostics						writing files at compile-time					Yes, but only for experimenting/testing/debugging	5		Yes	3	2	1		Auto-decoding for strings		Poor naming choices		Reliance on the GC		more pure functions	@safe for all modules	@nogc			More -betterC support					@nogc containers												all of them. Very hard to find relevant functions. It's not always obvious whether they are compatible with each other, or with your own types. (Often not.)	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle				stdx.allocator		stdx.logger		std.getopt			std.mathspecial	std.meta	std.outbuffer		std.path	std.process			std.signals							std.uni	std.uri	std.utf		std.variant	std.windows	std.xml			Large binary produced. Not like pay-as-you-go.	Yes	3	the merge request I reviewed was ignored, then abandonned. Sad, because It would have been useful.																			utf-8 auto decoding, bad compiler error messages		Poor Phobos (Standard Library) documentation		Poor compiler error messages								Missing support for platform X	D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat		Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library							Little info on StackOverflow		Lack of good examples / tutorials							Lack of progress on DIPs				Cannot ship libraries written in D for C or C++	fast native python	noidea	for fun	PEGGED	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance		Readable syntax	UFCS				Templates		Built-in unittests			Garbage collection				import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime			Compile-time format string checking	-betterC	stdx.checkedint											Deprecation of the comma operator									I hade header files, i love readable code, i love pefromance 	some simple things are ugly. Iterating over the characters of a string as a range?	Maybe, I miss accountability at the moment		Meh, I don't care.	2018-03-06 20:46:51	2018-03-06 21:32:17	aeaff263b4
b735642721d59bc57ffc6cd88bc2cfa4	Yes	5			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4		4	design of web-page. it is difficult for me two read of find interesting parts (comared for example with qt documentation)	0	4	4		0			0																Monthly		Desktop applications											Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub						No	Sublime		2	0				5		It's ok	too much const, pure, nogc, scope... with wrong defaults				named arguments			multiple alias this		@mutable in immutable							No			Yes	3	5	5											DIP1000																				std.base64	std.bigint	std.bitmanip								std.demangle	std.digest			stdx.allocator	stdx.checkedint								std.outbuffer	std.parallelism		std.process	std.random	std.regex			std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip		No, but I want to to			Finding good issues to get started	Time is my only enemy	Personal laziness					I am just starting to learn D						Non-perfect C++ integration																DLL support on Windows								Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages												Lack of progress on DIPs					cpp done right		it seems to be cool after cpp background		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)					Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates				@safe strings + arrays							Multi-paradigm	Functional programming paradigm		static foreach																								newCTFE		interest	CTFE+mixin	Maybe, I'm still a student		Meh, I don't care.	2018-03-06 20:46:14	2018-03-06 21:21:28	594b31e12e
af543c9f92912e45b81029f264564a73	No, I have stopped using D		the language is getting more complex 				Language specification										4	the switch from D1 to D2, the phobos vs tango split	4	could use more examples	1	4	3	don't know, don't really care for the site, I only used the forum and documentation	1	4		0				D Forum							3	I don't care.			Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development												Official Windows .exe installer	Official tarballs																																						dmd								No			2	1	3																																																																																																																																																																																																																																					2018-03-06 21:05:55	2018-03-06 21:15:21	3a8ef746f2
0a4f4701c60cf2b184d57881bf754cc3	Yes	3				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4	Lack of tools and libraries	3	The documentation of many things is just a simple description with no specific details, or good examples. 	0	3	3	The forum software is very bad	1	4		1	Mostly great content	Would be more helpful, articles on how to implement things with D, than just the same old defending the GC and why some stuff is better than C++	3	D Forum							1	Yes, I like StackOverflow.		Yes, it was hard to find out why.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily	Web development	Desktop applications	IoT	DevOps									Official Windows .exe installer			Official .deb packages	Official OSX dmg installer												2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows	BSD-variant	Android	iOS		Embedded				dub		cmake	meson			Yes, I work with D part time	Sublime		1	0			My job is not testing and doing QA for D, I work for a living.	2	Proper parallel compilation, "fast" they say, takes about 30s to build some projects, while my 8 cores sit largely unused.	It needs serious work	All the new UDAs fro everything are getting very Java verbose... Instead of C++ verbosity, D's inventing it's own. Not good.	tuples	string interpolation				language binding to X					writing files at compile-time					No	3	Too simplistic at times	Yes	3	2	3				Poor naming choices		Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)		Algorithms and Arrays modules, have very bad naming and mix and matching to make things work. And the way they're templated, makes finding compile issues very hard. The errors, are pretty non-sensical.				std.compiler	std.complex						std.demangle	std.digest			stdx.allocator		stdx.logger					std.mathspecial		std.outbuffer						std.signals				std.system					std.utf			std.windows				- Rework the mix and matching of algorithms and containers - Making concurrency functions a lot safer, with more ways to check state, and terminate / force terminate if needed - Way better documentation	No, but to other D repositories				Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)			Non-perfect C++ integration			Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000			Poor Phobos (Standard Library) documentation	Compiler regressions	Poor compiler error messages				Non-enterprise IDE support	Poor debugging	dub	DLL support on Windows						Attribute bloat				Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials						Frequent breaking changes	Lack of progress on DIPs	Lack of focus at the management level			The lack to just be able make any sort of app on any desktop platform, be it GUI, cli, etc. With C++ I can do this, although with ugly code, but with D you're hitting walls at every corner, unless you just make cli tools	Has potential maybe	Looking for better languages than C++	I like that it's like modern, and decent C++, and mostly gets out of your way to let you solve your problem.	Vibe-D	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests				Inline assembler		Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm				opt-in GC and runtime			Compile-time format string checking			New range functionality (substitute, slide)	toString with output ranges					DMD support for AVX2	Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org					vibe.d 0.8	Colorized error messages		Cross-compilation with LDC	newCTFE		I keep hoping eventually the issues I have with it will get solved. Otherwise, I'll eventually go back to only C++.	All the attributes	No, I don't like the management of the DLF	Please listen to the feedback so D can become a real first choice for all sort of projects	Tabs	2018-03-06 18:32:21	2018-03-06 19:09:59	059d56b42d
bd912ff3e0362f0157568cf5570a9268	Yes	5			"The D Programming Language" by Andrei Alexandrescu									"D Cookbook" by Adam D. Ruppe			4	Dealing with the re-use of keywords, like alias. alias in a compile-time argument seems to be some sort of type, but it was never clear how.	4	The library should be very explicit about the types that are given and returned. Too often, a function has type "auto" and it's difficult to determine what exactly it will return.	4	5	4	N/A	0			0			5	D Forum							5	Yes, I like StackOverflow.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly							Big Data				Science/Research			Official tarballs												I compiled D from source												2.069.2 (initial Objective-C support)				GDC	Linux									dmd			make					Yes, I work with D part time	vim / neovim		4	0				4	More helpful type error messages in std.concurrency	It's awesome - keep it as is																				Yes	6	4	4								Namespaces with overlapping purposes - is split(string) in std.string? std.algorithm? std.format? No, it's in std.array. 				Performance												std.benchmark			std.image	std.drawing (2D)		std.concurrency when I need to pass around large arrays. I wind up casting from and to immutable way too often.	std.base64			std.compiler			std.container				std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger			std.json			std.meta	std.outbuffer		std.path	std.process			std.signals	std.socket	std.stdint		std.system	std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip	There's no GUI tool. Even a rudimentary tcl/tk interface (a la Python) would be a great step in this area. 	No, but I want to to								High barrier to entry													Python's numpy is awesome and matplotlib is ... well, matplotlib is a thing I use. 	Nothing						Nothing								Nothing									Fewer third-party libraries than other language										Nothing.							std.concurrency wants so badly to be MPI, but it's not compatible. This is a major stumbling block for scientific computing. If I need to use C-style MPI calls, I might as well use C.	Fast, featureful, complicated.	On a bookshelf in a computer store. I saw Andrei's book and thought, "That's a silly name for a language! I should leaf through the book."  And I was hooked. 	I wanted C-like performance with Python-like code. I got 90% of both, so I'm just peachy. 	A homemade suite called trajan, used for biomolecular trajectory analysis. I'll publish it one of these days, promise!			CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax				Simple, but powerful module system		Built-in documentation (Ddoc)	Built-in unittests			Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm																											Man, it looks like I need to upgrade my compiler!	It's faster than Python and easier to write than C. 	I often don't know the type of something. Like, say "auto x = lazyMap(f,ar)" Now if I want to write a function that takes in x, it would be something like "void foo(LazyMapResult!ContainerType!<50 characters omitted> x)" and the documentation often won't say what type lazyMap returns. 	Maybe, I'm still a student	You guys rock! Thanks for providing this awesome language!	Spaces	2018-03-06 14:31:33	2018-03-06 14:54:28	828eed96c5
59de965039e0f6a0827ffd1f00795790	Yes	4				tour.dlang.org											4		5		0	5	5		1	5		1	Mostly great content											I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely		Desktop applications						Embedded Systems					Official Windows .exe installer		Official .rpm packages				d-apt Debian/Ubuntu												2.076.1 (static foreach)											DMD	Linux		Windows					Embedded				dub						No	Intellij		3	1	4			4	Error messages on templates. They are a lot better than in C++, but still not very helpful at times.	It's awesome, but I miss a few features	Named parameters for functions would be awesome. Also, the "enum" keyword for compile time constants... enum was meant to stand for "enumeration" in C and C++, and this new meaning is very questionable. Also, as a minor issue, binding rvalues to references to const would be nice, especially to sell the language to C++ programmers.	tuples			named arguments							writing files at compile-time		Static inheritance			No	5		Yes	3	5	6				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc				More/better container classes			std.eventloop	@nogc containers	better json serialization			std.database				std.color	std.image				std.base64														stdx.allocator	stdx.checkedint						std.mathspecial		std.outbuffer								std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid			std.xml	std.zlib			No, but I want to to				Time is my only enemy											Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration						Nothing							Non-enterprise IDE support			DLL support on Windows								Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages													Lack of focus at the management level			There is a wide perception that D is a dead language. That is unfortunate, but it does affect very much on possible future adoption.	Awesome. Meets_My_Needs. I_Love_It.	A friend of mine told me that it existed. I had like one year work experience back then. I checked the webpage and got curious.	Why not? I started with the tour, and the more I read, the more hooked I got. It hits a sweet point that no other languages can. Even now with broader perspective and more languages in my pocket, D still has something for me that makes it unique. Can't really describe what it is. It probably has to do with the static introspection, I just love that. There are many other things, which also other languages have... but only D has the full combination of the right things.		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits			Readable syntax	UFCS			Simple, but powerful module system	Templates				@safe strings + arrays				Debug attribute		std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach								toString with output ranges	Deprecation of the integral promotion for unary operators						Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8			Cross-compilation with LDC	newCTFE		It is the whole pack. It is not a simple language, but it has something that it is unique for it, which makes it crazy easy to develop stuff  in it.		Maybe, I miss accountability at the moment		Spaces	2018-03-06 14:17:27	2018-03-06 14:50:47	d0de284002
589e1ae86eb0928789fa20d10f029b40	Yes	4														DDJ articles by Walter	4	Quality of documentation was in issue but this improved in the last year(s).	4	Examples are important. Especially for non trivial cases. There are still lacks.	0	4	4	The visual look is still "simple". Though I have no real idea how to improve it.	0			1	Always great content	There could be more series! E.g. about real interfacing with C++ and/or other languages.	5	D Forum							4	Yes, I like StackOverflow.	I really like StackOverflow. But there are not that many D questions, therefore I am unsure if it is worth to abandon the D.learn forum. The forum is a "one stop" because you get the announcements, too.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly												Compiler Development														I compiled D from source				2.077.1 (latest LDC)												LDC	Linux		Windows	BSD-variant								dub						No	Visual Studio + VisualD		4	1	3			4	VisualStudio integration out of the box (via vs marketplace)	It's awesome, but I miss a few features	The __traits syntax is clumsy. I like the introspection you can do with D but sometimes it look like black magic. 														Nothing - D is already awesome		Yes, but only for experimenting/testing/debugging	4	Parts of the compiler are still undocumented. E.g. __argTypes. It would be nice to clarify what is part of the language and which is just an implementation detail of dmd.	Yes	3	3	3								No good I/O or stream interface. The modules are deprecated without replacement. Standard functionality like XML parsing is outdated, too. No XSLT interpreter. No standard SQL interface. In general, all the stuff for a stupid business application is missing.						More/better container classes					better json serialization	better xml serialization		std.database	std.i18n							std.cvs is too much encapsulated. I found it difficult to reuse the csv object.				std.compiler											stdx.allocator	stdx.checkedint	stdx.logger		std.getopt			std.mathspecial								std.signals																More functionality (like Andrei talked about at one DConf).	Yes	4	Sometimes the review process just gets out of focus. You only want to add X. You adopt the style of the function around X. This is rejected because now the preferred style is different. You change and then someone notes the function around X should be changed too. This can go endless, because you suddenly talk about the quality of the functions which you do not touch with your PR.																			Community too small. Will D stay for longer time?	Nothing						Nothing															See my module wishlist. I could use D more actively, but I have to process XML files and connect to different databases (without OLE). It's theoretical possible to do but requires lot of C bindings.		Fewer third-party libraries than other language										Nothing.								Awesome!	DDJ	I wanted to implement a SQL database and was looking for a compiled language better than C/C++.	No preference. A library which works is good enough.			CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates			In, out, ref parameters		Garbage collection					std.concurrency & std.process		Functional programming paradigm																						vibe.d 0.8		DCompute	Cross-compilation with LDC			A lot of nice people in the community.		Maybe, I miss accountability at the moment	More promoting of D foundation!	Spaces	2018-03-06 13:37:34	2018-03-06 14:20:08	fb4853bf23
22754b0896383c6c92c3ce0fb4455e81	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification										5	Resources and libraries	5	More Examples	0	4	4	nothing in mind	1	3	Not informative enough for beginners 	0			5			#d on StackOverflow		My colleagues			5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development						Big Data				Science/Research					Official .deb packages		Official dlang.org/install.sh script	d-apt Debian/Ubuntu															2.073.1 (new Ddoc theme)								DMD	Linux											dub						Yes, I work with D full time	Sublime		3	0				4		It's awesome - keep it as is																				Yes	4	4	5						Reliance on the GC				@nogc				More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database		std.benchmark			std.image	std.drawing (2D)		allocators 	std.base64	std.bigint		std.compiler	std.complex												stdx.logger	std.functional					std.meta	std.outbuffer								std.stdint										std.windows				GC	No, but I want to to			Finding good issues to get started	Time is my only enemy		No roadmap		High barrier to entry								Non-perfect C++ integration										Poor GC implementation / performance		Nothing								Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists								Nothing.								Elegant, simple, performant  	A friend who used to use D since 2012	I wanted to move from Web development into systems engineering	Vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C																std.concurrency & std.process	Multi-paradigm																							vibe.d 0.8								Yes, just tell me how		Spaces	2018-03-06 13:29:15	2018-03-06 14:00:40	5abac22585
26583decac2aae37d6313f3038e6596b	Yes	4				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4		4	Examples	5	4	5		1	5		1	Always great content		5	D Forum			dlang.slack.com				5	No, the D.Learn forum is fine.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily	Web development			DevOps							Science/Research				Official .rpm packages			Official dlang.org/install.sh script											2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux			BSD-variant						dmd		dub	make					No	emacs		4	0				5		It's awesome - keep it as is																				Yes	6	3	6																			better json serialization	better xml serialization		std.database					std.image	std.drawing (2D)	binary pack/unpack http://code.dlang.org/packages/pack-d and xattrs support																																																Yes	5											Nothing																																	Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects			Lack of good examples / tutorials				Nothing.								awesome, productive, powerful	from the tweets of @btbytes			Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)					Readable syntax	UFCS	-betterC								Garbage collection					std.concurrency & std.process									-betterC									Automatic compilation of imports (dmd -i)				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8			Cross-compilation with LDC			Familiar concepts and readable syntax, productive		Yes, just tell me how		Spaces	2018-03-06 09:14:25	2018-03-06 09:40:42	38c9e85821
98b8e1ff912990510b9cb2b990b11843																																																																																																																																																																																																																																																																																																																																																		2018-03-05 22:57:06	2018-03-05 22:57:30	1785d44cc1
eed0053bdee4d7ef486af60225b44766	No, I have stopped using D		poor state of garbage collector				Language specification		D Forum: Learn						d-idioms		2	memory management is scatter brained	3	deprecated items not always clear, to few examples of use. 	0	4	4	The web site is actually not half bad, no complaints, or atleast i am unqualified to complain.	0			0			4	D Forum							3	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development	Desktop applications				Game Development	Big Data		Machine Learning		Science/Research		Official Windows .exe installer			Official .deb packages															2.076.1 (static foreach)											LDC	Linux		Windows				WebAssembly					dub						No	Intellij		1	0				4		It's ok		tuples		in-place struct initialization	named arguments			multiple alias this	UDAs for attributes								No	5		Yes	0	4	2				Poor naming choices		Reliance on the GC				@nogc				More/better container classes			std.eventloop	@nogc containers	better json serialization			std.database			std.decimal				std.decimal should include decimal128, this type is used in mongo and is very helpful	containers																	stdx.logger																										std.xml			to many parts of the library sitting in limbo, pending some better replacement that nevers seems to descend from the ether.	No, but to other D repositories				Time is my only enemy										Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems								Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging									Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library		Nothing											Nothing.							dlang is far to worried about breaking things, some poor descisions where made early on, its time to rip that bandaid off and have it done with.	fantasic, poor implementation	i used dlang 1.0, no idea where i saw it first.	template syntax		Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits		Native interoperability with C		UFCS				Templates							Contracts			std.concurrency & std.process				static foreach	opt-in GC and runtime																			vibe.d 0.8				newCTFE			slow gc	Maybe, I miss accountability at the moment		Spaces	2018-03-05 22:18:23	2018-03-05 22:44:32	6c3d609f14
d62ba9dcf96d0b2f5d2a559fb6fd2c46	Yes	4				tour.dlang.org											4	The official documentation on dlang.org will describe the grammar for some feature of the language, but I find it kind of unintuitive.	4			3	4		1			0			3					My colleagues			4	No, the D.Learn forum is fine.				Daily							Big Data		Machine Learning																																	DMD	Linux	macOS								dmd								Yes, I work with D full time	emacs		4	0				4		It's awesome, but I miss a few features																				Yes													@nogc																							std.bitmanip	std.compiler							std.demangle	std.digest												std.outbuffer						std.signals																	No, and I don't plan to													Language complexity (e.g. inout, abuse of mixin)					Performance problems																																														work	for work	std.mathspecial (would be happy to see more functions :)					std.traits		Native interoperability with C						Templates																																									cannot have an AA literal			Spaces	2018-03-05 18:30:53	2018-03-05 18:40:50	693bb24b0c
ddaf570dfd2c58c7b990e5d089afdd5f	No, I have never used D			Time and few packages.			Language specification			"Programming in D" by Ali Çehreli							4					5	5		1	5		1	Mostly great content														Go ahead and break code, even for the "little things", but do so through a gradual, managed process.																					Arch Linux									2.078.3 (latest)													DMD	Linux				Android							dub						Not applicable	Atom		4	0																																																																																																																																																																																																																																						2018-03-05 17:30:26	2018-03-05 17:34:48	1f24d31f66
ecb8e3e5a5fc24c18209a110eeb9fa6c	No, I have stopped using D		1.) Lack of a proper standard library (not enough functionality, sometimes inconsistent/buggy) 2.) Library reference sometimes unclear (needed to ask friendly people in IRC who helped me out)			tour.dlang.org	Language specification	#d IRC on freenode		"Programming in D" by Ali Çehreli							2	 Complicated templates and slices	1	Library reference sometimes unclear (needed to ask friendly people in IRC who helped me out) plus some catchy examples rather an assertion statement would be very, very helpful.	0	4	2	The second half of https://dlang.org, the self-ads should be removed	1	5	Like it a lot.	0			4		#d on IRC						4	Yes, I like StackOverflow.	No.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely												other							d-apt Debian/Ubuntu																							DMD	Linux		Windows							dmd	rdmd							No		Geany	1	0			Not enough experience to tell if it was me or D, which was broken.	4	Print proper and human-understandable output to identify what went wrong during compilation/linking.	I have a very hard time with D's syntax	Complex templates and slices.															Nothing.	No	2	./.	Yes	3	0	1				Poor naming choices	Old modules like std.outbuffer or std.socket									More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)		./.																																														Proper networking, http, or similar framework (don't want to use vibe or make vibe part of std.XXX)	No, and I don't plan to									I don't use D				Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation	Compiler regressions	Poor compiler error messages				Non-enterprise IDE support	Poor debugging	dub							Attribute bloat				Ugly bits of the standard library				Less corporate support (including jobs) than other languages		Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials	No good point for learning D			Nothing.							I'd like to have a nice de-facto reference IDE	D isn't C#	I forgot already... long time ago...	It seemed promising in the beginning.	None.																								Multi-paradigm																		Runnable examples on dlang.org										Don't make D more complex as it already is. So apart from the runnable examples, none of them.	I wish I could use it, but see all my points above.	See above.	Maybe, I miss accountability at the moment	No, but I'd like to have another survey in 2019 and I hope I can use D again.	Meh, I don't care.	2018-03-05 15:31:57	2018-03-05 16:04:23	112d73aee7
c76e0a75142fc032a0c87c87b35567d0	No, I have stopped using D		Only used it for scripting/self-contained programs. None of the company infrastructure had D bindings, and the few things that did were incomplete/broken/bit-rotted. Switched to Hack because it had everything: ease of use and easy access to everything. 		"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli						Playing with it until it made sense	5	Being lazy and not actually writing code sooner (I read TDPL 3 times first, for fun). Sub-optimal documentation (my knowledge of that situation is 2 years obsolete though).	3	2 years obsolete: but the layout was hard to grok, and there weren't always great examples.	5	4	4	Really haven't looked in a while.	0			0			5	D Forum							4	I don't care.	Nope	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development											Infra/Services	Official Windows .exe installer	Official tarballs							Homebrew					I compiled D from source												2.069.2 (initial Objective-C support)				DMD	Linux	macOS	Windows							dmd	rdmd						buck	No, but my company uses D	emacs		4	1	3	I've had issues rot (admittedly I didn't follow-up with additional details because it would've been a PITA). I've put up patches to fix a case where backward compatibility broke and had them accepted only to have folks get pissed about it. Neither were fun experiences.		4	Been too long	It's awesome, but I miss a few features							language binding to X										No	4		Yes	3	5	5						Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc								@nogc containers													std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency						std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial	std.meta	std.outbuffer						std.signals		std.stdint							std.utf	std.uuid			std.xml	std.zlib	std.zip		Yes	3	Setup historically has been painful, especially for someone who rarely provides patches. Also had a fix I submitted cause some angst from 'someone important' after it was accepted. Not a good feeling.														Non-perfect C++ integration							Poor Phobos (Standard Library) documentation					Nothing												Wrong defaults (e.g. not @safe by default)														Tried dub a few times, every time was painful and confusing and left me wanting nothing to do with it. The community's reliance on dub made it harder to figure out what to do for non-dub cases (like work would have to be) too.	Nothing.								Inspiring, stagnant, impractical	GoingNative conference videos (Andrei)	Andrei's notoriety/star power + sounded fun 	Phobos	Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays							Multi-paradigm	Functional programming paradigm																											None of these are especially exciting to me	The hope that someday its interoperability story with C++ will make it practical		Yes, I'm already doing so	I either want y'all to tear things up and be revolutionary sources of inspiration (even if that means breaking code) or focus on what it would mean to practically transition a codebase from C++ to D. Anything else isn't particularly useful/interesting to me.	Spaces	2018-03-05 10:57:20	2018-03-05 11:25:32	864e6ae7a9
0ea51b3c615c6882cc0d34d1a600075a	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							4		3	Documentation Layout. Being lost in cross references.	1	5	5		0			1	Huge variance in quality		5	D Forum				My colleagues			4	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly						Game Development							Official Windows .exe installer						d-apt Debian/Ubuntu								snap		2.078.3 (latest)													DMD	Linux		Windows							dmd		dub						No	Visual Studio + VisualD		3	0				5		It's awesome - keep it as is																				Yes	4	4	3						Reliance on the GC				@nogc		Performance						@nogc containers						std.benchmark				std.drawing (2D)																																																	No, and I don't plan to				Time is my only enemy	Personal laziness												Dependence of some language features + Phobos (Standard Library) on the GC						Poor Phobos (Standard Library) documentation						Non-enterprise IDE support			DLL support on Windows	Missing support for platform X			Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects										Lack of progress on DIPs					Interesting, good looking, ?	On internet, 10 years ago	Seems like C++ done right.	?	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system			Built-in unittests									Multi-paradigm	Functional programming paradigm			opt-in GC and runtime				-betterC																					Replacing C++ on some part of our code base				Spaces	2018-03-05 10:58:21	2018-03-05 11:15:56	34ea9b2819
d19c0813ceeafd7229fbc79c3c4b2175	No, I have stopped using D					tour.dlang.org											2					2						0															Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely																			d-apt Debian/Ubuntu																							GDC	Linux	macOS	Windows	BSD-variant									make					No	vim / neovim			0																																																																																																																																																																																																																																						2018-03-05 08:29:18	2018-03-05 08:33:40	e426db154a
a1999c38c78865df1b07d6c7f368cff1	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org										telegram channels	4	map reduce	3	ugly formatting	0	4	4	nothing	1	4	nothing	0			5							telegram channels	4	I don't care.	no	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly		Desktop applications									Science/Research	Networking	Official Windows .exe installer				Official OSX dmg installer														2.076.1 (static foreach)											DMD	Linux	macOS	Windows					Embedded		dmd		dub						No	Visual Studio Code		3	0			nothing	4		It's awesome, but I miss a few features			string interpolation	in-place struct initialization	named arguments	assert diagnostics											No	4		Yes	3	3	2				Poor naming choices	Old modules like std.outbuffer or std.socket						DIP1000	Performance					std.eventloop		better json serialization		std.graph	std.database																																																							No, and I don't plan to					Personal laziness								Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation					Nothing									Auto-decoding of strings										Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials					Too much low-level focus (C/C++)		Lack of progress on DIPs					fast beaty short	from colleague	interested in language		Ranges & std.algorithm					Performance	Native interoperability with C				Closeness to C/C++													Multi-paradigm	Functional programming paradigm				DMD as a DUB library									Reproducible builds		DMD support for AVX2		Runnable examples on dlang.org						Colorized error messages					ideology of language		No, I don't like the management of the DLF		Meh, I don't care.	2018-03-05 05:27:44	2018-03-05 05:58:12	8726f4674c
d3644883be68b3a093197d53173d5659	Yes	4			"The D Programming Language" by Andrei Alexandrescu												4	shared	3		0	3	3		0			0			3	D Forum							4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely						Game Development					Science/Research		Official Windows .exe installer						d-apt Debian/Ubuntu		Homebrew							2.079.0 (nightly)	2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows		Android	iOS						dub						No	emacs		2	1	3			4		It's awesome, but I miss a few features	inconsistent function attribute names, some with _ some with @ some neither	tuples	string interpolation	in-place struct initialization				multiple alias this									No	3		Yes	3	4	4					Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc	DIP1000	Performance		More/better container classes				@nogc containers	better json serialization	better xml serialization	std.graph		std.i18n	std.benchmark		std.color	std.image	std.drawing (2D)																																																xml	No, but I want to to				Time is my only enemy										Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)							Poor GC implementation / performance				Poor debugging	dub							Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level			better c++ w/gc		for fun	Mir	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates						Inline assembler			import("myfile")		Multi-paradigm				opt-in GC and runtime		Templated vector operations				New range functionality (substitute, slide)																					Maybe, I miss accountability at the moment		Spaces	2018-03-05 05:13:03	2018-03-05 05:42:29	802e8786ca
4423ec68b50368463303de575a7c7aa3	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		5		3	Some parts are outdated, some miss  the bigger picture although they otherwise describe the single piece, some give too few/too trivial examples.	0	3	3		0			1	Mostly great content		5	D Forum	#d on IRC	#d on StackOverflow					4	Yes, I like StackOverflow.		Yes, it was a regression.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily			IoT	DevOps				Embedded Systems			Science/Research		Official Windows .exe installer	Official tarballs		Official .deb packages			d-apt Debian/Ubuntu							I compiled D from source				2.077.1 (latest LDC)	2.076.1 (static foreach)								2.068.2 (last C++ release)			LDC	Linux				Android		WebAssembly	Embedded			rdmd	dub	make	cmake				Yes, I work with D part time		MonoDevelop + Mono-D	4	1	4			4		It's awesome, but I miss a few features	Ability to directly import declarations from system's C headers. Having to re-declare constants and structs is a huge risk ABI-wise.	tuples				assert diagnostics		multiple alias this					UFCS for local symbols				Yes, but only for experimenting/testing/debugging	3	Some restrictions are missing a rationale. The assembly syntax is specified for x86 only, is non-standard and ambiguous, and misses a few useful features.	Yes	1	3	3		Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes						More -betterC support	More/better container classes			std.eventloop	@nogc containers							std.decimal							std.bigint			std.complex		std.container		std.csv		std.demangle		std.encoding				stdx.logger					std.mathspecial		std.outbuffer						std.signals							std.uni			std.uuid			std.xml	std.zlib	std.zip		Yes	5																Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)												dub			D's dependence on a large and bulky runtime			Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects															Language for everything	From a colleague	First I was just curious about D, and then it immediately started being useful for the tasks I had, so I gradually learned more and more, and found it applicable for more and more stuff.		Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection				import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm	I like what std.traits offers, but it's become a bit messy, esp. that it's almost never possible to guess whether something is a built-in __traits, in std.traits, implemented via cryptic template constraint syntax, or not implemented at all.	static foreach		DMD as a DUB library		Compile-time format string checking				toString with output ranges									Deprecation of the comma operator						Cross-compilation with LDC				Range autodecoding	No, I'm already donating my free time		Tabs	2018-03-05 03:34:40	2018-03-05 04:22:02	99343fa030
c702d2c6fcc6729f0f758f43fff1de50	No, I have never used D										Professional training						2																																																																																																																																																																																																																																																																																																																																	2018-03-05 03:46:31	2018-03-05 03:47:14	a01be0d604
b831702d344c6a9a20d6180044d527d5	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								4		4		1	4	4		0			1	Mostly great content		5	D Forum		#d on StackOverflow					5	I don't care.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly	Web development		IoT					Embedded Systems	Machine Learning		Science/Research					Official .deb packages		Official dlang.org/install.sh script	d-apt Debian/Ubuntu											2.077.1 (latest LDC)	2.076.1 (static foreach)											LDC	Linux									dmd	rdmd	dub	make					No	Intellij		2	0				4		It's awesome, but I miss a few features	tuple support 	tuples															No	3	multi-threading	Yes	3	3	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket						DIP1000						std.eventloop		better json serialization	better xml serialization		std.database																																																							Yes	4												Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing							Non-enterprise IDE support							Nothing										Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects							Nothing.												Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax			Closeness to C/C++		Templates									import("myfile")		Multi-paradigm																																		2018-03-05 01:51:46	2018-03-05 02:14:40	36ed4c15c1
f8af3fdfab3c76e3b5d21650389de090	No, I have stopped using D		Better alternatives for my purposes			tour.dlang.org	Language specification										3	Complex language (too) many ways to do things.	2	Inconsistent API's, can't avoid GC when needed, lack of completeness (ref Golang for what I consider an excellent standard library).	2	4	4	Nothing in particular	1	4	Nothing in particular	1	Mostly great content	Nothing in particular	3						I don't need help		3	I don't care.	Stackoverflow is where a lot of people go, but is somewhat diluted compared to a forum. Both are useful for different types of questions.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development			DevOps	Security		Big Data	Embedded Systems	Machine Learning							Official .deb packages													2.078.3 (latest)													LDC	Linux				Android		WebAssembly						make					No	Visual Studio Code		3	0				3	Bit cumbersome to use, too many options. Needs to be more make friendly.	It's ok	Too complicated.	tuples		in-place struct initialization	named arguments												No			No	3	0	2				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc			More -betterC support				std.eventloop	@nogc containers												Some, mostly due to odd naming conventions and apis.																																														Reimplement to match go's standard library functionality and quality. Add some containers. nogc and noexcept as much as possible	No, and I don't plan to									I don't use D				Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)		reluctance to make breaking changes in the language to fix major problems. nogc, noexcept and pure should all be assumed unless otherwise annotated (tooling could do annotation by default 'ala goimports)		Poor Phobos (Standard Library) documentation				Inability to get away from GC due to use of GC in libraries because of standard library dependance and language features (eg classes)								Too much reliance on package managers.			Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library	nogc, noexcept and pure should all be default		Fewer third-party libraries than other language															Wrong decisions at the management level		What is the compelling reason to use D? Go is easy, concurrent and robust. Rust is complex but has guarenteed concurrency safety.	Interesting, not compelling.	Pre 1.0 on google.	C++ was too complex and lacked many useful features (at the time - pre C++11).				CTFE (static if, static foreach)			Performance				-betterC	Closeness to C/C++		Templates			In, out, ref parameters				Contracts												-betterC																		Cross-compilation with LDC			Nothing, betterC is promising for certain domains, but is a long way from being really useful.	GC, complexity.	No, I'm not interested into D	For a modern language safety and explicitness (in the syntax sense) are very important. Safe, pure (maybe), nogc and noexcept should all be the default. Strong concurrency in the language is also incredibly useful. 	Tabs	2018-03-04 23:32:45	2018-03-05 00:02:47	ba79bb4916
d2901581b464d85d1b254613ff3dc6a3	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							4	Poor IDE support.	4		0	5	5		0			1	Mostly great content		4	D Forum		#d on StackOverflow					4	I don't care.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications				Game Development							Official Windows .exe installer			Official .deb packages				Arch Linux									2.078.3 (latest)													DMD	Linux		Windows		Android							dub						No	Visual Studio + VisualD		3	0				4		It's awesome, but I miss a few features															Nothing - D is already awesome		No	4		Yes	3	5	5	Nothing - Phobos (Standard Library) is great													More/better container classes		I'm happy as is.																	std.bitmanip	std.compiler					std.csv		std.demangle	std.digest																														std.windows		std.zlib	std.zip		No, and I don't plan to				Time is my only enemy								Nothing										Nothing							Non-enterprise IDE support	Poor debugging						Nothing										Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects				No good point for learning D			Nothing.								Beautiful but irrelevant	I forgot (late '00s)	I wanted an alternative to C++ at the time.	Derelict		Mixin	CTFE (static if, static foreach)					Readable syntax					Templates			In, out, ref parameters																										Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)				Cross-compilation with LDC			The pleasant syntax and metaprogramming features		Maybe, I miss accountability at the moment		Spaces	2018-03-04 20:41:18	2018-03-04 21:18:30	350ea763e5
25401d53a4e2b76d52a8e0f345063e95	Yes	4				tour.dlang.org	Language specification		D Forum: Learn						d-idioms		5		5			4	4		1	4		1	Mostly great content		5	D Forum							5	I don't care.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications				Game Development							Official Windows .exe installer													I compiled D from source									2.072.2 (native TLS on OSX 64-bit)							DMD			Windows							dmd							Custom python script	No	vim / neovim		3	1	4			5		It's awesome, but I miss a few features	Too attached to the old C baggage that everyone agrees was a bad idea (for example, int myarray[3] is still supported in D, where I think it should be deprecated). It's nice that D is familiar to C/C±± developers, but the philosophy that identical C/D code must behave the same is unnecessary and restrictive in my opinion.	tuples		in-place struct initialization	named arguments			multiple alias this									Yes, my project depends on it	5		Yes	3	4	5		Auto-decoding for strings				Reliance on the GC		Weird conventions sometimes. For example, find() returns the slice advanced to the found item. This is useful, but should be a different function with a different name (something like findAndAdvance()). find() should just return the index.		@nogc			More -betterC support	More/better container classes			std.eventloop	@nogc containers							std.decimal	std.color	std.image	std.drawing (2D)														std.digest												std.outbuffer						std.signals							std.uni	std.uri		std.uuid						CSV library has a reader but not a writer!	No, and I don't plan to				Time is my only enemy	Personal laziness			High barrier to entry						Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance				Poor debugging		DLL support on Windows		D's dependence on a large and bulky runtime			Auto-decoding of strings								Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages												Lack of progress on DIPs				The mediocre debugging experience is the single biggest thing I wish D did better (I use Mago in VS). A better, more stable, and more reliable debugger would be an enormous asset, and would make my D programming life phenomenally more pleasant. I find that Mago hangs VS regularly, often struggles to see variables that clearly exist, doesn't support data breakpoints, and leaves a variety of other things to be desired.			It's like C++, but actually sane and with almost all of the problems fixed.		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits		Native interoperability with C		UFCS	-betterC		Simple, but powerful module system	Templates					Garbage collection	Inline assembler				std.concurrency & std.process					opt-in GC and runtime			Compile-time format string checking	-betterC					Back referencing of mangled symbols					Runnable examples on dlang.org						Colorized error messages			newCTFE			I wish there were a way to make DLLs that forwarded runtime calls back to the executable's runtime. I use DLLs for code hot reloading, and want to be able to use D's features without having to restrict myself to betterC (or making runtime hacks which has been my current strategy).	Maybe, I'm still a student		Meh, I don't care.	2018-03-04 20:35:28	2018-03-04 21:07:13	083c7e890f
593d2334e943f9075ec49721cbd1125b	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	debugging support broken	5	writing it is a pain; should use markdown and be smarter about inferring Params/Returns automatically from markdown + function signature; documentation should hyperlink to code on github	0	4	5	* mention dlang slack in dlang.org	1	4	should have an index so user can skip straight to a section	1	Mostly great content		5	D Forum			dlang.slack.com				4	Yes, I like StackOverflow.	D forum lacks many of the features that stackoverflow has, eg: question voting, keyword tagging, syntax highlighting, better visibility, allowing (reasonable) edits, answer voting so it's easy to find best answer in noise; also D forum threads tend to degenerate into offtopic discussions	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development						Big Data		Machine Learning												Homebrew						linuxbrew; digger	2.079.0 (nightly)		2.077.1 (latest LDC)												LDC	Linux	macOS			Android	iOS	WebAssembly			dmd	rdmd	dub						Yes, I work with D full time	Sublime		2	1	1	cannot edit posts (most important for me); more friction to create bug report for 1st time bug reporters used to github; no syntax highlighting; github has better voting system; gitlab issues would be another option to strongly consider (github issues has some drawbacks, eg: a user can't reopen a closed issue unless he's a project owner)		3	AST macros, which would enable many more features (eg string interpolation)	It's awesome, but I miss a few features	UFCS should work with everything, eg: foo.mixin,.typeof, etc; tuple unpacking; lack of named parameters; attributes are a bit of a pain; maybe auto-inferring some of them for non-template functions would help, and UDAs for attributes would also help; lack of orthogonality (eg trusted vs @trusted)	tuples	string interpolation	in-place struct initialization	named arguments	assert diagnostics			UDAs for attributes	@mutable in immutable		writing files at compile-time	UFCS for local symbols			AST macros	No	4		Yes	4	5	5		Auto-decoding for strings					Fear to do breaking changes	not comprehensive enough; lack of versioning makes progress slow (because of fear of breaking changes)			DIP1000				per-module versioning to allow breaking changes (as used in boost)		std.eventloop	@nogc containers	better json serialization										would add more but inclusion in phobos + lack of versioning means API freeze and lack of progress	std.json; std.process could have more features (eg: select)		std.bigint	std.bitmanip	std.compiler								std.digest	std.encoding			stdx.checkedint	stdx.logger							std.outbuffer						std.signals		std.stdint								std.uuid		std.windows	std.xml	std.zlib		* lack of per-module versioning (cf boost), which slows down progress because they make breaking changes really hard * auto-decoding, creating much more complex API's (eg ForEachType vs ElementType, and all the string overloads) * attributes sometimes get in the way of getting things done (analog to const being viral)	Yes	2	* PR's linger forever after all comments have been addressed; not enough committers create a bottleneck from andrei/walter (not enough trust/delegation); style issues are a waste of time (we should use tooling instead); negative bias towards 'small' improvements												Missing language feature X / not moving fast enough		Non-perfect C++ integration			Issues with language feature X (e.g. shared, @property)					Compiler regressions						Poor debugging	dub				shared libraries on OSX still not supported		Auto-decoding of strings	Attribute bloat				Ugly bits of the standard library	OSX shared library not working		Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages												Lack of progress on DIPs		Wrong decisions at the management level	PR bottleneck caused by too few committers (eg walter andrei vetting each PR is not scalable)	should take inspiration from other languages (eg nim); focus on certain language aspects (eg purity) sometimes at expense of other more pressing features for getting things done (eg shared libraries on OSX)	C++ dethroning wannabe	dlang.org	was searching for a C++ replacement	vibe	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection				import("myfile")		Multi-paradigm			static foreach		DMD as a DUB library						toString with output ranges		Back referencing of mangled symbols				Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE	calypso	productivity + efficient code	auto-decoding strings; can't unittest a single file; attributes sometimes getting in the way of getting things done; 	Yes, but only for a specific project	let's do this every year!	Meh, I don't care.	2018-02-28 21:51:18	2018-03-04 21:03:09	4943cd8f2d
f2a6193f80f775f31f69275395b2633f	Yes	3			"The D Programming Language" by Andrei Alexandrescu												4	- Inconsistencies between different compilers compiling same application (errors in some, not in others) - Slow compilation times (with all compilers) - Confusing positioning of import statements (inline and at top of file, like Node.js, which causes confusion)	4	Has improved a lot since the past, much more readable now. Still somewhat crude in that the examples can be somewhat artificial. Method signatures very verbose in documentation, especially if contracts and attributes such as @nogc are included, but it is a bit the nature of D - perhaps move these to a dropdown to the right of the signature that isn't visible by default or somehow highlight actual signature even more?	0	4	3	Information at the top is okay, information at the bottom (actual strengths of D) and even headers such as "Contribute" are not likely to be read as most visitors don't scroll down when glancing over a new page. Perhaps move to a separate "Features" or "Strengths" page?  The initially visible part of the page should be where the most important information and message to convince newcomers is at. Everything more to the bottom is likely to be ignored. Next to that, the top should contain information that is often needed by most visitors, such as existing developers, including the documentation, but this is already the case.  The listing of partners is nice, but takes away a lot of real estate for little benefit; people that find this relevant are usually already semi-convinced to start using it and would likely click through to another page contains this information if necessary, so a separate page for these may be more appropriate?	0			1	Mostly great content	Very interesting blog. Have unsubscribed due to the use of FeedBurner, which is owned by Google (privacy concerns). Have searched for a hidden link that circumvents FeedBurner, but none seems to exist. Would certainly resubscribe if FeedBurner is dropped or a bypass would exist.	3						I don't need help		4	No, the D.Learn forum is fine.	Not in particular.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development	Desktop applications		DevOps																Arch Linux									2.078.3 (latest)													GDC	Linux	macOS					WebAssembly					dub						No	Atom		1	0			Nothing in particular, have not encountered issues of such severity that they required reporting.	3	Blazing fast compile times	It's awesome - keep it as is																				Yes	5	3	2							Fear to do breaking changes							More/better container classes					better json serialization	better xml serialization		std.database	std.i18n	std.benchmark			std.image			JSON module in particular. It gets the job done, but is unintuitive.		std.bigint	std.bitmanip		std.complex				std.csv		std.demangle				stdx.allocator	stdx.checkedint					std.math	std.mathspecial		std.outbuffer						std.signals												std.windows		std.zlib	std.zip	Fully integrated support for use as a web framework (i.e. what vibe.d does) along with automatic recompilation on source change so we can switch away from other insufficient and arcane web programming languages ;-).	No, and I don't plan to											Already involved in other open source projects usurping time			Missing language feature X / not moving fast enough					Issues with language feature X (e.g. shared, @property)		Missing IDE support, a community-driven proper D language server (following language server protocol) could do wonders for D	Nothing						Nothing																	Fewer third-party libraries than other language										Nothing.							No, D is a great language in itself - has already had a lot of strong points over other languages. Rust is newer and also has some great features, but D could have filled most of that same gap, yet for some reason the world decided to spawn yet another language. The most painful part of using D right now is lack of a proper language server (or rather: IDE integration) with support for code navigation, autocompletion, refactoring, and so on. This is also a blocker for many corporate environments.	C++ done (almost!) right	Wikipedia	Very interesting syntactic sugar and mix of features that very few other languages offer (built-in annotations, contract programming, immutability built-in, parallel programming bulit-in), authors that think major decisions through extensively	gtkd	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta		Performance	Native interoperability with C		UFCS						Built-in unittests			Garbage collection	Inline assembler	Contracts	Debug attribute		std.concurrency & std.process	Multi-paradigm	Functional programming paradigm																				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages			newCTFE		See also "c" :-).	Nullable types by default, module system that does not allow for one class per file in OOP settings (class "Foo" in module "Foo" requires defining class "SomethingElseThanFoo" in module "Foo" and then aliasing it back to "Foo" everywhere) - not a fan of dropping everything related in one module, certainly not when tooling is nonexistent, since it prevents simple fuzzy file name searching as a workaround	No, I'm already donating my free time	No.	Spaces	2018-03-04 20:13:20	2018-03-04 20:55:02	656fc6c50e
d6e37a7a2c78e6933bdc9b2645555356	Yes	3				tour.dlang.org			D Forum: Learn							Reading various references on the internet.	4	1. Outdated references. 2. Limited references	3	Examples that are relevant.	3	3	3	The repetitive nature offeedabk responses in the Forum section.	1	3	Nothing in particular	1	Mostly great content	I  am still evaluating.	3	D Forum		#d on StackOverflow				Cross referencing on the internet	3	Yes, I like StackOverflow.	N/A	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development	Desktop applications										Server utility applications				Official .deb packages														2.077.1 (latest LDC)												DMD	Linux		Windows							dmd		dub						Yes, I work with D part time		Monodevelop with plugin.	3	0			Have not gotten to that point as yet.	4	No idea at this point.	It's awesome - keep it as is																				Yes	3	3	3	Nothing - Phobos (Standard Library) is great																		better json serialization											None really.					std.complex	std.concurrency					std.demangle	std.digest			stdx.allocator	stdx.checkedint		std.functional				std.mathspecial		std.outbuffer	std.parallelism															std.uuid			std.xml			None	No, and I don't plan to										I am just starting to learn D		Nothing										Nothing						Nothing								Nothing											Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials				Nothing.							1. Lack of presence and visibility compared to other languages.	Elegant and innovative	Internet	I enjoy exploring programming languages.	Mysql.								Readable syntax		-betterC														Multi-paradigm	Functional programming paradigm																						vibe.d 0.8						An opportunity for a linux based backend server application development.	Complex GUI development	Maybe, I miss accountability at the moment	Some of the questions are not applicable. I would probably donate, but at a suitable and not for any of the reasons provided.	Meh, I don't care.	2018-03-04 16:39:26	2018-03-04 18:31:57	6175e662d3
0ebdc8316b709b549a0f962a7437aef6	Yes	4				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							4	Language spec and documentation is incredibly dense and assumes the reader has a degree in theoretical computer science	4	The documentation is incredibly dense and assumes the reader has a degree in theoretical computer science	5	4	4	Not sure	1	3	Sometimes it does not work	1	Mostly great content	n/a	5		#d on IRC						4	Yes, I like StackOverflow.	n/a	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly											Science/Research	bioinformatics					Official OSX dmg installer		d-apt Debian/Ubuntu												2.076.1 (static foreach)											DMD	Linux	macOS		BSD-variant							rdmd		make					Yes, I work with D part time	vim / neovim		4	0			n/a	4	improved error messages	It's awesome - keep it as is																				Yes	3	3	3						Reliance on the GC	Fear to do breaking changes							More/better container classes	numeric and matrix				better json serialization			std.database			std.decimal				numeric and matrix	not sure. all of them, until i am able to wade through the documentation. once understood, they work pretty well.				std.compiler							std.demangle				stdx.allocator	stdx.checkedint							std.meta													std.typecons	std.uni									std.getopt is too rigid and inflexible and does not adhere to standard unix conventions. In addition, the documentation is subtly outdated (some inaccuracies in things that have been fixed / features that have been added)	No, and I don't plan to										I am just starting to learn D	I am not a compiler or language person but a highly specialized end user		Language complexity (e.g. inout, abuse of mixin)								lack of library ecosystem		Poor Phobos (Standard Library) documentation		Poor compiler error messages						dub											Ugly bits of the standard library			Fewer third-party libraries than other language			Few showcases / flagship projects								Too much low-level focus (C/C++)			Lack of focus at the management level			already covered	great but unfocused	Reddit probably	Need faster than python; Go is ugly	mir						Performance		Readable syntax	UFCS		Closeness to C/C++							Garbage collection						Multi-paradigm	Functional programming paradigm						Compile-time format string checking									DMD support for AVX2					New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)								speed and syntax	not sure	Yes, but only for a specific project	The hungry man must be careful not to eat too much	Tabs	2018-03-04 17:46:05	2018-03-04 18:18:21	c788dbae0d
e0307aa785eebfebfb2bb6e5396a9b6b	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								4		4		0	4	4	Scattered and out of date information	0			1	Mostly great content		4	D Forum							4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications			Security	Game Development							Official Windows .exe installer						d-apt Debian/Ubuntu							I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows							dmd	rdmd	dub						No	Visual Studio Code		3	1	4			4	Lambda syntax for functions and methods	It's awesome, but I miss a few features	Attibute clutter, messy compile time reflection.															AST macros	No	3		Yes	2	5	4		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc				More/better container classes					better json serialization			std.database								Strings are usually a blast to work with, but autodecoding can make things messy				std.compiler							std.demangle					stdx.checkedint	stdx.logger			std.json		std.mathspecial		std.outbuffer						std.signals	std.socket	std.stdint										std.windows	std.xml	std.zlib	std.zip		No, but to other D repositories				Time is my only enemy											Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)									Compiler regressions	Poor compiler error messages				Non-enterprise IDE support	Poor debugging							Auto-decoding of strings		Virtual by default					Nothing											Nothing.									Came across it while looking for a C++ replacement	The homepage gave me the impression that the language cares about the same things I do	Vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS				Templates		Built-in unittests		@safe strings + arrays	Garbage collection	Inline assembler			import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach							New range functionality (substitute, slide)			Back referencing of mangled symbols	Reproducible builds												Cross-compilation with LDC	newCTFE		Allows me to create elegant, zero cost abstractions	Compiler memory usage	Maybe, I miss accountability at the moment		Tabs	2018-03-04 16:27:12	2018-03-04 17:01:40	b64a10c4ba
f212895667221d4a271755c53ffb5ad4	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe	d-idioms		5	attribute/storage class/type modifier and their combinations: There are lots of them; the DIP1000-related ones I would like to be presented in a way that's better memorizeable or to be looked up quickly.	4	In general it's important for me to quickly get a grip on "something" and referring doc: I would like to see an example of usage everywhere; it's often similar to "a picture tells more/faster than 1000 words (of formal function signature and parameter/return etc. doc)" though not replacing that of course.	0	5	3	Since I "discovered" that I can search within dlang.org, even selecting scope of search, I'm happy: Well done, just the front page is not my entry point, and it's a matter of taste; to me it looks a little bit undecided who is the addressee and what it wants to tell (which seems to be all) and that's to much on a single page IMO, thus it leaves an impression of patchwork 	1	5	-	1	Always great content	-	5	D Forum			dlang.slack.com			search on dlang.org, occasionally on stackoverflow	5	Yes, I like StackOverflow.	- 	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications	IoT		Security					Kernel Development	Science/Research					Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux									dmd	rdmd	dub						Yes, I work with D full time	Eclipse		1	1	2	People throw something in and then often seem to forget about (somewhat excusable as it may take years for any observable action on issues): 1. I rarely get replies (even though emails got dispatched and even when I address someone individually). 2. Issues fixed by PRs happen to be still open in bugzilla. 3. The organizational possibilities of bugzilla (Depends on, Blocks, Keywords) aren't always used to their full extend and others deserve better instruction for a common usage (e.g. is P1 high or low? Use of bracketed keywords in the title). 4. To me it's absolutely intransparent, if at all or when or how quickly an issue will be fixed. If I where a company's decider to critically rely on D, I wouldn't dare to rely without own developer(s) who can fix dmd/druntime/phobos issues or have a reliable contract for such. 		4	-dip1000 complete	It's awesome - keep it as is																				Yes	3	6	6						Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers			std.graph	std.database		std.benchmark						- 																								std.outbuffer								std.stdint												std.zlib	std.zip	-	Yes	5	-															Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000					Poor compiler error messages				Non-enterprise IDE support	Poor debugging										Wrong defaults (e.g. not @safe by default)						Less corporate support (including jobs) than other languages												Lack of progress on DIPs	Lack of focus at the management level		I miss some coordinated effort	Correction to 14 a-f: Actually Nothing there discourages me from using D. Thus take my answers there as weak points for g.	expressive, fast, awesome introspection	internet	D is way better than C++	phobos	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler	Contracts	Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library	Templated vector operations	Compile-time format string checking	-betterC	stdx.checkedint	New range functionality (substitute, slide)	toString with output ranges	Deprecation of the integral promotion for unary operators	Back referencing of mangled symbols	Reproducible builds	Removed prelude assert for constructors & destructors	DMD support for AVX2	Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org	docarchives.dlang.io	Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		It's fun und productive working with	A tool issue: Maybe I'm not up-to-date about htod/swig/dstep possibilities (I still do C-bindings manually for D), but I recently used Rust's bindgen tool for an automatic C library binding on-the-fly: Though not yet extensively tested, the result looks promising and it worked smoothly: I was really impressed and would love having the same (timesaver) for D.	No, I'm already donating my free time	My No about donating isn't absolute: I need to be aware of need and would bind to a specific project proposal.	Meh, I don't care.	2018-03-04 10:57:44	2018-03-04 16:07:50	0c8be0e95c
fcbd33a285e7f74f6204d04638f06cf3	No, I have stopped using D		Compiler and library bugs; partially implemented features (esp. related to CTFE); poorly documented limitations of some language features				Language specification								d-idioms		4		4		0	3	3		0			1	Mostly great content		1		#d on IRC						3	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications				Game Development					Science/Research		Official Windows .exe installer							Arch Linux										2.077.1 (latest LDC)												DMD	Linux		Windows									dub						No	Visual Studio Code		4	1	3			1	Implement all forms of is-expressions (or document its limitations)	It's ok			string interpolation		named arguments												No	1	The compiler does not correctly implement certain edge cases of CTFE and is-expressions OR the limitations are not in the specification.	Yes	3	4	4	Nothing - Phobos (Standard Library) is great																std.eventloop																													stdx.checkedint								std.outbuffer													std.uni					std.windows					No, and I don't plan to										I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough					Issues with language feature X (e.g. shared, @property)						Poor compiler error messages							DLL support on Windows								Wrong defaults (e.g. not @safe by default)								Few showcases / flagship projects											Lack of focus at the management level	Wrong decisions at the management level							Ranges & std.algorithm	Mixin							UFCS				Templates		Built-in unittests			Garbage collection													Compile-time format string checking																				newCTFE				No, I'm not interested into D		Spaces	2018-03-04 15:31:19	2018-03-04 15:44:45	09a75e797c
bbd3f427cd2211b7d89d295d95e14f01	Yes	5			"The D Programming Language" by Andrei Alexandrescu			#d IRC on freenode	D Forum: Learn					"D Cookbook" by Adam D. Ruppe			5	Template error messages. I often rewrote long pipelines in procedural style, debug, then rewrite as pipeline.	5	Templated function declarations are hard to parse mentally, I always look at examples first and try to understand entirely the function, then make sense of the declaration. Unclear, e.g., when I feed a @nogc nothrow function into a Phobos higher-order-function, whether the HOF will end up @nogc nothrow as well or not.	0	4	4	I often click "Learn" to go to the Learn forum. But this link leads to the tour. Then, in the tour, the top navigation bar changes and it's even harder to find the Learn forum.	0			1	Mostly great content	-	4	D Forum	#d on IRC						5	No, the D.Learn forum is fine.	-	Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development														Arch Linux									2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd	rdmd	dub						No		geany	4	1	5	I like OOP and feel that the main bugfixers care about other parts of the language more, but it's likely my own selection bias. Overall, I'm happy how many bugs get fixed every release all across the board.		5		It's awesome, but I miss a few features	1. When x is a class instance with method f (method, not a free function f), I have to write pipelines such as map!(x => x.f), but would love to write map!f. I know why it's hard to make that though (the lambda is a template, just f would not be a template).  2. assert(x); needs parentheses around x, even though it feels like return x; which doesn't need parentheses.  3. If arr is an array, then arr.length feels long to type. Instead, arr.len or arr.$ would be cool  4. arr.length should be signed. Nasty nasty bugs will happen every time with arr.length - 1. I wrote my own int len(T)(T[] arr) { return arr.length & 0x7FFF_FFFF; } to work around this and use it almost everywhere.  5. Would like to have both nullable and non-nullable class references directly in the language with strict static checks, but that's not syntax; it's a feature wish					assert diagnostics		multiple alias this					UFCS for local symbols			Non-nullable class references	No	5	-	Yes	5	5	6		Auto-decoding for strings	Auto-decoding isn't nothrow			Reliance on the GC			@safe for all modules	@nogc	DIP1000	Performance						@nogc containers												-				std.compiler		std.concurrency			std.csv		std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger			std.json		std.mathspecial		std.outbuffer			std.process			std.signals	std.socket			std.system				std.uri		std.uuid		std.windows	std.xml	std.zlib	std.zip	1. Autodecoding (char-to-dchar de-/encoding should be explicit) 2. everything should be @safe nothrow @nogc even in corner cases	No, but I want to to				Time is my only enemy										Missing language feature X / not moving fast enough						@safe-ty problems / missing DIP1000		Nothing						Nothing										Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)			Nothing												Too much low-level focus (C/C++)			Lack of focus at the management level	Wrong decisions at the management level		Other languages seem to introduce modern OOP features faster (non-null, stronger automatic subtype detection). But even though D's OOP feels dated, we have enourmousely-strong template/CTFE to easily work around most shortcomings, I'm sure I would miss that in other languages.	static map opDispatch	Andrei's Three Cool Things About D ("Question for the book")	I had a project in C++. D looked like it would pick the right default everytime I'd have to write boilerplate in C++.	enumap (a @nogc struct that's like an associative array where the keys are exactly the values from a given enum.)	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance		Readable syntax	UFCS				Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays							Multi-paradigm	Functional programming paradigm						Compile-time format string checking							Reproducible builds						Deprecation of the comma operator							newCTFE		Adam D. Ruppe! What is the worst that could happen from trying, most things that you can imagine will work. (In a pinch, D is super easy to refactor, too.)	-	No, I'm already donating my free time	I'm happy every time I see a release with lots of little bugfixes, even when I haven't run into those bugs. Make usercode easy to do the Right Thing by default, and possible to do the harder Wrong Thing. Keep on pushing ahead with exciting new ideas. The Right Thing will change over 10-20 years.	Spaces	2018-03-04 14:23:12	2018-03-04 15:33:07	1ef969a213
39a6f48425b3c1f25abad60ddc7b0bd9	Yes	5					Language specification										5	none	3	I think design rationale is needed for good docs	0	4	4	I would go with simpler design	0			1	Always great content		5	D Forum							5	No, the D.Learn forum is fine.	no	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications												Official tarballs																2.077.1 (latest LDC)												LDC	Linux	macOS	Windows	BSD-variant	Android	iOS		Embedded					make				my own	No		Programmer's Notepad	5	1	5	Search is not always good		5		It's awesome, but I miss a few features	I have pretty big ideas how to improve it :)												UFCS for local symbols				No	4	Rationale again	No	6	3	3		Auto-decoding for strings		Poor naming choices				Ranges are not up to my taste						More/better container classes								std.database								none	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container	std.conv	std.csv	std.datetime	std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json	std.math	std.mathspecial		std.outbuffer	std.parallelism	std.path	std.process	std.random	std.regex	std.signals	std.socket	std.stdint	std.string	std.system		std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		No, but I want to to								High barrier to entry				Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							Poor decisions made early in its history	awesome	I don't remember	I liked it on first sight	my own, unpublished		Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection		Contracts	Debug attribute			Multi-paradigm		Slices, asserts, bound checks, string switch, vesion statement, delegates, clean syntax	static foreach	opt-in GC and runtime					stdx.checkedint				Back referencing of mangled symbols							Deprecation of the comma operator				Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE	Deprecation of hex strings	Good language design	Pervasive use of unsigned integers, they shouldn't be used for numbers in business logic	Yes, just tell me how		Tabs	2018-03-04 14:01:43	2018-03-04 14:59:19	5dae268e6b
f7a33decd6709cc32c49bb02b4f48a15	Yes	4					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4	Trying to get runtime working on Windows	4	It can be hard to find a function to fulfil a need without being familiar with most of the library already (e.g. 'how do I do xyz to a range?' and it already exists but has a non-obvious name or import)	2	5	5	Not much - it is really good now. It used to be a bit harder to guide friends to the right downloads or articles on its use, but this has really improved	0			0			5	D Forum				My colleagues			4	Yes, I like StackOverflow.	not sure	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly					Security						Science/Research		Official Windows .exe installer	Official tarballs		Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows				WebAssembly			dmd	rdmd	dub						Not sure	vim / neovim		2	0			Not having enough expertise (e.g. mutating immutable on an old windows version years ago, but when I was still a new programmer and unsure whether it was Windows or DMD that was erroneous)	4	Easy NoGC interface polymorphism without requiring deep magic (e.g. casting manual __vtbl structs to void* to interface)	It's awesome, but I miss a few features	No pattern matching or destructuring bindings. This could be somewhat alleviated if there was a syntactic sugar for inline var declarations as a function argument, but this might cause syntactic clashes (e.g. given `void destructureInto(T,S)(ref T item, auto ref S other);` the line `destructureInto(int item, myIntLikeStruct);` would behave like `int item; destructureInto(item, myIntLikeStruct);`. This syntactic sugar, when combined with overloaded opAssign and helper templates, could get you `let (int a, string b) = myDestructurable;` without any other language changes. However, this may clash with function prototype syntax).	tuples		in-place struct initialization										Static inheritance			Yes, but only for experimenting/testing/debugging	3	The grammar definition is quite heavy, with its operator precedence chains like OrOrExpression, AndAndExpression...	Yes	3	5	4				Poor naming choices		Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000		More -betterC support					@nogc containers	better json serialization									std.drawing (2D)		core.simd, std.containers with @nogc	std.base64	std.bigint		std.compiler	std.complex				std.csv	std.datetime	std.demangle		std.encoding	std.exception			stdx.logger					std.mathspecial		std.outbuffer														std.uri						std.zlib		A way to unify common ranges with different symbols (e.g. accept both range.map!fn.map!fn and range.map!fn.map!fn.map!fn for some idempotent fn without instantiating the template anew for each version. Currently, symbol length explosion prevents certain techniques, like taking fixpoints of templated functions), something maybe in std.meta for supporting structs with interfaces to abstract the deep magic (e.g. I've made templates in the past which were like `IFace impl(Struct, IFace, Fns...)(ref Struct s, Fns fns);` which generated vtables manually, but didn't have much error checking etc.), templated serialisation library (e.g. toJSON!T being a complete static serialisation routine)	No, but to other D repositories			Finding good issues to get started	Time is my only enemy										Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems		@safe-ty problems / missing DIP1000						Poor GC implementation / performance			Non-enterprise IDE support							Nothing										Less corporate support (including jobs) than other languages									Nothing.							Maybe something is needed to help people get the right mindset for D? When I introduced it to coworkers, they were confused when 'Is it OOP?' 'Is it C-like/C-level?' and 'Is it functional?' were all answered with 'Yes'. It took some coaxing to get people to use templates to their fullest, or to take advantage of having both byte-level access/pointers/transparent ABI and generics astronautry available simultaneously. Examples of combining these well or showing the advantages of switching between levels would help people adapting to D from other backgrounds, I think (e.g. I showed coworkers my templated serialisation libraries and JIT structs (fields corresponding to raw pointer literals in machine code) to show them examples of breaking down conventional barriers)	Metaprogramming with pointers	Wikipedia	It was a cleaner C++, and I was hooked on Scala type-level programming at the time, so clean templates were fantastic	Vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC			Templates		Built-in unittests	In, out, ref parameters		Garbage collection	Inline assembler				std.concurrency & std.process	Multi-paradigm	Functional programming paradigm			opt-in GC and runtime		Templated vector operations		-betterC									Automatic compilation of imports (dmd -i)				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8						How productive I am with it - it is excellent for prototyping, yet is also really good for production-level code	Symbol length explosion in heavy templates	Maybe, I'm still a student	Thanks for modernising and getting the community involved, it seems much better than when I first started with D ~7 years ago	Spaces	2018-03-04 11:08:45	2018-03-04 12:35:59	f5387ae1df
054880fe48936c02648d2553d31a0fe9	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			5	Setting up a development enviroment with good auto completion e.t.c	4	Phobos doc seems to lack simple and straightforward examples for complex language constructs and features	0	5	5	Nothing worth mentioning	0			1	Always great content	Maybe the DBlog could be complemented with some more technical articles and reports that would showcase the power and expressiveness of D. Something like Guru of the Week for D.	5	D Forum							5	Yes, I like StackOverflow.	There really shouldn' t be ONE single place to ask questions. Both DLearn and StackOverflow seem really good. The coomunity should really participate in whichever platform D questions are asked	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly											Science/Research			Official tarballs																		2.075.1 (removed built-in .sort)										LDC	Linux	macOS	Windows		Android	iOS	WebAssembly										custom scripts	No	emacs		3	1	5	Haven' t been so active so I cannot comment		5		It's awesome - keep it as is																				Yes, but only for some projects	3	5	6		Auto-decoding for strings	Auto-decoding isn't nothrow			Reliance on the GC				@nogc			More -betterC support					@nogc containers																										std.exception										std.outbuffer																							No, but I want to to					Personal laziness												Dependence of some language features + Phobos (Standard Library) on the GC				phobos always linking statically									Poor debugging		DLL support on Windows	Missing support for platform X	D's dependence on a large and bulky runtime			Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)							Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs				D has complexity but it seems that complexity comes with native close to the metal languages, or does it......	productive malleable powerful	in comparisons with C++	Because it is a better C++ and because I hate long compile times	phobos arsd dparse	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits		Native interoperability with C	Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays		Inline assembler			import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations		-betterC																		Cross-compilation with LDC			The fact that its development is not driven by corporate agendas		Maybe, I'm still a student	-betterC needs to be on a very high priority level	Spaces	2018-03-04 10:59:11	2018-03-04 11:30:16	29bc60f7bf
1b439fccc5f9c3559fac6eba8cf2762e																																																																																																																																																																																																																																																																																																																																																		2018-03-04 10:33:25	2018-03-04 10:33:31	0265566a43
61e2319980f60a9988ee7d24c9a4e04c	No, I have stopped using D		Worked on C embedded projects instead				Language specification										4	Mixed docs regarding D1 & D2 (outdated tutorials), no roadmap for D2, no current state on this roadmap (i.e. shared keyword unusable/undocumented)	2	It's not clear or easy to dig in. One page for all symbols is wrong IMO. Please look at .NET docs, each symbol has its own page and explanation.	0	5	5		0			0			2						I don't need help		4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely		Desktop applications	IoT					Embedded Systems					Official Windows .exe installer			Official .deb packages										I compiled D from source													2.068.2 (last C++ release)			DMD	Linux		Windows		Android		WebAssembly	Embedded		dmd		dub	make					No	Visual Studio + VisualD		4	1	4	Not for lazy people. You should try with quick anonymous issue filling for anyone on dlang.org. Then people involved in D language should test and eventually translate submitted issues to bugzilla issues.		4	Easy cross-platform (ARM, x86, x64), enough for todays mobile and desktop development	It's awesome - keep it as is																				Yes	3	1	1		Auto-decoding for strings		Poor naming choices		Reliance on the GC		Lack of full featured container support		@nogc				More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database			std.decimal												std.container																	std.outbuffer																							Yes	5																Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation						Non-enterprise IDE support	Poor debugging						Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages														Wrong decisions at the management level			Better C/C++, nice templating system, performance	Google	It was language I was searching for (after working with QBasic, Pascal, Delphi, C#, C/C++ and PHP)				CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax		-betterC		Simple, but powerful module system	Templates						Inline assembler		Debug attribute	import("myfile")						opt-in GC and runtime				-betterC						Reproducible builds		DMD support for AVX2	Automatic compilation of imports (dmd -i)									Cross-compilation with LDC			Performance and clear syntax language (if IDEs were rock solid), modules, and every nice D feature	Obligatory GC	No, I'm already donating my free time		Meh, I don't care.	2018-03-04 09:45:47	2018-03-04 10:19:07	c991e9c975
8a87e7df7b19fbe1a929fd5184f211af	No, I have stopped using D		I don't like exceptions and garbage collection.				Language specification										4		5		1	5	5		0			1	Mostly great content		5						I don't need help			I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely			IoT			Game Development		Embedded Systems												Arch Linux									2.078.3 (latest)													LDC	Linux						WebAssembly					dub		cmake				No	Sublime		4	0				3		It's awesome - keep it as is																				Yes	2	4	4				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc		Performance					std.eventloop	@nogc containers	better json serialization								std.image												std.csv													std.mathspecial																					std.xml		std.zip		No, and I don't plan to									I don't use D								Dependence of some language features + Phobos (Standard Library) on the GC								Poor compiler error messages	Poor GC implementation / performance				Poor debugging				D's dependence on a large and bulky runtime				Attribute bloat																													Ranges & std.algorithm		CTFE (static if, static foreach)										Templates							Contracts		import("myfile")	std.concurrency & std.process					opt-in GC and runtime										Reproducible builds										Colorized error messages		Cross-compilation with LDC					Maybe, I'm still a student		Tabs	2018-03-04 09:44:58	2018-03-04 10:00:01	17e4696a1f
0442a5263c2526613360dda7b8ed5db0	Yes	4			"The D Programming Language" by Andrei Alexandrescu							"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe			4	phobos, functional programming	3	more/better examples required	0	4	5		0			1	Always great content		5					My colleagues			5	Yes, I like StackOverflow.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily												Information Systems				Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux									dmd		dub						Yes, I work with D part time	Sublime		3	0				4		It's awesome - keep it as is																				Yes	3	4	1					Old modules like std.outbuffer or std.socket						DIP1000			More/better container classes			std.eventloop		better json serialization	better xml serialization	std.graph	std.database								std.datetime		std.bigint	std.bitmanip		std.complex	std.concurrency	std.container																																							bad xml support, no support for graphical user interfaces, missing unit test library	No, but I want to to			Finding good issues to get started		Personal laziness			High barrier to entry							Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)					Compiler regressions						Poor debugging						Nothing										Less corporate support (including jobs) than other languages		Few showcases / flagship projects	Little info on StackOverflow						Nothing.					Wrong decisions at the management level			better, shorter code	job application	for the job	std.algorithm	Ranges & std.algorithm							Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests			Garbage collection		Contracts				Multi-paradigm					DMD as a DUB library	Templated vector operations					toString with output ranges																		growing coverage of fields in phobos hopefully broader attantence of the language in future active community	many regressions/bugs in compiler/standard library	Maybe, I miss accountability at the moment		Spaces	2018-03-04 08:33:55	2018-03-04 09:39:45	711fa1b873
6cda74e15c2bfc526f945691cad7b236	No, I have never used D			Fear of learning a language that has no future		tour.dlang.org											4	learning editor support	3		2	4	4		1	4		1	Mostly great content		1			#d on StackOverflow					3	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications	IoT	DevOps		Game Development	Big Data	Embedded Systems	Machine Learning		Science/Research				Official .rpm packages													2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux	macOS	Windows		Android	iOS	WebAssembly	Embedded				dub						No	vim / neovim		2	0				4		It's awesome, but I miss a few features			string interpolation		named arguments												No	3		Yes	3	3	5	Nothing - Phobos (Standard Library) is great													More/better container classes			std.eventloop		better json serialization																																																										No, but I want to to			Finding good issues to get started	Time is my only enemy			D community			I am just starting to learn D																			Non-enterprise IDE support	Poor debugging															Fewer third-party libraries than other language			Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials					Too much low-level focus (C/C++)							easy, fast, native		To make high performance Python extension modules in something other than C or C++.									Readable syntax						Built-in documentation (Ddoc)	Built-in unittests														DMD as a DUB library																					Cross-compilation with LDC							Spaces	2018-03-04 08:16:55	2018-03-04 08:50:22	48ad1246ba
e94db61b2611752c9b3c3a85996cbe61	Yes	4					Language specification	#d IRC on freenode	D Forum: Learn								2	Learning D over ten years ago there wasn't much documentation available	3	Cross references. Examples.	0	3	3		0			1	Mostly great content		5	D Forum	#d on IRC		dlang.slack.com				3	No, the D.Learn forum is fine.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications		DevOps																							DVM		2.078.3 (latest)													DMD	Linux	macOS	Windows	BSD-variant		iOS						dub						Yes, I work with D part time		TextMate	2	1	3			3		It's awesome, but I miss a few features		tuples	string interpolation		named arguments												Yes, but only for experimenting/testing/debugging	2	Examples. It doesn't cover the whole language	Yes	2	4	3		Auto-decoding for strings		Poor naming choices			Fear to do breaking changes		@safe for all modules								std.eventloop		better json serialization	better xml serialization		std.database						std.drawing (2D)		Ranges and metaprogramming	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex		std.container									stdx.checkedint	stdx.logger	std.functional			std.math	std.mathspecial		std.outbuffer				std.random		std.signals	std.socket	std.stdint		std.system						std.uuid		std.windows					Yes	3	It takes very long time to get something  merged													Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)									Compiler regressions					Non-enterprise IDE support							Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects								Too much low-level focus (C/C++)	Frequent breaking changes	Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Seems to be no clear future direction. Or it has changed too many times		Wikipedia	Seemed like a nice language	vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system					@safe strings + arrays	Garbage collection						Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library																					Cross-compilation with LDC			It's an overall good language covering many areas	Metaprogramming, it's spread across too many features	Maybe, I miss accountability at the moment		Spaces	2018-03-03 19:51:21	2018-03-04 08:35:03	aa371efa7f
0b301b5c0b202392b7f5ec05809e82c6	Yes	4					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4	attributes	4		1	4	3		0			0			2	D Forum							4	No, the D.Learn forum is fine.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily														Official tarballs	Official .rpm packages	Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows							dmd		dub						No	Coedit		4	1	4			4	better error message	It's awesome, but I miss a few features	attributes bloat							multiple alias this			static break			Static inheritance			No	4	more detailed semantic for overloads	Yes, but only for some projects	4	4	4			Auto-decoding isn't nothrow	Poor naming choices								Performance	More -betterC support	More/better container classes				@nogc containers	better json serialization	better xml serialization		std.database				std.color				typecons		std.bigint		std.compiler	std.complex		std.container		std.csv							stdx.checkedint								std.outbuffer																							Yes	4												Language complexity (e.g. inout, abuse of mixin)					Performance problems						Compiler regressions	Poor compiler error messages	Poor GC implementation / performance				Poor debugging		DLL support on Windows		D's dependence on a large and bulky runtime				Attribute bloat						Nothing											Nothing.								egg beacon beans	random reading on web	Wabted to lean a C-syntax style PL for a long time but others (C++, Java, C) were not appealing		Ranges & std.algorithm				std.traits			Readable syntax					Templates		Built-in unittests				Inline assembler			import("myfile")		Multi-paradigm													Back referencing of mangled symbols		Removed prelude assert for constructors & destructors												newCTFE		it's a bit an under-estimated outsider	protection attribute of __traits() should be bypassed	No, I'm already donating my free time		Spaces	2018-03-04 08:09:30	2018-03-04 08:25:51	0a21f30051
2648daf15043fe04282fa9aae90754a7	No, I have never used D			Not enough time to get a real project startedd		tour.dlang.org	Language specification										4	Simple projects to take a look at	5		0	4	2		1	3	Minor things. Even though the next button makes you stick with English it should be in the list. It would make sense to make clear that 4/4 is a "chapter" and not the whole tour.	0			3						I don't need help			I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development			DevOps	Security				Machine Learning																		FreeBSD packages	2.079.0 (nightly)						2.073.1 (new Ddoc theme)								DMD	Linux			BSD-variant								dub	make					No	vim / neovim		4	0				4		It's awesome - keep it as is																				Yes	3	6	5	Nothing - Phobos (Standard Library) is great																					std.database			std.decimal		std.image	std.drawing (2D)																																																	No, but I want to to			Finding good issues to get started	Time is my only enemy	Personal laziness				I don't use D	I am just starting to learn D												Nothing						Nothing								Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists								Nothing.								very underrated language	Original announcement	Curiosity							Performance		Readable syntax																																													Rising popularity, by being compared with Rust, Go and others, yet fitting a niche between them.				Meh, I don't care.	2018-03-04 07:36:32	2018-03-04 07:55:08	a8684fca9b
f6a68f4a1798c9616ea44e78cee19af7	Yes	4								"Programming in D" by Ali Çehreli							4		3		0	4	5		0			1	Mostly great content	There could be more game development topics	4			#d on StackOverflow					5	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly						Game Development							Official Windows .exe installer			Official .deb packages	Official OSX dmg installer												2.078.3 (latest)													DMD	Linux	macOS	Windows		Android	iOS						dub						No, but my company uses D	emacs		4	0				4		It's awesome - keep it as is																				Yes	3	4	3						Reliance on the GC				@nogc								@nogc containers														std.bigint	std.bitmanip								std.demangle											std.mathspecial																		std.uuid							No, but to other D repositories										I am just starting to learn D							Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance							Missing support for platform X			Nothing								Nothing											Nothing.								Pragmatic, compiles fast	University classmate	Nice syntax, compiles fast	Derelict SDL and erupteD						Performance		Readable syntax																				opt-in GC and runtime																				Colorized error messages							No, I'm already donating my free time		Spaces	2018-03-04 06:54:01	2018-03-04 07:13:30	95d0d3b1fd
7f4971398d289ed9f5f1bf83a4f1af00	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4	It's hard to find intermediate to expert leve Dlang books(like Effective C++ or Modern Effective C++).	4	I hope more C++ stl containers are ported to Dlang.	0	5	5		1	4		0			5	D Forum							5	Yes, I like StackOverflow.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly		Desktop applications																		Arch Linux								2.079.0 (nightly)														DMD	Linux											dub						No	emacs		4	1	5			5		It's awesome - keep it as is																				Yes	3	6	4							Fear to do breaking changes							More/better container classes				@nogc containers	better json serialization		std.graph																																																								No, but to other D repositories			Finding good issues to get started		Personal laziness									Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing									dub					Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects							Nothing.								progressive elegant beginner-friendly	ycombinator	I  was terrified by C++.	standard library	Ranges & std.algorithm								UFCS		Closeness to C/C++																							New range functionality (substitute, slide)																					Yes, I'm already doing so		Spaces	2018-03-04 05:43:57	2018-03-04 06:02:17	b64eb424e4
bfd2acb932170bf187b3169248a491d3	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification										4	General lack of web resources on stack overflow etc.	5	Perhaps better high level documentation of packages		4	5		1	5		1	Always great content	I would love to read more articles which demonstrate cool D features in interesting ways.	5						I don't need help			Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications																		Arch Linux								2.079.0 (nightly)														DMD	Linux											dub						No	vim / neovim		5	0			Never run into problems	5		It's awesome - keep it as is																				Yes	6	6	4	Nothing - Phobos (Standard Library) is great																		better json serialization		std.graph	std.database										std.bigint		std.compiler	std.complex		std.container		std.csv		std.demangle		std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional				std.mathspecial		std.outbuffer										std.system	std.traits	std.typecons	std.uni	std.uri	std.utf								No, but I want to to			Finding good issues to get started											Missing language feature X / not moving fast enough							I would use it a lot more if there were more packages however there is not much that can be done about this I think	Nothing																								Less corporate support (including jobs) than other languages			Little info on StackOverflow						Nothing.								efficient (programming & execution)		It has a great reputation	The entire std lib is exceptional in my opinion. This survey actually surprised me as it seems like the D core team is worried about the quality of it.			CTFE (static if, static foreach)					Readable syntax			Closeness to C/C++	Simple, but powerful module system						Garbage collection																																			It's fun to use		Maybe, I'm still a student		Spaces	2018-03-04 04:02:37	2018-03-04 04:20:40	ac0bb82ec5
60b7f69e0866dfc4599628a6682d7b2a	Yes	3					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							3	It's always hard to find useful answers when you encounter some problems.	3	Many examples are too simple to cover the inner things	3	4	4	nothing	0			1	Mostly great content	nothing	3	D Forum							4	I don't care.	no	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily	Web development												Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows									dub		cmake				Yes, I work with D full time	Visual Studio Code		4	1	4	Many issues are not fixed in time.		3	Compatible with the mostly welcomed development tools(linker, debugger etc.)	It's awesome, but I miss a few features	auto mixin template														Nothing - D is already awesome		No	3		Yes	2	2	2				Poor naming choices								Performance	More -betterC support	More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database	std.i18n				std.image	std.drawing (2D)		-		std.bigint	std.bitmanip		std.complex				std.csv		std.demangle				stdx.allocator	stdx.checkedint							std.meta	std.outbuffer								std.stdint									std.variant		std.xml			-	No, and I don't plan to			Finding good issues to get started	Time is my only enemy				High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)			Performance problems	Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation		Poor compiler error messages				Non-enterprise IDE support	Poor debugging		DLL support on Windows						Attribute bloat				Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials					Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		-	beautiful syntax, bad implement(compiler, standard lib etc.), 	internet	Safer memory management than c/c++.	none			CTFE (static if, static foreach)			Performance		Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system			Built-in unittests			Garbage collection			Debug attribute			Multi-paradigm				opt-in GC and runtime				-betterC																					interesting, work	-	No, I'm already donating my free time	fight	Spaces	2018-03-04 01:18:08	2018-03-04 02:49:19	a7685c867f
99c7e37cef283e376e43c11c535e13ba	Yes	5					Language specification										4	The specification lacks some details, templates took me too long to understand despite them being so common in std	3	Hard to navigate and sometimes a bit terse	0	4	4		0			0			5	D Forum	#d on IRC			My colleagues	I don't need help		3	No, improve DFeed.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications				Game Development						Compilers								Arch Linux	Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows									dub						No			2	0				4	Language as a library for better editors	It's ok	The C style retrofitted for new features instead of just using modern syntax in the first place														Nothing - D is already awesome		No	3		Yes	3	4	3				Poor naming choices			Fear to do breaking changes			@nogc				More/better container classes			std.eventloop	@nogc containers							std.decimal					Containers															stdx.allocator	stdx.checkedint		std.functional				std.mathspecial		std.outbuffer						std.signals								std.uri				std.windows			std.zip		No, and I don't plan to					Personal laziness								Language complexity (e.g. inout, abuse of mixin)											Compiler regressions					Non-enterprise IDE support	Poor debugging											C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects			Lack of good examples / tutorials				Nothing.								Language for everything 	Reddit	Spec and self taught 	derelict			CTFE (static if, static foreach)	std.meta	std.traits				UFCS			Simple, but powerful module system	Templates					Garbage collection							Functional programming paradigm					Templated vector operations	Compile-time format string checking																	Colorized error messages			newCTFE		Looking for a flexible and powerful language that won't make developing harder 	Immutability implementations mostly sucks	Yes, but only for a specific project		Spaces	2018-03-04 02:17:43	2018-03-04 02:47:58	66e5ddc625
88921cfb362964365d649b46ecfcc56b	Yes	3			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			4	Andrei Alexandrescu's book should be updated. This is the most comprehensive D book that is around, and it's  pretty outdated now.	4	Templates and Voldemort types make it really difficult to understand what the function's compile time/runtime arguments are. The documentation somehow needs to be presented in a different way, I don't know how either.	3	4	4	You need better examples for newcomers. Many would think that the current examples have a weird syntax.	0			1	Mostly great content		5						I don't need help		5	Yes, I like StackOverflow.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly								Embedded Systems						Official tarballs																						2.071.2 (import access check fixes)						DMD	Linux											dub						Yes, I work with D part time	vim / neovim		4	0				4		It's awesome - keep it as is																				Yes	3	2	3		Auto-decoding for strings				Reliance on the GC				@nogc				More/better container classes				@nogc containers			std.graph			std.benchmark							std.base64		std.bitmanip	std.compiler	std.complex	std.concurrency					std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger			std.json		std.mathspecial		std.outbuffer						std.signals		std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml				No, and I don't plan to																Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance				Poor debugging									Virtual by default	Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects											Lack of focus at the management level								Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits				UFCS		Closeness to C/C++				Built-in unittests					Contracts				Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations	Compile-time format string checking			New range functionality (substitute, slide)																					No, I'm not interested into D		Spaces	2018-03-04 01:35:58	2018-03-04 02:04:06	7a809ad72b
9c7564a335dee7d1770c6a2b453d17c0	No, I have stopped using D		Lack of time to keep up toy projects		"The D Programming Language" by Andrei Alexandrescu		Language specification	#d IRC on freenode									4				0	4			0			0					#d on IRC							Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely											Science/Research	Backend								Arch Linux									2.078.3 (latest)													DMD	Linux									dmd	rdmd	dub						No	emacs			0				5		It's awesome, but I miss a few features			string interpolation											Static inheritance			No			Yes												@safe for all modules	@nogc							std.eventloop																																																																																																																															Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax	UFCS		Closeness to C/C++		Templates		Built-in unittests	In, out, ref parameters				Contracts				Multi-paradigm																															Yes, I'm already doing so		Tabs	2018-03-04 01:40:47	2018-03-04 01:51:41	7640c7aa8a
df4126ad9262af8c1d17384688ff0d67																																																																																																																																																																																																																																																																																																																																																		2018-03-04 01:49:51	2018-03-04 01:49:57	3f45dbff21
15cc907881bbea2011818d638d49d448	Yes	5				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							3	lack of: stack overflow/blog posts/tutorials	3	could do with a few more examples	0	4	4	more focus on code examples/language	1	4	its ok	1	Mostly great content	a) needs to be more frequent b) sometimes too specific; needs more general content	3	D Forum	#d on IRC						5	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily		Desktop applications				Game Development					Science/Research		Official Windows .exe installer			Official .deb packages				Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows				WebAssembly			dmd	rdmd	dub				scons		Yes, I work with D part time	vim / neovim		3	0				5		It's awesome - keep it as is																				Yes	3	4	4				Poor naming choices										More/better container classes					better json serialization		std.graph			std.benchmark			std.image	std.drawing (2D)		curl	std.base64		std.bitmanip	std.compiler							std.demangle													std.outbuffer																	std.variant						No, but to other D repositories			Finding good issues to get started				D community			I am just starting to learn D		Nothing											Poor Phobos (Standard Library) documentation		Poor compiler error messages					Poor debugging						Nothing						Ugly bits of the standard library			Fewer third-party libraries than other language				Little info on StackOverflow		Lack of good examples / tutorials								Lack of focus at the management level			do more of what Ada/Perl6 does (at a language level)	pretty great language	probably reddit	better than c++		Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters		Garbage collection		Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach						stdx.checkedint	New range functionality (substitute, slide)								Runnable examples on dlang.org						Colorized error messages			newCTFE		performance and ease of use, especially interop with perl6 and Ada	inout/ref confusion, more emphasis on param qualifiers	Yes, just tell me how	better contracts like Ada/Eiffel range types or generic typedef syntax (like perl6 subset or Ada type)	Spaces	2018-03-04 01:12:32	2018-03-04 01:38:55	2647c35799
734d028d76ac5a45a690f5fbda33f9b4	Yes	5			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn								3	Book not keeping up with latest developments	4	Certain functions are documented with words that takes time to understand	0	5	3	Examples that are way too complex for novices	0			0			5	D Forum	#d on IRC			My colleagues			5	No, the D.Learn forum is fine.	no	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development										Science/Research											Gentoo				I compiled D from source		2.079.0 (nightly)		2.077.1 (latest LDC)	2.076.1 (static foreach)											GDC	Linux									dmd		dub	make				reggae	Not applicable	vim / neovim		3	0				5		It's awesome, but I miss a few features	() @trusted { foo() } ()	tuples														a, b = 0, 1; a, b = foo();  a = 0 if foo() == false else bar()	No	4		Yes	3	6	6						Reliance on the GC			@safe for all modules	@nogc	DIP1000			More/better container classes				@nogc containers	better json serialization			std.database											std.bitmanip	std.compiler					std.csv		std.demangle											std.mathspecial		std.outbuffer												std.typecons				std.uuid		std.windows	std.xml			an easy way to get a fd from Socket	No, but to other D repositories			Finding good issues to get started	Time is my only enemy		No roadmap										Non-perfect C++ integration				@safe-ty problems / missing DIP1000		Nothing								Poor debugging	dub					Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects				No good point for learning D	Few transition guides from programming language Y					Lack of progress on DIPs				code.dlang is very difficult to replicate and improve	fast, high level	Hacker News	Andrei's book	Vibe						Performance							Templates					Garbage collection					std.concurrency & std.process		Functional programming paradigm			opt-in GC and runtime										Reproducible builds				Runnable examples on dlang.org											multi paradigm, doesn't force me, allows to abstract, good ratio quality / noise for code and libraries	integration with C/C++, is nothing new and could be great if I can embed C/C++ blocks directly	Maybe, I'm still a student	Thank you, D embodies my passion for CS	Spaces	2018-03-04 00:48:29	2018-03-04 01:10:47	ac602e2f75
5fbdbf48d0db57736d66b33a6eb49cac	No, I have stopped using D						Language specification										3	dub's documentation at the time was pretty shit	4		1	4	4		0			0			4	D Forum							4	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely		Desktop applications											Official Windows .exe installer							Arch Linux									2.078.3 (latest)													SDC	Linux		Windows				WebAssembly					dub						No	vim / neovim		5	1	4			4		It's ok	D's syntax not being expression based. E.g. you can't return values from loops or switches.  The syntax of switch statements is also just horrible; it should be deprecated and replaced by something akin to rust's match statement, or even	tuples			named arguments			multiple alias this	UDAs for attributes								No	5		Yes	3	6	5	Nothing - Phobos (Standard Library) is great								@safe for all modules	@nogc	DIP1000								better json serialization	better xml serialization																						std.digest																						std.system	std.traits					std.uuid						std.stdio not being named std.io	No, and I don't plan to				Time is my only enemy															Issues with language feature X (e.g. shared, @property)			Nothing						Nothing													C behavior without warning (e.g. signed to unsigned comparisons)																	Lack of progress on DIPs					Metaprogramming, C++++, ergonomic	Don't remember	Seemed like (and is) an obvious compared to C++	phobos	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta					UFCS			Simple, but powerful module system	Templates					Garbage collection					std.concurrency & std.process				static foreach		DMD as a DUB library	Templated vector operations	Compile-time format string checking		stdx.checkedint			Deprecation of the integral promotion for unary operators												Colorized error messages		Cross-compilation with LDC	newCTFE				Maybe, I'm still a student		Tabs	2018-03-03 23:11:52	2018-03-04 00:39:39	861b1225b3
d2a5e6ded6097c3eee9665aa30aadd15	No, I have stopped using D		I left studies and worked in production for companies as a software engineer.		"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli							4	How to manage memory with the garbage collector disabled and how to use some of the collections library code.	3	It lacked code examples when I last used D.	1	4	4	The information flow can be very densely packed and it's difficult to discover up to date information on certain features of the language.	0			1	Mostly great content	The blog could be improved with more beginner level materials.	3	D Forum							4	Yes, I like StackOverflow.	Nope. I think StackOverflow works well enough and can be found by most developers.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development				Security	Game Development															Homebrew								2.078.3 (latest)							2.071.2 (import access check fixes)						LDC	Linux	macOS										dub						No	Sublime		3	0			I prefer GitHub or GitLab. I've never used Bugzilla before.	4		It's awesome, but I miss a few features		tuples	string interpolation		named arguments												No	4		Yes, but only for some projects	4	4	4					Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc			More -betterC support	More/better container classes				@nogc containers	better json serialization			std.database																								stdx.checkedint		std.functional																													No, but I want to to				Time is my only enemy													Dependence of some language features + Phobos (Standard Library) on the GC					Nothing						Nothing												Wrong defaults (e.g. not @safe by default)							Little marketing / no evangelists	Few showcases / flagship projects							Nothing.								Too much baggage.	In programming language forums.	I've never felt comfortable with C++ and C for manual memory management. I wanted a language which would let me experiment with it high performance code and learn manual memory management strategies as I worked.	The compile time packrat parser generator.	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax					Templates		Built-in unittests		@safe strings + arrays								Functional programming paradigm			opt-in GC and runtime																									High performance, cross-compiled native code, and generics!	GC requirements in the runtime.	Maybe, I'm still a student		Meh, I don't care.	2018-03-04 00:07:53	2018-03-04 00:32:28	e91ee1a786
c79f98c019b24d6460324764d03ecfed	No, I have stopped using D		External Library support very slim. No practical need Really dislike the documentation formatting style. Makes it challenging to read even though the information is simple		"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			3	Really want to like it.  Compiler errors can be too cryptic.  Every message from the compiler should be helpful, understandable and make sense. See clang Handling passing arguments gets annoyingly complicated with immmutable choices  Want easier automation of functionality in custom types  Double arg lists took getting used to 	3	The formatting is overly complex and offers so much detail it can be hard to decifer the actual call signature. Lack of examples, especially for d centric idioms	5	4	4		1	4		1	Huge variance in quality		3								3	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications												Official tarballs														2.079.0 (nightly)														DMD	Linux									dmd								No	vim / neovim		3	0				3	Clang level human understandable error messages	It's ok	Raw pointers Treat null as optional to allow chaining nullability checks, dereferencing and handling Ranges as types instead of syntactic sugar		string interpolation		named arguments	assert diagnostics							UFCS for local symbols				No	4		Yes	2	2	2					Old modules like std.outbuffer or std.socket		Fear to do breaking changes	Call patterns feel non standard. Difficult to chain calls because of type mutibility choices.						More/better container classes	Better chainability				better json serialization		std.graph	std.database							Repository interfaces																																				std.traits											Modernize its flow. It feels very functional in areas that should be oo	No, and I don't plan to										I am just starting to learn D													Poor Phobos (Standard Library) documentation		Poor compiler error messages				Non-enterprise IDE support	Poor debugging					Difficult to build using external libraries										Fewer third-party libraries than other language						Lack of good examples / tutorials					Too much low-level focus (C/C++)							Ambitious, clever, overloaded				Ranges & std.algorithm	Mixin							UFCS						Built-in unittests																Compile-time format string checking				toString with output ranges						Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org															Meh, I don't care.	2018-03-03 22:51:27	2018-03-03 23:27:12	f90db3c094
b10e6cb5bec3325e2a9691f29d16e7b9	Yes	4				tour.dlang.org		#d IRC on freenode	D Forum: Learn								4	Lack of support at the time in Fedora. DVM wasn't working and they didn't package even the llvm front wnd	4	Nothing really, more examples is always good especially with edge cases but it's really good as is	3	4	4		1	4		1	Always great content		3	D Forum	#d on IRC						4	No, improve DFeed.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications																						Docker		I compiled D from source			2.078.3 (latest)													DMD	Linux									dmd	rdmd	dub			meson			Not applicable		Kakoune	3	0			Laziness and most issues I find have already been filed	5		It's awesome - keep it as is																				Yes	3	5	4					Old modules like std.outbuffer or std.socket				@safe for all modules	@nogc			More -betterC support	More/better container classes				@nogc containers					std.i18n	std.benchmark																		std.digest				stdx.checkedint																					std.uni	std.uri		std.uuid							No, but I want to to			Finding good issues to get started	Time is my only enemy																	Lack of a good version manager, DVM is not really maintained anymore so I have to use docker 	Nothing						Nothing																																			Still beating C++20	I jokingly goodled dlang thinking that CPP should have been called it	Looked interesting	The lua template one!	Ranges & std.algorithm					Performance	Native interoperability with C					Simple, but powerful module system	Templates					Garbage collection						Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library									Reproducible builds									vibe.d 0.8						It's fun and I like comparing it to my rust programs 	Probably I don't care much for better C mainly because I don't use it	Maybe, I'm still a student		Meh, I don't care.	2018-03-03 22:42:42	2018-03-03 22:55:18	a8b74245fb
8547ebe2b8025e6bbc0ef4c07eaba4d4	No, I have stopped using D		It seemed to much effort/unstable to try and use with work's existing cross platform C++ codebase.		"The D Programming Language" by Andrei Alexandrescu												4	1. Poor debugger support 2. API documentation particularly return types when using pipeline functions being useless.  3. Compile errors showing C(B(A())) instead of the A.B.C that I wrote.  4. No tools to help debug compile time generated or executed code. 	3	Lack of documentation for return types. 	5	4	4	The forums seemed to be poisoned with people arguing about the same old stuff. Really just want to see posts by Walter and Aandrei 	0			0			2					My colleagues			3	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely		Desktop applications											Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub					In house build tool	No	Visual Studio Code		3	1	4			3	Output files with mixin code filled in	It's ok	template blocks, these seem confusing confusing from C++															async/await	No	3		Yes	2	2	2				Poor naming choices	Old modules like std.outbuffer or std.socket				@safe for all modules	@nogc				More/better container classes				@nogc containers	better json serialization							std.color	std.image	std.drawing (2D)				std.bigint			std.complex											stdx.checkedint																															No, but to other D repositories					Personal laziness											Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC								Poor compiler error messages					Poor debugging		DLL support on Windows								Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library									Lack of good examples / tutorials											Defaults to 32bit builds on Windows. 	Powerful, under baked 	Slashdot	I wanted a better C++	std.algorithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance			UFCS		Closeness to C/C++											import("myfile")		Multi-paradigm																	Automatic compilation of imports (dmd -i)												Concise compiled and efficient language. 	 integer overflows	Maybe, I miss accountability at the moment		Spaces	2018-03-03 21:19:25	2018-03-03 22:40:20	9ab5d74484
f2435d0fa3e7c9addebda0ab8f48fa95	No, I have stopped using D		Rust			tour.dlang.org											2	weird keywords	1	"documentation"	0	1	1	Looks like a website from the 80s	1	3	its okay	0			0	D Forum	#d on IRC						1	Yes, I like StackOverflow.		Yes, it was hard to find out why.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications				Game Development							Official Windows .exe installer																								2.070.2 (alias as a function literal)					DMD	Linux	macOS	Windows							dmd								No	Visual Studio Code		2	0			No code of conduct and I don't want white men to shout at me for existing	3	For it to compile a better language	I have a very hard time with D's syntax	"""enum"""	tuples	string interpolation	in-place struct initialization													No	1	it's kind of a meme?	Yes	0	2	3		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc		Performance		More/better container classes					better json serialization	better xml serialization					std.decimal					overuse of ufcs											std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger		std.getopt			std.mathspecial							std.regex		std.socket					std.typecons	std.uni	std.uri			std.variant			std.zlib		delete	No, and I don't plan to							D community						Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance			Non-enterprise IDE support		dub	DLL support on Windows		D's dependence on a large and bulky runtime				Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow			No good point for learning D				Too much low-level focus (C/C++)			Lack of focus at the management level	Wrong decisions at the management level		h	good idea but terrible execution (5 but whatever)	C	Bored	none			CTFE (static if, static foreach)														@safe strings + arrays			Contracts					Functional programming paradigm		static foreach	opt-in GC and runtime												DMD support for AVX2											newCTFE		nothing	enum	No, I don't like the management of the DLF	scrap D, take all the good ideas and make E from scratch	Tabs	2018-03-03 22:24:18	2018-03-03 22:35:59	10bc979106
ce182cead0b0ada56d73412ec808e95c	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms	lhs-blog.info	5	conception templates	4		2	5	5	Forum underdeveloped.	1	4	Few examples. We need more applicable "in life"	1	Huge variance in quality		3	D Forum		#d on StackOverflow		My colleagues		vk.com/vk_dlang	4	Yes, I like StackOverflow.	No. It's normal	Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications			Security		Big Data		Machine Learning		Science/Research		Official Windows .exe installer		Official .rpm packages	Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows		Android		WebAssembly			dmd	rdmd	dub						Yes, I work with D part time	Intellij		3	0			Absence of necessity.	4		It's ok	No						language binding to X						UFCS for local symbols				Yes, but only for experimenting/testing/debugging	4		Yes	5	4	4											DIP1000		More -betterC support				std.eventloop		better json serialization	better xml serialization	std.graph	std.database					std.image	std.drawing (2D)							std.complex	std.concurrency					std.demangle				stdx.allocator									std.outbuffer													std.uni										No, but I want to to						No roadmap						Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							Small popularization and community	Nice write right	A friend told	It's easy to do complicated things on it.	Phobos, dlib	Ranges & std.algorithm	Mixin						Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests																																vibe.d 0.8						Its beauty and clarity.		No, I'm already donating my free time		Tabs	2018-03-03 21:54:21	2018-03-03 22:31:16	af6a6dc307
3d6d9dede623f3257770516477d7f2ac	No, I have never used D			Had several attempts to start using it, using C++ instead for side projects.		tour.dlang.org											4		5		0	2	2	The language and the site should be more aimed for simpler tasks, so the community can build new software using it. Everybody knows it's very good for cool esoteric usages, like CTFE or template metaprogramming, but the large amount of people just want to write their basic shit in some nice language, and there's no real incentive to doing this in D compared to Python/c++/js/java or w/e they know right now	1	4	It's been like 5-6 months since I did it	0			4						I don't need help		3	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely									Machine Learning		Science/Research									Arch Linux									2.078.3 (latest)													LDC	Linux													cmake				No	Sublime		1	0				5		It's ok							language binding to X										Yes, but only for experimenting/testing/debugging	5		Yes, but only for some projects	0	2	3						Reliance on the GC				@nogc		Performance	More -betterC support	More/better container classes		I'm happy as is.																																																																																																																																																																																									2018-03-03 22:18:08	2018-03-03 22:27:44	a62af0d97b
d2bf265904865a027c0fb35d15ef0428	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										4	When I began, standard build tools like dub were not around and the compiler gave difficult to comprehend errors without line numbers.  Things have improved greatly since then.	4	A quick way of knowing what is in, and what is not in the standard library.  Perhaps a brief table of contents.	1	3	4	While informative, the site is not as visually polished as something like "spring.io".  Functionally this is not important, but having a polished website helps impress people new to the language and capture their attention.	0			1	Mostly great content		2	D Forum							2	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development					Game Development					Science/Research					Official .deb packages													2.078.3 (latest)													DMD	Linux											dub						No	emacs		3	0				4	In Linux, failing unittests often only report line numbers as "??".  A good workaround, however, is to use the "fluent-asserts" package.	It's ok	I feel the language is drifting slightly away from the idea of "the simple thing should be the correct thing".  For even basic functions, knowing which annotations to add, such as @nogc, pure, nothrow, @safe, is a bit confusing.  Also, it feels inconsistent that some of these use "@" and others do not.  Another side-issue is seemingly inconsistency between template "if" conditions for methods of templated classes.  An "if" condition can only be added to a method which itself has additional template parameters, but no "if" can be written on methods that are dependent on the template parameters of the class itself.  A "static if" can be used instead, but it seems odd that one can use "if" conditions in some places and not others.					assert diagnostics											No	4		Yes	4	4	4				Poor naming choices										More/better container classes		I'm happy as is.																			std.complex						std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional				std.mathspecial	std.meta	std.outbuffer	std.parallelism							std.stdint				std.typecons					std.variant	std.windows				It is unclear what code is representative of modern good practices and what code is not.  A more complete style guide could also help to fill that void as well.	No, but I want to to			Finding good issues to get started	Time is my only enemy				High barrier to entry				Nothing										Nothing						Nothing										Attribute bloat							Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects							Nothing.							Lack of a clear argument to make to potentially interested tech enthusiasts who are considering Go and Rust as well.	high-level, low-level, performant	After completing very frustratingly complex C++ project, and seeing the ever increasing complexity of C++11, I simply searched on Google for "alternatives to C++". 	I wanted a way to produce highly efficient and performant software in a clear fashion.  It may seem trivial, but little things like built-in unittest support, pre-conditions, post-conditions, and class-invariants help a lot for writing software you can trust.	Derelict						Performance		Readable syntax				Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters		Garbage collection		Contracts				Multi-paradigm																		Runnable examples on dlang.org											I want to see a better future for software development.  I think overcomplexity has prevented systems level languages from being secure and able to deliver software in reasonable time-frames.  But the need for efficient and powerful software is greater than ever. 	Automatic conversion of byte expressions, like "a * b" into integer expressions.	Yes, just tell me how		Spaces	2018-03-03 19:37:33	2018-03-03 22:21:24	3515ef41cb
2560e6f8f01bdfa1fa662669d8238d6a	No, I have stopped using D		I was driven away by a combination of things I hate about the language itself, seemingly broken tooling, and sub-par documentation.			tour.dlang.org	Language specification										2	Seemingly broken tooling.	1	Everything.	3	2	2	Terrible code examples using confusing language features.	1	3		0			0						I don't need help		3	I don't care.		No.	Go ahead and break code, even for the 	Rarely												None.	Official Windows .exe installer										Choco																		None.	LDC	Linux		Windows		Android												None.	Not applicable		Textadept.	3	0				3	Better error messages and less memory usage.	It needs serious work	Pretty much everything, the only part of the C++ syntax that it fixes is array type syntax.	tuples		in-place struct initialization												algebraic data types, pattern 	No	3		No	3	0	2		Auto-decoding for strings		Poor naming choices		Reliance on the GC						Performance		More/better container classes				@nogc containers																std.compiler		std.concurrency												std.functional			std.math	std.mathspecial	std.meta	std.outbuffer	std.parallelism					std.signals		std.stdint					std.uni									Remove the second std in std.stdio.	No, but I want to to									I don't use D				Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough									Poor Phobos (Standard Library) documentation		Poor compiler error messages						dub	DLL support on Windows					Auto-decoding of strings		Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library		Nothing											Nothing.							Mutable by default, glob import by default.	Wrong by default.	Can't remember.	The tour mostly.													Simple, but powerful module system																																Deprecation of the comma operator				Colorized error messages					Nothing.	The lack of algebraic data types and pattern matching.	No, I'm not interested into D		Tabs	2018-03-03 21:43:24	2018-03-03 22:14:32	a6b360b4d2
627f2c59d779bdb92d6ce9a08e081d96	Yes	4					Language specification	#d IRC on freenode		"Programming in D" by Ali Çehreli							3	compiler bugs and weird compiler messages	5		0	5	5		0			1	Mostly great content	It is a pain to use the archive of the DBlog	5	D Forum	#d on IRC						5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications											Official Windows .exe installer					Official dlang.org/install.sh script	d-apt Debian/Ubuntu							I compiled D from source			2.078.3 (latest)													DMD	Linux	macOS	Windows	BSD-variant	Android	iOS	WebAssembly	Embedded		dmd	rdmd	dub						Yes, I work with D part time	Visual Studio Code		5	1	3			3	bugs fixed	It's awesome, but I miss a few features		tuples			named arguments			multiple alias this						Static inheritance			Yes, but only for experimenting/testing/debugging	4		Yes	3	5	5		Auto-decoding for strings				Reliance on the GC			@safe for all modules	@nogc	DIP1000							@nogc containers														std.bigint			std.complex				std.csv							stdx.checkedint				std.json	std.math	std.mathspecial		std.outbuffer	std.parallelism																std.variant	std.windows	std.xml		std.zip		No, but I want to to				Time is my only enemy	Personal laziness									Missing language feature X / not moving fast enough						@safe-ty problems / missing DIP1000					Poor compiler error messages		compiler bugs							D's dependence on a large and bulky runtime			Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language													Lack of progress on DIPs					performant and comfortable	wikipedia	wanted a languages that compiles to binaries and is not cumbersome at the same time	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta		Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays			Contracts		import("myfile")					static foreach															Runnable examples on dlang.org		Deprecation of the comma operator						Cross-compilation with LDC	newCTFE		comfortable to write but low-level at the same time	auto-decoding strings	Maybe, I miss accountability at the moment		Tabs	2018-03-03 20:45:06	2018-03-03 21:52:39	9540fa7d35
7c3be6e7183a8ecc85ab8be26501df7e	No, I have stopped using D		Became impatient		"The D Programming Language" by Andrei Alexandrescu		Language specification	#d IRC on freenode									4	Compiler bugs, poor debugging experience	3	Consistency, and it's not up to date with modern language	0	4	4	It's fine. Maybe a little more layout polish? It's a little awkward that you need to scroll to see key info. For example, a particularly noisy section is cut off by the bottom of the screen on my monitor.	0			0			4	D Forum	#d on IRC	#d on StackOverflow					3	Yes, I like StackOverflow.	SO needs more D content, whether it is preferred or otherwise. It's a perception thing.	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily				DevOps		Game Development		Embedded Systems					Official Windows .exe installer		Official .rpm packages				d-apt Debian/Ubuntu	Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows		Android			Embedded		dmd	rdmd		make				MSBuild	No	Visual Studio + VisualD		3	1	3	Bugzilla feels like 1998		4	Compiler has become very slow as D encourages more and more meta.	It's ok	Too many attributes (defaults are wrong). I'm getting bored of paren spam. Explicit casting is a chore (no implicit conversion calling functions/ctors).	tuples						multiple alias this						Static inheritance		DIP1000, language-supported ARC, C++ style expression tuple expansion (expr(x, y, Tuple)...)	Yes, but only for experimenting/testing/debugging	3	It feels poorly specified compared to C++, as if a lot of spec is defined by DMD's implementation.	Yes	2	3	3				Poor naming choices		Reliance on the GC			@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes	More batteries included			@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark		std.color	std.image	std.drawing (2D)	std.plot	strings/utf/ranges/algorithms are all a bit randomly distributed. Hard to know which module is responsible for which jobs.																		std.functional	std.getopt			std.mathspecial	std.meta	std.outbuffer						std.signals											std.variant					GC must be truly optional, and support modern language (DIP1000, etc).	Yes	3	Moved to a point, then stalled.												Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000	Incomplete/incorrect Microsoft debuginfo (CV8/PDB)						Incomplete/incorrect Microsoft debuginfo (CV8/PDB)		Non-enterprise IDE support	Poor debugging		DLL support on Windows	Missing support for platform X						Virtual by default	Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow									Lack of progress on DIPs				D needs to convince C++ programmers that there is little risk to being integrated into existing C++ workflows, allowing for adoption/migration. Naturally, that first point must also be true!	Potential, tardy, impatience	TDPL	C++ must die.	Maybe the biggest ecosystem problem?!	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C		UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests				Inline assembler					Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC			toString with output ranges						Automatic compilation of imports (dmd -i)			Deprecation of the comma operator				Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		I hate C++	No implicit conversion == noisy code (lots of casts), can't rvalue -> ref, virtual-by-default.	Yes, but only for a specific project		Tabs	2018-03-03 19:33:53	2018-03-03 21:05:28	192e6568f2
f11206f0ae1c133739760b51c6be5ef1	Yes	4														Making projects with it.	3	Lack of good documentation and examples.	3	No examples, or edge cases are sometimes not explained.	5	4	5		1	4	The code examples are a bit complex.	0			3	D Forum		#d on StackOverflow		My colleagues			3	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications				Game Development							Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux	macOS	Windows	BSD-variant	Android	iOS	WebAssembly	Embedded				dub						Not applicable	Visual Studio Code		2	0				4		It's awesome, but I miss a few features	Kotlin has a few nice features such as how they handle getters and setters as well as their if/else, try/catch, and when blocks can be evaluated as values (eg. return try { foo.bar } catch (e: Exception) { 5 };)	tuples			named arguments		language binding to X	multiple alias this	UDAs for attributes		static break	writing files at compile-time	UFCS for local symbols	Static inheritance		Kotlin's handling of null is nice: every type can be nullable, but it becomes a different type (eg. Int? is the nullable int type).	No	3		Yes	2	4	4				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database		std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)		Most things in the std return duplicate arrays, but some methods (such as sorting) affect the array in place.	std.base64		std.bitmanip	std.compiler							std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt			std.mathspecial	std.meta	std.outbuffer		std.path	std.process					std.stdint				std.typecons	std.uni	std.uri			std.variant	std.windows		std.zlib	std.zip	All methods for arrays either all return new arrays or affect the array in place, but not a mix of either. Everything should be consistent.	No, but to other D repositories			Finding good issues to get started	Time is my only enemy	Personal laziness	No roadmap		High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows	Missing support for platform X	D's dependence on a large and bulky runtime				Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials	No good point for learning D				Too much low-level focus (C/C++)							Performant, clean, immature	/r/programming	The syntax and languages features looked nice.			Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler		Debug attribute			Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations	Compile-time format string checking					Deprecation of the integral promotion for unary operators		Reproducible builds			Automatic compilation of imports (dmd -i)			Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)		Colorized error messages					It's performance and nice languages features. Object oriented + functional as a mixture works really nicely in D.	Mutable by default and automatic promotion of numeric types (eg. int -> long done implicitly)	Maybe, I'm still a student		Spaces	2018-03-03 20:36:40	2018-03-03 21:04:07	495d0bf214
1d16c7279ff0a83a547bc6d34556c0da	No, I have never used D			Doesn't have any standout features that attracts me																	0	3	3	Lots of stuff I don't care about, like company logos. Cluttered 	0			0			2									I don't care.			Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.			Desktop applications																																											Windows															No	Intellij			0																																																																																																																																																																																																																																						2018-03-03 20:49:41	2018-03-03 20:54:56	abe754dd10
c668fa103f545bb79e513781b84a1627	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							5		4		0	4	4		0			1	Mostly great content		5	D Forum			dlang.slack.com				5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly								Embedded Systems			Science/Research									Arch Linux									2.078.3 (latest)													GDC	Linux							Embedded		dmd		dub			meson			No	Visual Studio Code		4	1	5			5		It's awesome, but I miss a few features		tuples			named arguments	assert diagnostics			UDAs for attributes								Yes, but only for experimenting/testing/debugging	4		Yes	2	5	5		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket		Fear to do breaking changes			@nogc	DIP1000		More -betterC support				std.eventloop	@nogc containers	better json serialization				std.i18n																				std.encoding											std.outbuffer						std.signals				std.system													Yes	4														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)					@safe-ty problems / missing DIP1000									Non-enterprise IDE support	Poor debugging	dub			D's dependence on a large and bulky runtime							C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library																Lack of progress on DIPs									Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C			-betterC		Simple, but powerful module system		Built-in documentation (Ddoc)										Multi-paradigm				opt-in GC and runtime			Compile-time format string checking				toString with output ranges									Deprecation of the comma operator		New third-party applications (e.g. Tilix)											Spaces	2018-03-03 20:20:42	2018-03-03 20:48:11	8b709e3f36
2291d2131f835b548dfd047afa45edd2	No, I have never used D			Not widely adopted, poor reputation		tour.dlang.org											4		3		3	4	5		1	4		1	Mostly great content		3						I don't need help		3	I don't care.		No.	Go ahead and break code, even for the 	Rarely								Embedded Systems		Kernel Development						Official .deb packages													2.078.3 (latest)													DMD	Linux				Android	iOS	WebAssembly			dmd		dub						No	Visual Studio Code		3	0				4		I have a very hard time with D's syntax	Attribute mess		string interpolation														No	3		Yes	3	5	5		Auto-decoding for strings				Reliance on the GC				@nogc							std.eventloop	@nogc containers																																																											No, and I don't plan to									I don't use D				Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance			Non-enterprise IDE support								Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)							Little marketing / no evangelists					No good point for learning D				Too much low-level focus (C/C++)				Wrong decisions at the management level			a missed opportunity	Reddit													Closeness to C/C++	Simple, but powerful module system																																													Tabs	2018-03-03 20:16:44	2018-03-03 20:31:25	6680b660dd
3fb679da9d5ebea389f83011cf772b4f	No, I have stopped using D		My code relied on D1/tango, porting to D2 was too difficult.													Learning to Tango with D	3	Lots of compiler bugs. Later, when I learned D2, a lack of documentation. This has improved since.	3	It's often hard to figure out the right way to do simple things. For example, string manipulation is split between string-specific functions and ranges - if you use ranges it gets very difficult to end up with a string again.	3	4	4		0			1	Huge variance in quality	Part (b) wasn't a fair question. There were literally no middle options.	3									No, the D.Learn forum is fine.	IRC	No.	Please don't ever break code.	Rarely	Web development																			Arch Linux																							Linux	macOS	Windows	BSD-variant	Android	iOS	WebAssembly	Embedded										No	vim / neovim		3	1	3	Requires sign up with another account, makes it a lot of effort to report bugs. You need at least three accounts to be part of the D community - GitHub, Bugzilla, Email (for newsgroups).																																																																																																																																																																																																																																				2018-03-03 19:05:08	2018-03-03 20:00:17	f185f953b2
e1edf6ad85342f4bd615dd4e03bdc3c6	Yes	5				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							5		4	Needs more examples for beginners.	0	5	5		1	5		1	Mostly great content	Needs more content in general.	3											No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly		Desktop applications	IoT					Embedded Systems			Science/Research								d-apt Debian/Ubuntu											2.077.1 (latest LDC)													Linux				Android			Embedded				dub						No	emacs		4	0				5		It's awesome, but I miss a few features		tuples		in-place struct initialization	named arguments					@mutable in immutable							No	4		Yes		5	4				Poor naming choices		Reliance on the GC				@nogc			More -betterC support	More/better container classes				@nogc containers		better xml serialization		std.database						std.drawing (2D)																																																	No, and I don't plan to										I am just starting to learn D							Dependence of some language features + Phobos (Standard Library) on the GC																Missing support for platform X	D's dependence on a large and bulky runtime											Fewer third-party libraries than other language																		Almost perfect C++	internet	I was looking for a C++ with better syntax and meta programming features.			Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system			Built-in unittests		@safe strings + arrays							Multi-paradigm			static foreach	opt-in GC and runtime																											Maybe, I miss accountability at the moment	I hope to use D for embedded programming one day (bare metal, MCU level stuff).	Spaces	2018-03-03 19:13:13	2018-03-03 19:33:53	684c3270ec
11f4b6e5a8a6176ddba824c6e5f4d591	Yes	4					Language specification			"Programming in D" by Ali Çehreli							4	New stuff	4	Readability	1	5	5	Discord server	1	4	 	0			2		#d on IRC						4	Yes, I like StackOverflow.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly		Desktop applications																		Arch Linux									2.078.3 (latest)													DMD	Linux	macOS	Windows		Android		WebAssembly	Embedded		dmd		dub						No	Visual Studio Code		3	0				4		It's awesome - keep it as is																				Yes	5	3	2						Reliance on the GC						Performance									std.graph																					std.digest																							std.traits												No, but I want to to										I am just starting to learn D		Nothing														Poor GC implementation / performance			Non-enterprise IDE support							Nothing											Little marketing / no evangelists		Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials				Nothing.							Marketing	C++ but better	Reddit	Syntax		Ranges & std.algorithm					Performance					Closeness to C/C++													Multi-paradigm				opt-in GC and runtime							toString with output ranges																		Community		Yes, just tell me how		Tabs	2018-03-03 19:12:59	2018-03-03 19:25:56	cb092ce998
2cecc8ff2a944a3c0d580dc9c0f99715	No, I have stopped using D		Lack of library maturity		"The D Programming Language" by Andrei Alexandrescu											Pluralsight D course	3	New syntax for generics and the like	3	Its incompleteness	0	3	3	Not sure	0			0			4			#d on StackOverflow					3	Yes, I like StackOverflow.	No	No.	Please don't ever break code.	Rarely		Desktop applications									Science/Research		Official Windows .exe installer																2.078.3 (latest)													DMD										dmd								No	Visual Studio + VisualD		1	0			Nothing	2	Distributed compilation	It's ok	Not sure	tuples	string interpolation														No	3	Not sure	Yes	1	0	1				Poor naming choices											A .NET-like or Java-like API														XML	All of them because the API is C-like																				std.json					std.parallelism	std.path	std.process			std.signals							std.uni	std.uri	std.utf	std.uuid	std.variant			std.zlib	std.zip		No, and I don't plan to									I don't use D						Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation		Poor compiler error messages					Poor debugging						Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X		No good point for learning D			Nothing.								Very niche language	Don't remember	To see if it's worth using	Don't hav eone		Mixin																									static foreach																										Nothing	Naming in Phobos	No, I'm not interested into D	No that's it	Spaces	2018-03-03 19:12:36	2018-03-03 19:20:17	26f4654eb1
edb9bce0b709832521af26a09e828cad	Yes	4					Language specification		D Forum: Learn								3	No good video tutorials	4	Poor consistency	0	5	5		1	3		1	Mostly great content	There is a lack of deep dives into some advanced topics. With D you can solve difficult problems easier or make impossible possible(binderoo rapid iteration framework)	5	D Forum							5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely													Official Windows .exe installer																2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows							dmd		dub						Not applicable	Visual Studio Code		3	0				4	Incremental builds	It's awesome - keep it as is																				Yes	3	4	5	Nothing - Phobos (Standard Library) is great											Performance		More/better container classes					better json serialization					std.benchmark																																																				Leave extra functionality to external libraries. They can change faster than std	No, but I want to to								High barrier to entry		I am just starting to learn D											The whole package doesn't feel complete. A bunch of 50%-85% solutions		Poor Phobos (Standard Library) documentation						Non-enterprise IDE support	Poor debugging				D's dependence on a large and bulky runtime											Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages				Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials		Few transition guides from programming language Y		Nothing.							D can be used for lots of things but current in current state it does nothing exceptionally	Could be amazing	Googled for new programming languages	Because I can	The one I will write... maybe. The second is std.alocators because it allows other amazing things to happen	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests			Garbage collection						Multi-paradigm				opt-in GC and runtime	DMD as a DUB library								Back referencing of mangled symbols					Runnable examples on dlang.org									newCTFE		C++	Lack of manpower	Yes, but only for a specific project		Meh, I don't care.	2018-03-03 18:17:49	2018-03-03 18:50:22	ad7bb0ed41
6c0554348eba62047cf645b31b378b3a	No, I have never used D			Lack of documentation, books and killer apps						"Programming in D" by Ali Çehreli							2	Updated documentation	2	More examples please	1	2	2	Tutorials	0			0			2	D Forum	#d on IRC	#d on StackOverflow	dlang.slack.com	My colleagues			3	No, the D.Learn forum is fine.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development			DevOps																Arch Linux									2.078.3 (latest)													DMD	Linux											dub						Not applicable	Visual Studio Code		2	0				3		It's ok		tuples	string interpolation		named arguments												No	3		No	3	3	3				Poor naming choices			Fear to do breaking changes							More/better container classes			std.eventloop		better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)								std.concurrency	std.container	std.conv	std.csv			std.digest						std.functional																													No, but I want to to			Finding good issues to get started	Time is my only enemy		No roadmap		High barrier to entry		I am just starting to learn D																			Non-enterprise IDE support	Poor debugging									Virtual by default			Ugly bits of the standard library				Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects		Missing tutorials / documentation in spoken language X						Too much low-level focus (C/C++)			Lack of focus at the management level	Wrong decisions at the management level			Too busy to be next C++, instead of focusing solely on the language success itself.																																																													2018-03-03 18:35:43	2018-03-03 18:46:04	c3207f3d63
ca11f882823e29860ce68fd1b70b138b	No, I have stopped using D		Only used for personal projects. Unfortunately, not relevant at workplace.		"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							5	None. Andrei  A's book was fantastic introduction.	4	Some documentation was sparse, although this was several years ago.	0	5	5	Website is a bit slow sometimes.	0			0			5						I don't need help			I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely												Internal applications/tools/automation	Official Windows .exe installer		Official .rpm packages																								2.068.2 (last C++ release)			DMD	Linux		Windows										make					No	vim / neovim		5	0				5		It's awesome - keep it as is																				Yes	3	5	2						Reliance on the GC	Fear to do breaking changes									I'm happy as is.																	std.bitmanip	std.compiler	std.complex	std.concurrency		std.conv	std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional		std.json		std.mathspecial	std.meta	std.outbuffer	std.parallelism	std.path	std.process			std.signals	std.socket	std.stdint			std.traits	std.typecons		std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to								High barrier to entry														Nothing							Non-enterprise IDE support													Ugly bits of the standard library				Less corporate support (including jobs) than other languages	Little marketing / no evangelists								Nothing.								Elegant, practical, expressive	Stumbled across Andrei's book at bookstore, so well-written I bought it and read the whole thing.	Interest, desire for a language that addresses C++'s warts.		Ranges & std.algorithm					Performance		Readable syntax				Simple, but powerful module system	Templates		Built-in unittests													opt-in GC and runtime																									Personal interest.		Maybe, I miss accountability at the moment		Meh, I don't care.	2018-03-03 18:21:22	2018-03-03 18:44:13	a4b117486b
b98679ac8b05d53c2e688ee678dfa6b3	No, I have stopped using D		D was a bit overkill for my use-case; I mostly write short one-off data processing scripts in Python		"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		3	A lot of the documentation that existed at the time I started learning D (~2012) was focused at people coming from another compiled language like C, etc. I came from a mixture of Java, Perl, MATLAB, Visual Basic, and self-taught Python. 	3	What I missed the most from the Phobos documentation was how to connect pieces together. From the forums I got the impression that general attitude was something like "people shouldn't mess around with D if they don't already know how to use a Red-Black tree", but a few use-case examples in the documentation, and some hints on how to connect the stuff in std.algorithm with std.range, etc. would be nice for newcomers not used to these abstractions.	0	4	4	First impression is a bit messy, but I do like the interactive code thingy	0			1	Mostly great content	I would like more content in general	3	D Forum							5	I don't care.	I prefer interaction via the Forums. It makes it easy to go back and refer to old answers	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely							Big Data		Machine Learning		Science/Research		Official Windows .exe installer	Official tarballs	Official .rpm packages	Official .deb packages			d-apt Debian/Ubuntu							I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows							dmd	rdmd	dub						Yes, I work with D part time	vim / neovim		3	0			My code is quite basic, rarely  (if ever) encounter any issues that aren't faults in my own code	5		It's awesome - keep it as is																				Yes	2	3	3	Nothing - Phobos (Standard Library) is great											Performance				I'm happy as is.						std.database									std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container				std.demangle	std.digest										std.mathspecial	std.meta	std.outbuffer						std.signals		std.stdint			std.traits		std.uni										No, but to other D repositories								High barrier to entry		I am just starting to learn D		Nothing											Poor Phobos (Standard Library) documentation		Poor compiler error messages			Nothing								Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials	No good point for learning D	Few transition guides from programming language Y		Nothing.	Too much low-level focus (C/C++)						I really like D and the thoughts and concepts underlying the design of the language, it appeals to me. However, as I mainly write smallish and very specific data analysis tools, I rarely find the extra time it takes me to write something in D worthwhile compared to e.g. Python	Compiled, C-like, fun	Probably on Reddit sometime in 2011	I was focusing a lot on high-throughput analysis applications in Bioinformatics/statistics and was hungry for learning more about the low-level stuff after mostly working in scripting languages such as Python, R	I don't have one.... The standard library? :) 	Ranges & std.algorithm					Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests			Garbage collection						Multi-paradigm																													I think it is much more expressive to write in than C or other compiled languages I have experience with, and the syntax generally reads well with my way of thinking	Difficult to interpret compilation error messages (but I haven't encountered that many in the past year or so to be honest, so maybe it has improved)	Maybe, I'm still a student		Meh, I don't care.	2018-03-03 18:18:03	2018-03-03 18:42:25	1f64f551c7
e97cfdaf69f6de674d3d06bea8f92a7b	Yes	5				tour.dlang.org											4	Not as popular as other languages on stackoverflow	5		4	5	5		1	5		0			4						I don't need help		5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development												Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows				WebAssembly					dub						No		notepad++	3	0				5		It's awesome - keep it as is																				Yes	3	3	5	Nothing - Phobos (Standard Library) is great											Performance							better json serialization			std.database										std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger	std.functional				std.mathspecial	std.meta	std.outbuffer						std.signals											std.variant	std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to										I am just starting to learn D		Nothing										Nothing						Nothing								Nothing									Fewer third-party libraries than other language				Little info on StackOverflow						Nothing.								Modern, fun, underappreciated	Reddit or coworker	It replaced c++ in a wonderful way				CTFE (static if, static foreach)			Performance		Readable syntax			Closeness to C/C++	Simple, but powerful module system					@safe strings + arrays																									Runnable examples on dlang.org					vibe.d 0.8	Colorized error messages					I want a modern, fast, native language to replace c++		Yes, just tell me how		Spaces	2018-03-03 17:43:22	2018-03-03 18:33:32	541fc7ece4
ed199d4df089ee5da9f961eef3db8707	Yes	4				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4	Learning what tools to use in what situation (abundance of approaches, figuring out what is the best approach).  Lack of suitable learning exercises of sufficient size/depth to learn the stdlib beyond a superficial level.	4	The ability to type an identifier and get direct links to where it's documented (not just google search directing to entire pages).  Being able to jump straight to the definition of a function/template/etc instead of having to look it up manually in an entire file.	0	4	4		1	4	It could use a menu to quickly navigate between different slides. Currently all I see is forward and backward without information about what's coming. When looking at a new language I tend to jump between interesting bits first and only then look at "boring" things.	1	Mostly great content	It could be a bit easier to discover on the website (very minor nitpick).										No, improve DFeed.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely													Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows									dub						No	emacs		3	0				4	Clearer error messages for complicated situations that help find the spot where the problems come from instead of where the compiler notices them.	It's awesome - keep it as is																				Yes	2	4	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket				@safe for all modules	@nogc	DIP1000		More -betterC support	More/better container classes				@nogc containers	better json serialization	better xml serialization																																																									No, and I don't plan to				Time is my only enemy	Personal laziness					I am just starting to learn D		Nothing											Poor Phobos (Standard Library) documentation		Poor compiler error messages				Non-enterprise IDE support	Poor debugging										Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language						Lack of good examples / tutorials												Flexible, fast, complex	/r/programming	I like learning programming languages.	Phobos	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax							Built-in unittests		@safe strings + arrays		Inline assembler				std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime			Compile-time format string checking																				newCTFE		It's a very practical option for when I want to tinker with something that should be fairly fast. I very much like the combination of GC and no associated worries about memory (or satisfying a computer program to prevent memory bugs) and sufficient low level code emission that I can reason about code on an architectural level (will this fit in a cache line?).				Meh, I don't care.	2018-03-03 17:02:07	2018-03-03 17:51:54	3358a78949
6c018c41aa8f4297b3c2c65f4d582850	Yes	5				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							4		4		1	4	4		1	4		1	Mostly great content		3						I don't need help			I don't care.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly						Game Development							Official Windows .exe installer		Official .rpm packages																2.076.1 (static foreach)											DMD	Linux		Windows							dmd	rdmd	dub	make					No	Sublime		3	0				4		It's awesome - keep it as is																				Yes	3	4	4	Nothing - Phobos (Standard Library) is great									@nogc				More/better container classes			std.eventloop		better json serialization	better xml serialization			std.i18n									std.bigint		std.compiler	std.complex				std.csv	std.datetime	std.demangle	std.digest			stdx.allocator	stdx.checkedint						std.mathspecial		std.outbuffer								std.stdint												std.zlib	std.zip		No, and I don't plan to				Time is my only enemy								Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.											gl3n	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax				Simple, but powerful module system	Templates					Garbage collection									static foreach	opt-in GC and runtime													Automatic compilation of imports (dmd -i)																Spaces	2018-03-03 17:40:57	2018-03-03 17:50:10	f1bbc316d7
4fa5d8813553ddb29d414713b2aacad9	Yes	4				tour.dlang.org	Language specification										3	Documentation structure and layout isn’t the clearest when starting out, compared to other languages such as C#. 	3		4	5	5		1	5		1	Mostly great content		4		#d on IRC						4	No, improve DFeed.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly	Web development	Desktop applications	IoT										Official Windows .exe installer											Docker					2.078.3 (latest)													LDC	Linux	macOS	Windows	BSD-variant								dub	make					No	Sublime		4	0				4		It's awesome, but I miss a few features		tuples	string interpolation	in-place struct initialization	named arguments												Yes, but only for experimenting/testing/debugging	4		Yes	3	4	4					Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance					std.eventloop		better json serialization			std.database	std.i18n																		std.demangle				stdx.allocator							std.mathspecial																									No, but I want to to				Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)										Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance						DLL support on Windows		D's dependence on a large and bulky runtime					Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)			Nothing											Nothing.									Hacker News comment on a post about Rust. 			Ranges & std.algorithm		CTFE (static if, static foreach)						UFCS						Built-in unittests													opt-in GC and runtime			Compile-time format string checking	-betterC						Reproducible builds				Runnable examples on dlang.org													Yes, but only for a specific project		Spaces	2018-03-03 17:31:29	2018-03-03 17:45:15	c93a23b5fa
f45d1064ecfc67b4495f0fcb42e0c6ff	Yes	3						#d IRC on freenode	D Forum: Learn								3	I was pretty new to programming at the time.	4	If you're new to ranges, it's sometimes hard to navigate from a function that deals with ranges to the definition of the type of range it requires / yields.	0	3	3	The documentation isn't nearly as searchable as dpldocs.info	0			0			1							I don't ask for help anymore. I read source code instead, which is less efficient.	3	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications										Simulations				Official .deb packages															2.076.1 (static foreach)											DMD	Linux						WebAssembly					dub						No	Visual Studio Code		3	1	3			5		It's awesome - keep it as is																				Yes	6	5	5				Poor naming choices					@safe for all modules																std.decimal								std.bitmanip	std.compiler	std.complex	std.concurrency												std.functional				std.mathspecial	std.meta	std.outbuffer	std.parallelism						std.socket	std.stdint						std.uri				std.windows		std.zlib		Mostly that vibe.d is so incompatible with it, so I have to code in a different style with different APIs half the time.	Yes	3											Nothing										Nothing						Nothing								Nothing									Fewer third-party libraries than other language											Too much low-level focus (C/C++)						Marketing. Maybe check out persona-building?	Minimal. Obvious. Fast.		I was learning to program and wanted to use the best tools available. I heard of D, and it seemed to be the best.		Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance		Readable syntax	UFCS						Built-in unittests		@safe strings + arrays	Garbage collection		Contracts													stdx.checkedint								Automatic compilation of imports (dmd -i)									Cross-compilation with LDC			Productivity, from a combination of metaprogramming and simple syntax				Meh, I don't care.	2018-03-03 17:10:44	2018-03-03 17:19:19	4f6cf2415f
5852fd617ec3fdc95b88b88e2326d672	Yes	4														wikipedia, looking for a better language than c++	4	nothing, really	4	it's alright	0	2	5	old site was better	0			0			3							nowhere	4	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly												none, doing it for fun, whatever i want to work on, mostly gamedev								Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)													Linux									dmd		dub			meson					vscode, kate mainly	2	0			mostly finding a bug and registering, bugzilla search isn't that great as well	3	no idea	It's ok	some small things feel tacked on, overall fine															sometimes struct default constructor, some template/metaprogramming features/enhancements	No	3	no idea, used it to learn D and still use it to look up features, fine over all, but never tried implementing it	Yes	3	3	4							Fear to do breaking changes					Performance				I'm happy as is.													please keep it small and generic instead of putting everything that's doable as library in it	none i've used really, still no idea about >50% of it																						std.mathspecial		std.outbuffer																						everything that needs a separate library to be available, too many specialized modules that could be realized as separate libraries, keep it small and simple instead	No, but to other D repositories											don't want to, watched development for a long time, something just bothers me					Non-perfect C++ integration			Issues with language feature X (e.g. shared, @property)		DIP1000 and betterC are unnecessary things that take away development time from other, more useful things but still make druntime/moduleinfo etc. modular so it's not required				Poor compiler error messages		development effort wasted on DIP1000, betterC, colored error messages	Nothing										Attribute bloat					@nogc pure safe nothrow etc. etc. is just too much for me, so i only use nothrow, maybe @nogc if really necessary, neither pure, nor safe are really of interest to me	Nothing										maybe too much trying to accomodate every single developer, no matter the interests of said developer instead of focusing on a few strong aspects (see betterC, DIP1000, @nogc, all of these aren't really necessary, but were started in response to reddit comments)					Lack of focus at the management level	Wrong decisions at the management level		pull requests/dip management (mainly walter/andrei not able to keep up) and lack of focus/direction for language improvements	better than c++	internet, looking for better language	looked nice, great metaprogramming	phobos, only one i really use	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++		Templates					Garbage collection																																	newCTFE	none really	haven't found a better language yet	no idea	Maybe, I'm still a student	great next question!	Tabs	2018-03-03 15:54:19	2018-03-03 16:54:29	afe01918ec
a441341f61820b9803fe8ab8618ea30a	No, I have stopped using D		Used it for hobby projects, started a startup where image processing and GUI support was critical. EmguCV with C# saved countless hours and D couldn’t compete.					#d IRC on freenode	D Forum: Learn								3	Linking in Windows, implib or coffimplib, IDE and debugging support.	4		1	3	4		0			1	Mostly great content		4	D Forum	#d on IRC						3	I don't care.		Yes, it was hard to find out why.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development	Desktop applications		DevOps		Game Development							Official Windows .exe installer			Official .deb packages	Official OSX dmg installer			Arch Linux	Homebrew					I compiled D from source			2.078.3 (latest)										2.068.2 (last C++ release)			DMD	Linux	macOS	Windows		Android	iOS				dmd	rdmd	dub						No		Xamarin Studio / Mono-D	3	1	3	Feels meaningless. Just have to hope someone sees it eventually.		3	Better stability. Tried using my code again after 2 years. It’s a pretty hopeless endeavour that cost me at least 8 hours before I had enough.	It's awesome, but I miss a few features	@ inconsistency, negating attributes, auto properties like in C#		string interpolation											Static inheritance		Auto properties like in C#	No	4		Yes	3	4	4					Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc							std.eventloop	@nogc containers	better json serialization		std.graph	std.database			std.decimal	std.color	std.image	std.drawing (2D)		There’s always the question of is it in range, array, string, or algorithm.																						std.mathspecial																									Yes	4														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)		Code breakage 			Compiler regressions	Poor compiler error messages				Non-enterprise IDE support	Poor debugging		DLL support on Windows						Attribute bloat					Const issues are getting silly. I’d rather just remove it from all my code at this point, but evn but that’s not possible.		Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages											Frequent breaking changes		Lack of focus at the management level					Reddit	Great alternative to C++		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS				Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection						Multi-paradigm	Functional programming paradigm				DMD as a DUB library																		vibe.d 0.8							Stability, const	No, I'm already donating my free time		Tabs	2018-03-03 16:28:46	2018-03-03 16:48:01	77e1de7d88
e966426f1e1812cb4a48a9590f4f8a76	No, I have stopped using D		Lacking window editor support (VSC, Jetbrain products, ...). Constant issues with breaking code. Lacking plugins. Heavy over focus on higher level usage, no default http, issue ... so many.			tour.dlang.org				"Programming in D" by Ali Çehreli							3	Library ( see e ), windows issue with different install tools, lacking editor support windows,  outdated examples...	2	Inconsistent library ( example: std.array for string array manipulation vs std.array for string manipulation vs no lib for other string usage ). Library overview is messy (Ddox beta is better now but not on by default ). Lacking in standard library support for o.a. database access ( requiring 3th party plugins ).	0	3	2	Default examples are useless for anybody who is not coming from a higher level programming languages. They show no "D is like X" the language you come from. It instantly dumps people into D idioms. No news section on the front page. Blogs are great for C++/C etc programmers but have little value for people starting with the language.	1	4		1	Poor/unhelpful content	Over focus on GC, betterC, and all advanced features of D but never anything for people who are not higher level language zealots.	1	D Forum							3	I don't care.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development												Official Windows .exe installer			Official .deb packages											Manual LDC on Windows ... manual path including...															DMD	Linux	macOS	Windows		Android	iOS	WebAssembly			dmd	rdmd	dub						No	Intellij		1	0			Fed up creating accounts for languages and all the other projects that can not embrace a standard. Bugs need to be report them on Github. End of story	3	Single installer for all compiler. Single front end for all compiler instead of Dmd, rdmd, ldc, gdc, dub, ... Jesus Christ in a hand basket.	It needs serious work	Over focus on advanced features. Carries old C++ baggage like the need to manual include for each file std.xxxxx whenever you need a feature ( how about learning from languages like PHP to have the std default included ). And only require manual if you got a naming collusion. Compile time and run time features are so mixed, its simply unclear. Performance issues when using some features that slow the compiler to a crawl. Feels like somebody took C++ and slapped a coat of paint over it but forgot that the world has moved on.															This list above just shows what is wrong with D. What language feature that are missing is easy of use.	No	1		Yes	0	1	1															Again, wrong choices listed ... get your focus away from the whole C/C++ mentality.				better json serialization	better xml serialization		std.database		std.benchmark		std.color	std.image		And so many more!								std.container				std.demangle			std.exception	stdx.allocator	stdx.checkedint	stdx.logger		std.getopt		std.math	std.mathspecial	std.meta							std.signals					std.traits	std.typecons										Too many questions in this form 	No, but to other D repositories				Time is my only enemy	Personal laziness		D community	High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)			Performance problems	Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation	Compiler regressions	Poor compiler error messages				Non-enterprise IDE support	Poor debugging	dub	DLL support on Windows		D's dependence on a large and bulky runtime											Fewer third-party libraries than other language					Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials			Annoying community when people mention issues.		Too much low-level focus (C/C++)	Frequent breaking changes	Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level			Too much work	Google	Looked interesting at first, ... after year and half fed up with constant issues that prevented going beyond "playing around with the language"	None ... 																										Ho my god that list is another example of D being overly C / C++ focused.																						Colorized error messages		Cross-compilation with LDC		Again ... so many features focused only on higher level language designs. Nothing really for the poor guys doing to grunt work with web development. No wonder people use Go.	Wanted for web development. Too many issues. Will stick to PHP thank you very much. It may not be fashion to use PHP but it beats dealing with D the last year and half.	Regressions!!! 	No, I'm not interested into D	Get your acts together and learn there are other people outside of C/C++ users in the world!	Spaces	2018-03-03 16:03:12	2018-03-03 16:42:54	4734ee1754
ddd428be3ff54a2e36f062dc4a0fe983	No, I have stopped using D		The ecosystem of libraries for my work is small.		"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							5	Error messages in unit test failures. Error messages in general.	5	More examples of libraries like std.net and tutorial for simple things	0	4	5	Nothing	1	5	I love it. Nothing much.	1	Always great content	The blog is great. More articles on Industry usage and case studies will be good.	5	D Forum	#d on IRC						5	No, the D.Learn forum is fine.	No	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly	Web development															Official .deb packages					Homebrew								2.078.3 (latest)													DMD	Linux	macOS								dmd								No	emacs		5	1	5	Nothing		4	elm and rust like error messages	It's awesome - keep it as is																				Yes	3	4	4				Poor naming choices						@nogc	DIP1000			More/better container classes			std.eventloop	@nogc containers	better json serialization			std.database								Nothing											std.demangle				stdx.allocator								std.meta																							More about std.allocator and tutorial on it's usage	Yes	5	Nothing											Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)										Poor compiler error messages					Poor debugging	dub							Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs				Needs better marketing like rust	Fast. Elegant.	Hackernews, Reddit	Just to get an experience	std.range	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax	UFCS			Simple, but powerful module system												Multi-paradigm	Functional programming paradigm		static foreach			Templated vector operations								Reproducible builds			Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages					It's simple and feels like native python	Nothing	No, I'm not interested into D	Keep up the good work. Thanks for everything	Spaces	2018-03-03 16:23:30	2018-03-03 16:39:18	eae4d8d4f5
d376c9d694dfbc3e3416aaec0c52d8e6	Yes	4			"The D Programming Language" by Andrei Alexandrescu												5	linking	5	nothing	5	5	5	GUI library	1	5	Web Server sample - not works for me	1	Mostly great content	--	5	D Forum							5	I don't care.	no	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly	Web development						Big Data				Science/Research					Official .deb packages													2.078.3 (latest)													GDC	Linux	macOS	Windows		Android					dmd	rdmd							Yes, I work with D part time	Atom		3	0			--	3	rdmd, dmd, dub's command line interface, linking process, module finding and ERROR MESSAGES!  should be more user-friendly	It's awesome, but I miss a few features	C-like syntax: too many curlyes, needing main(), too many 'use' lines						language binding to X										No	5	i unknown	Yes	3	3	3	Nothing - Phobos (Standard Library) is great													More/better container classes													std.image	std.drawing (2D)					std.bitmanip													stdx.checkedint																										std.windows				Included GUI library, Vibed - included and works from the box	No, and I don't plan to					Personal laziness											Non-perfect C++ integration					I not found my best IDE for D				Poor compiler error messages				Non-enterprise IDE support							Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists			Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials				Nothing.							no	C-like, modern, hard	from Alexandresku book	I need powerfull, modern, free language with optional functional paradigm 	Fobos		Mixin			std.traits				UFCS			Simple, but powerful module system											std.concurrency & std.process	Multi-paradigm	Functional programming paradigm									New range functionality (substitute, slide)								Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)								power				Spaces	2018-03-03 15:53:49	2018-03-03 16:34:16	c031fdfdb3
3c857e52e182784e7858ba00701c6289	No, I have never used D			Not enough momentum around D community, very less packages		tour.dlang.org											2	Need vscode or some editor support	4	Its fine	0	5	4	Its fine	1	4		0			1	D Forum							3	No, the D.Learn forum is fine.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development			DevOps							Science/Research									Arch Linux									2.078.3 (latest)													DMD	Linux	macOS								dmd					meson			Not sure	Visual Studio Code		1	0				5		It's awesome, but I miss a few features		tuples	string interpolation	in-place struct initialization	named arguments	assert diagnostics	language binding to X	multiple alias this	UDAs for attributes	@mutable in immutable	static break	writing files at compile-time	UFCS for local symbols				Yes, but only for experimenting/testing/debugging	4		Yes	0	2	3			Auto-decoding isn't nothrow	Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc		Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization		std.graph	std.database	std.i18n	std.benchmark																	std.demangle																								std.traits	std.typecons											No, but I want to to			Finding good issues to get started			No roadmap	D community	High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems	Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000					Poor compiler error messages	Poor GC implementation / performance				Poor debugging				D's dependence on a large and bulky runtime				Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials							Lack of progress on DIPs									Ranges & std.algorithm		CTFE (static if, static foreach)			Performance					Closeness to C/C++	Simple, but powerful module system	Templates				@safe strings + arrays			Contracts		import("myfile")	std.concurrency & std.process	Multi-paradigm			static foreach	opt-in GC and runtime		Templated vector operations	Compile-time format string checking			New range functionality (substitute, slide)										Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages		Cross-compilation with LDC					Yes, but only for a specific project		Spaces	2018-03-03 16:08:20	2018-03-03 16:18:32	a8ad4ecdf0
81c7e07cd86ad7d098009899196a35ba	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn								4		3		0	4	4		1	5		1	Always great content		4	D Forum							5	Yes, I like StackOverflow.			Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.			Desktop applications																									NixOS		2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows							dmd	rdmd							No	vim / neovim		3	1	4			4		It's awesome, but I miss a few features							language binding to X										No	3		Yes																	More/better container classes																																																															Yes	5															Non-perfect C++ integration						Nothing								Poor debugging																																					Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++													Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library																						newCTFE				No, I'm already donating my free time		Spaces	2018-03-01 06:01:29	2018-03-03 16:14:25	ab19a20dd8
6335f74608d0f6d47c437a98ca9cab00	Yes	3			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			3	Tooling is really hard to make it work properly, missing a real IDE.	2	Some examples are either missing, too "high-level" (you need to fully understand the language in order to understand few examples), or they are too "academic" (like in every documentation, some examples are fine but they don't help out of the box for real world problems)	0	4	4	Seems like most of the useful information is there, might be missing like where D is going (what is expected to happen to in the future)	0			1	Mostly great content	It would be a good idea to have few articles about "how do you do x in D." with examples and real world applications	3	D Forum							4	I don't care.	 	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications											Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows	BSD-variant			WebAssembly	Embedded		dmd		dub						Not applicable	Visual Studio + VisualD		2	1	2	As everyone already know, sometimes few issues take really too long to be addressed. This gives a terrible misconception about how D is developed. People tend to quickly assume "if something isn't resolved asap, it means people don't bother doing it at all". There really should be a focus to close old issues first (with those that are really important to do so too).		5		It's awesome - keep it as is																				Yes	0	3	4				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support				std.eventloop	@nogc containers	better json serialization		std.graph	std.database	std.i18n							std.concurrency, std.parallelism, 		std.bigint			std.complex				std.csv		std.demangle	std.digest				stdx.checkedint	stdx.logger	std.functional				std.mathspecial		std.outbuffer				std.random		std.signals							std.uni	std.uri								Better system API (at least updated) for windows, POSIX, embedded systems (ARM, Arduino). @nogc everywhere.	No, but I want to to			Finding good issues to get started		Personal laziness	No roadmap		High barrier to entry						Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)							Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows	Missing support for platform X			Nothing										Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials				Nothing.							Past mistakes that are still in everyone's mind, D being there since 1999 but didn't get more corporate support (which is terribly sad tbh). Lots of people see D as a "toy language" because of that.	Too much underrated 	Few years ago looking for *the* best programming language to learn. Might have been Wikipedia	Because it has the potential to become one of the strongest language around. And easier to learn than C++.	 	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax		-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters			Inline assembler	Contracts				Multi-paradigm	Functional programming paradigm			opt-in GC and runtime	DMD as a DUB library			-betterC			toString with output ranges			Reproducible builds			Automatic compilation of imports (dmd -i)						vibe.d 0.8	Colorized error messages		Cross-compilation with LDC			The hope it will be the next big thing.	Embedded documentation. Sure it helps a lot about documenting the code, but people tend to not use it properly.	Maybe, I miss accountability at the moment	There needs to be a rating or any other system to make sure good libraries are : 1. always being worked on (it is sad to see few of them appearing and then they are abandoned) 2. make sure bad libraries are merged / improved 3. some "work out of the box" packages with few libraries (with examples). 4. promoting great libraries and make them the "New to D ? Take a look at those libraries".	Spaces	2018-03-03 15:33:23	2018-03-03 16:13:33	5a8225ed5c
5d652e2c46d792cbbc5ec80db5983332	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli					d-idioms		4	Understanding the GC's whims, especially in multithreaded environments.	4	It's pretty okay.	0	5	5		1	4	It could be a little more verbose in some topics, maybe with more corner case examples.	1	Always great content		4	D Forum		#d on StackOverflow					5	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly			IoT				Big Data		Machine Learning		Science/Research		Official Windows .exe installer					Official dlang.org/install.sh script				Gentoo				I compiled D from source		2.079.0 (nightly)		2.077.1 (latest LDC)												LDC	Linux				Android			Embedded		dmd		dub	make					No	Visual Studio Code		3	0				4		It's awesome, but I miss a few features												writing files at compile-time	UFCS for local symbols				Yes, my project depends on it	3		Yes	1	4	5					Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance	More -betterC support					@nogc containers	better json serialization			std.database			std.decimal																																																std.xml				No, but to other D repositories			Finding good issues to get started		Personal laziness	No roadmap									Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000						Poor GC implementation / performance			Non-enterprise IDE support		dub			D's dependence on a large and bulky runtime				Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs	Lack of focus at the management level				A promising experiment.	In connection with the (abandoned) XOmB exokernel project.	Because of its cleverness and clarity over C++ (wich I studied at uni) and my good initial experiences with it.	mir, dcompute, vectorflow		Mixin	CTFE (static if, static foreach)			Performance				-betterC					Built-in unittests									Multi-paradigm								-betterC																	DCompute	Cross-compilation with LDC	newCTFE		Creativity and the love of the efficiency and expressiveness.	GC	Maybe, I miss accountability at the moment		Spaces	2018-03-03 14:43:09	2018-03-03 15:52:31	288b13ee02
9587dd8309506a2ec3be08d5fc06782f	Yes	5														Assumed C-semantics and followed compiler suggestions	5	The template syntax in the documentation	4	Templated and overloaded functions are often fairly hard to figure out. It'd probably be better to stick all the declarations of a function together in the documentation, instead of going "declaration, help text, declaration, help text, declaration, help text". Often the help text is so long that the following declarations are easy to miss.	0	5	5	N/A	0			0			5		#d on IRC						5	No, the D.Learn forum is fine.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly	Web development											Hobbyist in many other areas															I forget		2.078.3 (latest)													DMD	Linux						WebAssembly					dub						No		Gedit	4	0			Never ran into anything requiring it.	5		It's awesome, but I miss a few features	No code-as-datastructure support. Having a D-parser and a D-unparser would make using mixins much less error prone.	tuples			named arguments							writing files at compile-time					Yes, but only for experimenting/testing/debugging	5	N/A	Yes	6	5	4								Sometimes hard to find functionality. Related functionality is often scattered through multiple modules.					More -betterC support						better json serialization															std.compiler								std.digest											std.meta									std.stdint					std.uni										No, and I don't plan to				Time is my only enemy	Personal laziness							Nothing										Nothing								Poor debugging						Nothing								Nothing											Nothing.										It seemed like something better than C, but simultaneously also not as complex as C++. (which turned out to be correct)	vibe.d		Mixin	CTFE (static if, static foreach)				Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests					Contracts							static foreach	opt-in GC and runtime	DMD as a DUB library	Templated vector operations																							It's a reasonable language. unlike C which is too low level, and C++ which is too complex		No, I'm already donating my free time	Why isn't there a plain no option to the "why arent you donating" question?	Spaces	2018-03-03 15:30:36	2018-03-03 15:51:33	4f1fa9ecb5
7b191b09cbf29230f570dd68ba33e7c8	Yes	4								"Programming in D" by Ali Çehreli							3	Stumbled upon a bug in bytecode generation that slowed down the progress	3	Most useful functions can't be found directly, e.g. when working with 'duration'	0	4	3		1	4		1	Mostly great content		3		#d on IRC						4	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development			DevOps			Big Data		Machine Learning											Arch Linux						I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux											dub						No	Visual Studio Code		4	1	3			4		It's awesome, but I miss a few features					named arguments			multiple alias this								If as expression	No	4		Yes		2					Poor naming choices				Lot of code not @safe	@safe for all modules		DIP1000			More/better container classes					better json serialization	better xml serialization										Dates and times			std.bitmanip	std.compiler					std.csv		std.demangle	std.digest										std.mathspecial	std.meta	std.outbuffer						std.signals	std.socket	std.stdint		std.system													No, but to other D repositories			Finding good issues to get started					High barrier to entry												@safe-ty problems / missing DIP1000					Poor compiler error messages				Non-enterprise IDE support									Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library														Too much low-level focus (C/C++)		Lack of progress on DIPs								Vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance			UFCS				Templates		Built-in unittests									Multi-paradigm	Functional programming paradigm						Compile-time format string checking											Runnable examples on dlang.org				New third-party applications (e.g. Tilix)	vibe.d 0.8				newCTFE						Spaces	2018-03-03 14:54:41	2018-03-03 15:39:07	98fb9239ff
01f74be16d49caec1dd69d0340d45383	Yes	5			"The D Programming Language" by Andrei Alexandrescu												3	Lack of documentation targeted towards newcomers. 	3	Better introduction to modules and overall layout for those not familiar with Phobos yet. 	0	3	4	A little intimidating. Would be good to take inspiration from Python docs in terms of new user friendliness	1	4		1	Mostly great content		5	D Forum							5	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily							Big Data		Machine Learning		Science/Research			Official tarballs		Official .deb packages	Official OSX dmg installer				Homebrew										2.076.1 (static foreach)											DMD	Linux									dmd	rdmd	dub	make					Yes, I work with D full time	vim / neovim		4	1	5			5		It's awesome, but I miss a few features	Language support for Tuples! Also an option for default immutability. 	tuples			named arguments	assert diagnostics		multiple alias this		@mutable in immutable							No	5		Yes	3	4	4					Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc		Performance					std.eventloop	@nogc containers	better json serialization		std.graph	std.database			std.decimal																																																				No, but I want to to			Finding good issues to get started	Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)															Nothing												Wrong defaults (e.g. not @safe by default)							Little marketing / no evangelists	Few showcases / flagship projects								Too much low-level focus (C/C++)							Pragmatic. Quick. Hopeful. 	Andrei's talk at a C++ forum	As an escape from C++. Found it full of promise. 	STD. Algorithm. VibeD	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests				Inline assembler	Contracts				Multi-paradigm	Functional programming paradigm		static foreach														Automatic compilation of imports (dmd -i)						vibe.d 0.8	Colorized error messages			newCTFE				Yes, but only for a specific project	Please become more popular!	Spaces	2018-03-03 15:19:09	2018-03-03 15:33:16	1ce7ba1d20
a5e48e7b67644565fa802b72dce7fb1c	Yes	5				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							5	- IDE support - Better community, esp Reddit, it's important - Available Libraries: GUI ...	5		0	1	2	- Better intro for first time users, I mean just take a look at Crystals | Rust | Nim homepage.	1	4		1	Huge variance in quality		5	D Forum							5	No, improve DFeed.		No.	Please don't ever break code.	Weekly	Web development	Desktop applications												Official tarballs															2.078.3 (latest)	2.077.1 (latest LDC)													Linux			BSD-variant	Android		WebAssembly	Embedded		dmd	rdmd	dub						Not applicable	Intellij		1	0				5		It's awesome, but I miss a few features				in-place struct initialization	named arguments		language binding to X					writing files at compile-time	UFCS for local symbols				No	5		Yes	3	0	6				Poor naming choices		Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000	Performance	More -betterC support																																																																																																																																																																																												2018-03-03 14:47:54	2018-03-03 15:09:43	087b9fdc32
e64e97f67bc9bf0048304f1e14bff019	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			4	Some areas of phobos need more examples	3	Some areas lack examples of usage which means you have to dig into the source code to fully understand	3	4	4		0			1	Mostly great content		3	D Forum							4	I don't care.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development	Desktop applications		DevOps									Official Windows .exe installer	Official tarballs						Arch Linux									2.078.3 (latest)													DMD	Linux		Windows		Android		WebAssembly			dmd		dub	make					No	vim / neovim		3	1	4			3	Better unit test ouput. E.g. if tests are annotated with @("some string) treat that as the test name and print success/failure	It's awesome, but I miss a few features	Not so much syntax but 'scope' is poorly defined/implemented.	tuples		in-place struct initialization		assert diagnostics								Static inheritance			Yes, but only for experimenting/testing/debugging	4	Scope needs work	Yes	2	4	4					Old modules like std.outbuffer or std.socket	Reliance on the GC		No clear strategy for std.experimental. When will allocators become part of std?		@nogc	DIP1000	Performance		More/better container classes				@nogc containers	better json serialization	better xml serialization		std.database			std.decimal									std.compiler	std.complex		std.container				std.demangle	std.digest				stdx.checkedint				std.json		std.mathspecial		std.outbuffer																			std.xml			Database and XML support are top of my list. These are required for use in OLTP applications. Reliance on C libraries is a hassle.	No, but to other D repositories					Personal laziness									Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)					@safe-ty problems / missing DIP1000						Poor GC implementation / performance			Non-enterprise IDE support			DLL support on Windows										Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects								Too much low-level focus (C/C++)		Lack of progress on DIPs					Lots of potential	Can't remember. It was ~2008	At the time it offered interesting features that C++ lacked (e.g .ranges)	vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C		UFCS				Templates														static foreach	opt-in GC and runtime																			vibe.d 0.8	Colorized error messages					Personal interest in the language potential	Lack of control over the GC	Yes, just tell me how	I think D has huge potential to make progress in the web/microservice space.	Spaces	2018-03-03 14:15:52	2018-03-03 14:56:00	f9c6cca798
bf2854e3ba8b8908e6aefdbd26c641da	Yes	4				tour.dlang.org	Language specification	#d IRC on freenode	D Forum: Learn						d-idioms		4		4		3	4	4		1	4		1	Mostly great content		4	D Forum	#d on IRC						3	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications										Student	Official Windows .exe installer						d-apt Debian/Ubuntu																	2.071.2 (import access check fixes)						DMD	Linux		Windows							dmd		dub						Not applicable	Intellij		3	1	4			3	Easier to understand parser.d, easier to use as a library.	It's awesome, but I miss a few features	Named optional parameters, kotlin style , would be nice. Additionally builtin set syntax would also be nice. 				named arguments	assert diagnostics								Static inheritance		Syntax for Set, similar to dictionary syntax. Maybe somenthing like Type{} setOfTypes = {}	No	4	A good, bug free bnf specification.	Yes	3	2	4				Poor naming choices		Reliance on the GC				@nogc			More -betterC support	More/better container classes				@nogc containers			std.graph	std.database	std.i18n		std.decimal	std.color	std.image	std.drawing (2D)					std.bitmanip	std.compiler							std.demangle																							std.system						std.uuid		std.windows				A wider variety of datastructures. If  a datastructure exists it should have an implementation in phobos. Also some kind of minimalist graphics/ui library would be nice.	No, but to other D repositories			Finding good issues to get started	Time is my only enemy	Personal laziness								Language complexity (e.g. inout, abuse of mixin)									Nothing							Non-enterprise IDE support	Poor debugging						Nothing										Less corporate support (including jobs) than other languages	Little marketing / no evangelists				Lack of good examples / tutorials				Nothing.							String mixins, make static analysis a nightmare. I work on intellij-dlanguage, and this will become a major problem for improving dlanguage support.	complex,fun,fast	Don't remember, possibly news.ycombinator.com	Wanted a new language for personal projects	gtk-d	Ranges & std.algorithm					Performance	Native interoperability with C						Templates		Built-in unittests		@safe strings + arrays	Garbage collection				import("myfile")		Multi-paradigm	Functional programming paradigm			opt-in GC and runtime	DMD as a DUB library																New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages	DCompute		newCTFE		The badness of C/C++/Java.	string mixins, they make static analysis really tricky.	Maybe, I'm still a student	I think that finding an alternative to string mixins is the key to getting better ide integration/enterprise adoption. At the moment it is very difficult for an ide to correctly resolve all symbol declarations, since they could be located within a string mixin, which in turn could call a wide variety of functions via ctfe.	Tabs	2018-03-03 13:53:02	2018-03-03 14:19:15	384e8da5c0
de75b98a3c8fe3f2add6822613025c6a	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification										3	There are few contents and information.	4	I have not found best practices and tips.	0	4	3	I cannot found language usage. ex) cookbooks	1	4	I want more trend term and cookbooks. ex) IoT, AI, statistics, VR, etc.	1	Mostly great content	I want more real world D usecase.	5	D Forum		#d on StackOverflow		My colleagues			5	Yes, I like StackOverflow.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly	Web development	Desktop applications	IoT	DevOps			Big Data	Embedded Systems					Official Windows .exe installer	Official tarballs			Official OSX dmg installer	Official dlang.org/install.sh script	d-apt Debian/Ubuntu							I compiled D from source			2.078.3 (latest)													DMD	Linux	macOS	Windows		Android	iOS	WebAssembly	Embedded		dmd		dub	make					No	vim / neovim		3	0				5		It's awesome - keep it as is																				Yes	3	3	2		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket					@nogc		Performance	More -betterC support					@nogc containers	better json serialization				std.i18n		std.decimal														std.csv							stdx.checkedint	stdx.logger														std.socket																No, but I want to to			Finding good issues to get started	Time is my only enemy																		Nothing							Non-enterprise IDE support							Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow						Nothing.							D is not famous.	language of life	Japanese blog post.	better C++	std.algolithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler	Contracts	Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm			opt-in GC and runtime	DMD as a DUB library	Templated vector operations		-betterC									Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org							DCompute	Cross-compilation with LDC	newCTFE		readable and write able solid code and native performance.	CTFE compile time memory usage.	Yes, I'm already doing so		Spaces	2018-03-03 13:19:20	2018-03-03 14:00:20	36a7f9fe6a
be3d5e91b48de536b9a3936c3d2be7d2	No, I have never used D			Embedded bare metal support																	0	4	4	Improved forum mechanics.	0			0			3	D Forum							3	No, the D.Learn forum is fine.			Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely								Embedded Systems																			LDC, zip file			2.077.1 (latest LDC)												LDC								Embedded						cmake				No		Notepad++	1	0				3	Move to LLVM completely for better future compatability	It's ok																	Yes, but only for experimenting/testing/debugging	3		No	3	3	3						Reliance on the GC				@nogc			More -betterC support																																																																																																																													OS independent support	Bare metal support. Today it is not possible to create some code and compile directly to the target architecture without including OS support.	Step from C++													-betterC			Templates		Built-in unittests		@safe strings + arrays		Inline assembler									opt-in GC and runtime				-betterC																								Key to success is the bare metal support. Here D competes directly with C++ and Rust. If D can become a more enjoyable than C++ and Rust it will win. Suggestion, split the core library so that there is no OS dependency in one part and other part with OS dependency. It should be well documented and easy in order to port to a new system and its primitives. -betterC is a great step but templates/classes would seal the deal and D would surpass C++ in usability. Basically, just like C++/C, a simple source file without any additional library dependencies to the OS should be able to compile to the target architecture straight from the box.	Meh, I don't care.	2018-03-03 13:31:34	2018-03-03 13:49:55	4372f67951
edca0d3e1365c0cc4de63aa3379e0c12	Yes	5			"The D Programming Language" by Andrei Alexandrescu												4		3		0	3	2		0			0			0						I don't need help		1	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely											Science/Research										Homebrew								2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd	rdmd							No	vim / neovim		3	0				3		It's awesome, but I miss a few features		tuples	string interpolation	in-place struct initialization	named arguments					@mutable in immutable	static break	writing files at compile-time					No	3		Yes	0	0	0		Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices		Reliance on the GC			@safe for all modules	@nogc		Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)																																																	No, and I don't plan to						No roadmap	D community	High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems	Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance				Poor debugging	dub			D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow							Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level									CTFE (static if, static foreach)																												Compile-time format string checking																								No, I don't like the management of the DLF		Spaces	2018-03-03 12:54:07	2018-03-03 13:08:41	8c402a7f0f
6438cba6e7579b4b437bb3ae400a2c86	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli			"D Web Development" by Kai Nacke				4	powerfull	3		2	3	4																																																																																																																																																																																																																																																																																																																											2018-03-03 10:20:34	2018-03-03 10:23:28	3ee451470b
576ef6c6edd7b1eb1d384687f67ec113	Yes	4				tour.dlang.org	Language specification		D Forum: Learn						d-idioms		4		4	Modules tree on the left hand-side should be fixed, so it scrolls with page. Search for ddox documentation shouldn't list Voldemort types.	0	5	5		1	5		1	Always great content		5						I don't need help			No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications										Shell utilities							d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows									dub						No	Visual Studio Code		3	0				5		It's awesome, but I miss a few features	I'd be more than happy to have tuple destructuring aka structure binding. I think some syntactic sugar for constructors could be a really nice addition, something similar to TypeScript ex Using private for a parameter property declares and initializes a private member.	tuples		in-place struct initialization		assert diagnostics			UDAs for attributes				UFCS for local symbols				No	4	More accurate search	Yes	5	5	3	Nothing - Phobos (Standard Library) is great								@safe for all modules					More/better container classes					better json serialization			std.database		std.benchmark		std.color				std.json	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle	std.digest	std.encoding			stdx.checkedint	stdx.logger							std.outbuffer						std.signals	std.socket									std.uuid		std.windows		std.zlib	std.zip		No, but I want to to				Time is my only enemy								Nothing													Poor compiler error messages				Non-enterprise IDE support							Nothing											Little marketing / no evangelists		Little info on StackOverflow		Lack of good examples / tutorials							Lack of progress on DIPs	Lack of focus at the management level				intuitive powerfull friendly	Wikipedia	Out of curiosity 	Phobos, vibe-d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays							Multi-paradigm			static foreach		DMD as a DUB library	Templated vector operations	Compile-time format string checking			New range functionality (substitute, slide)	toString with output ranges					DMD support for AVX2		Runnable examples on dlang.org						Colorized error messages			newCTFE		It's features and great community	Poor error messages	Maybe, I miss accountability at the moment		Tabs	2018-03-03 09:51:20	2018-03-03 10:21:20	4e23cc0b40
ce369ab097f044a104ab29579ab09387	Yes	3			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							4	Lack of examples	3	Lack of examples. The Qt documentation and even moreso clojuredocs would positive examples.	0	3	3	Nothing to dislike or like, it is just a website	0			1	Mostly great content		2						I don't need help		3	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly		Desktop applications					Big Data																				homebrew		2.078.3 (latest)													LDC	Linux	macOS	Windows				WebAssembly							cmake				No	vim / neovim		4	0			  	5		It's awesome, but I miss a few features	 	tuples			named arguments												No	4		Yes	3	3	3						Reliance on the GC				@nogc			More -betterC support					@nogc containers	better json serialization																																																										No, and I don't plan to								High barrier to entry		I am just starting to learn D						Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance				Poor debugging		DLL support on Windows																															almost better c++	magazine article, some years ago	Interest in c++ without the warts.							Performance	Native interoperability with C				Closeness to C/C++	Simple, but powerful module system										import("myfile")		Multi-paradigm				opt-in GC and runtime																													Meh, I don't care.	2018-03-03 09:26:05	2018-03-03 09:41:51	4cefd26f6a
74eed9c775a7629793af6edb2ad175c9	Yes	4				tour.dlang.org	Language specification										5		5	make the difference between the stdio.File and c-like fopen more clear	0	4	4	the install deb/install rpm buttons could be changed to just a download button	1	5		0			4		#d on IRC						5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development					Game Development		Embedded Systems										Official dlang.org/install.sh script											2.078.3 (latest)													DMD	Linux		Windows	BSD-variant			WebAssembly	Embedded				dub						Not applicable	Visual Studio Code		4	0				5		It's awesome, but I miss a few features	I personally prefer a more rust or kotlin-like syntax with the variable type declared after		string interpolation		named arguments												No	5		Yes	3	5	6						Reliance on the GC	Fear to do breaking changes			@nogc			More -betterC support				std.eventloop						std.i18n										std.bitmanip	std.compiler	std.complex											stdx.checkedint						std.mathspecial	std.meta																			std.windows					No, and I don't plan to			Finding good issues to get started	Time is my only enemy	Personal laziness			High barrier to entry									Dependence of some language features + Phobos (Standard Library) on the GC				smaller community / popularity	Nothing											Missing support for platform X	D's dependence on a large and bulky runtime											Fewer third-party libraries than other language										Nothing.								C plus Java	saw it used in a github project	it looked really interesting	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays							Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC										Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)								A lot less 'gotchas' than other languages, it is sane but still uses newer concepts like functional programming (it doesn't go overboard with it).		Maybe, I'm still a student	please add string interpolation	Tabs	2018-03-03 09:14:01	2018-03-03 09:32:02	4bbfe9bffc
e2665c8a02f8e4aa621969bb9470e7b5	No, I have stopped using D		i start to use other languages and platforms							"Programming in D" by Ali Çehreli							3	big language	4			3	4	i like languages similar ruby language	0			0			3							ddili.org	4			No.		Rarely	Web development	Desktop applications											Official Windows .exe installer			Official .deb packages				Arch Linux																						DMD	Linux									dmd		dub							Coedit		3	0																																																																																																																																																																																																																																						2018-03-03 09:17:54	2018-03-03 09:28:07	9eae841d4a
bef4f62e67d44b84f95eb0867dc86dfc	No, I have stopped using D		lack of libraries, lack of interest in making d mainstream, spending time on language rather than building.		"The D Programming Language" by Andrei Alexandrescu			#d IRC on freenode		"Programming in D" by Ali Çehreli							5	coming from python, it was memory management.	3	layout, navigation, samples	0	3	3	it does not belong to the world's best programming language.	1	5		1	Always great content		5	D Forum	#d on IRC							No, improve DFeed.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development		IoT													Official .deb packages					Homebrew								2.078.3 (latest)													DMD	Linux	macOS		BSD-variant						dmd								No	emacs		1	1	1	switch to github issues.		3	meaningful error messages	It's awesome, but I miss a few features	lack of pattern matching, verbose list of attributes and modifiers.		string interpolation					multiple alias this									No	3		Yes	0	0	3		Auto-decoding for strings		Poor naming choices		Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance	More -betterC support	More/better container classes	more networking libraries				better json serialization	better xml serialization		std.database	std.i18n		std.decimal		std.image	std.drawing (2D)		ranges			std.bitmanip	std.compiler							std.demangle																																				No, but to other D repositories					Personal laziness	No roadmap							Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration		Performance problems					Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance				Poor debugging			Missing support for platform X	D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat				Ugly bits of the standard library			Fewer third-party libraries than other language											Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level			lovely and great language lacking features for mainstream developers.	from ali cehreli around 2008-2009.			Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS				Templates												Functional programming paradigm		static foreach					-betterC										Runnable examples on dlang.org						Colorized error messages					nothing yet, i moved on to rust.		Yes, just tell me how		Spaces	2018-03-03 08:10:01	2018-03-03 08:31:55	3149b499dc
96b9ee8583ccdd95174753bfbcc95397	Yes	4								"Programming in D" by Ali Çehreli							5	Not too many blogs, less discussion on reddit/HN. But docs and the dlang forums are good	4	Bigger examples for less commonly used functions. Functions are used in a context. std.algorithm has great docs but others need more love.	4	5	4	The section on industry proven is distracting to new-comers and takes away from a good first impression. It can be placed lower on the page.	1	5	Option to show disassembly like godbolt.org	1	Mostly great content	Tutorials for "scripting"-like tasks. I used D as a faster Python. Having good blogs on how D can help you with everyday tasks like scraping pages, cleaning CSVs, connecting to DBs, etc	4	D Forum							5	No, the D.Learn forum is fine.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly	Web development			DevOps		Game Development							Official Windows .exe installer			Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows		Android							dub						Yes, I work with D part time	Visual Studio Code		4	0				5		It's awesome, but I miss a few features	Too many attributes pollutes namespace. Getting to use nogc features is difficult. Better algebraic datatypes and higher kinded types will make development in D even more pleasant and easy to formally verify	tuples		in-place struct initialization					UDAs for attributes								No	4		Yes	3	4	5				Poor naming choices		Reliance on the GC			@safe for all modules	@nogc		Performance	More -betterC support					@nogc containers	better json serialization		std.graph	std.database	std.i18n				std.image							std.compiler							std.demangle			std.exception		stdx.checkedint	stdx.logger					std.mathspecial	std.meta							std.signals							std.uni										Yes	5																Dependence of some language features + Phobos (Standard Library) on the GC								Poor compiler error messages				Non-enterprise IDE support									Attribute bloat		Wrong defaults (e.g. not @safe by default)							Little marketing / no evangelists	Few showcases / flagship projects							Nothing.								Pleasure to work with	Hacker news	Moving from scripting to lower level languages. I tried rust as well. But something about rust syntax seems horribly ugly to me. D on the other hand has an aesthetic beauty and the features seem to connect well.	std.algorithm	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits			Readable syntax	UFCS				Templates				@safe strings + arrays						std.concurrency & std.process					opt-in GC and runtime		Templated vector operations	Compile-time format string checking	-betterC										Runnable examples on dlang.org							DCompute						Maybe, I miss accountability at the moment		Tabs	2018-03-03 06:54:15	2018-03-03 07:17:33	1386ed1c76
c5f2cc5a805e67a5e85a30e1d7c21c61	Yes	5				tour.dlang.org	Language specification		D Forum: Learn								4	Using certain language features correctly, e.g. operator overloading and interface with C	4	Import statements are not always provided with code examples, and examples seem to focus on showing language power rather than most common use cases	4	5	5	No complaints	1	5	No complaints	1	Mostly great content	No focus on machine learning ( how about the Netflix Vectorflow code ? )	5	D Forum							5	No, the D.Learn forum is fine.	Above options are enough	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily	Web development						Big Data		Machine Learning					Official tarballs		Official .deb packages			d-apt Debian/Ubuntu											2.077.1 (latest LDC)												LDC	Linux											dub						Yes, I work with D full time		Geany	2	0			Don't feel like I know how compilers are supposed to work well enough to ask	4	Maybe this exists already, but I can't see how to compile project A to a static library and include it as a dependency in project B without explicitly including all source files for A	It's awesome - keep it as is																				Yes	3	5	4								Seems to be some redundant function names in different packages (std.array, std.string, std.algorithm) and never sure where the function I want is located				Performance		More/better container classes					better json serialization	better xml serialization		std.database								std.algorithm has some behavior that I don't like (setIntersection requires sorted inputs but doesnt specify that or give any error if you fail to provide it, it just gives the wrong answer)	std.base64	std.bigint	std.bitmanip	std.compiler		std.concurrency					std.demangle	std.digest			stdx.allocator	stdx.checkedint		std.functional					std.meta	std.outbuffer						std.signals	std.socket	std.stdint		std.system				std.uri		std.uuid	std.variant	std.windows				1) I find a lot of problems with long/int types. Not sure why but I have to cast everything back and  forth a lot, and it's very buggy and hard to maintain. 2) I can't seem to get synchronization to work. I have tried making some synchronized/shared  classes, but nothing compiles and I give up, not being  able to understand the error messages. 3) Immutable/const/inout for function arguments is very  hard to use correctly and understand, so I end up avoiding these  keywords. 	No, but I want to to								High barrier to entry					Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing							Non-enterprise IDE support							Nothing																		Missing machine learning libraries. This could be a huge marketing opportunity (like Python with Keras, etc)	Nothing.							Should focus more on machine learning. Since the performance is outstanding and ease of understanding comparable to python, seems like an ideal area.			(1) I wanted to use high performance math and  linear algebra libraries from C, and D can use directly (2) C,C++ are terrible languages and Java is  laborious, so wanted something different			Mixin				Performance	Native interoperability with C								Built-in unittests			Garbage collection							Functional programming paradigm																				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)								It's very easy to write working code, and that  code is both extremely high performance and  almost production ready.	Use of 'long' for array lengths maybe ?  Causes lots of excessive casting	Yes, just tell me how		Meh, I don't care.	2018-03-01 16:24:56	2018-03-03 04:52:49	8e903cbae4
c515144b65929704b32ba09de435d781	Yes	5					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli						Stackexchange	4	Certain language features lacked tutorials and were hard to understand at first.	5		0	4	5	The forum is very barebones and lackluster, it should be upgraded with some fancy features seen on most social media.	1	5		1	Mostly great content	Needs more content.	5	D Forum							5	No, improve DFeed.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly			IoT			Game Development							Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows		Android			Embedded		dmd								Yes, I work with D part time	Visual Studio + VisualD		4	0				4	Better DLL support, better vector support.	It's awesome - keep it as is																				Yes	6	5	4				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc								@nogc containers	better json serialization	better xml serialization										The file part of std.stdio									std.csv		std.demangle				stdx.allocator	stdx.checkedint	stdx.logger														std.socket							std.uri	std.utf			std.windows		std.zlib	std.zip		No, but I want to to					Personal laziness			High barrier to entry						Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)											Poor GC implementation / performance					dub	DLL support on Windows										Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs					Best language yet	On some random site, probably when I was looking for languages that were named after a single letter for jokes.	The existence of a GC helped me a lot to transition from a Java/C# background to lower-level programming languages like C and C++, even if D's GC isn't very good (at least it needs to run on its own thread instead of suspending stuff) and it feels like a chore to deal with other languages' quirks.	core.stdc gives me a @nogc library when I need it. On community side, I think the Derelict project is pretty interesting and useful.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax				Simple, but powerful module system		Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters		Garbage collection	Inline assembler					Multi-paradigm			static foreach					-betterC								DMD support for AVX2	Automatic compilation of imports (dmd -i)				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages			newCTFE		It has the power of C/C++ with the ease of use of more modern languages like C#.	Issues with DLLs under Windows.	Maybe, I miss accountability at the moment		Tabs	2018-03-03 02:34:59	2018-03-03 03:16:22	15b66cf86a
1ec5c080d0f6fdaa448cb84235e6ef9d	No, I have stopped using D		Of the 3 or 4 that I tried at first, there were  no IDEs of an acceptable quality to write a project in.   When exploring regardless of the IDE situation that disqualified it, it was progressively realized that despite the non-beta status and apparently deceptively mature sounding 2.061 version number of the time, too many of the language's so very extremely attractive promises were obscured by implementation bugs that I didn't have the time available to diagnose, learn the compiler source code's design (extremely time consuming  because of perplexing 1-2 character variable names), and fix. My needs were first something that worked as is. 				Language specification										3	Trying to understand why compile-time code (including templates) doesn't work. Mostly issues related to what's explained in a wiki article about the many different "compile times" that exist. At a deeper level, though, I suspect I'll eventually learn that the possibly cyclic nature of writing code that is compilable or not depending on whether excerpts of code are compilable or not isn't as much of a non-issue as the inclusion of that feature in the language would imply.	3	About both the Phobos api and its documentation: the naming and style of things aren't consistent or predictable enough; and the consequences of things (whether things mutate, reference the original, make copies, etc) aren't expressed well enough.		3	4	Spec isn't maintained well enough. 	1	3	Only visited it after the learning from the spec, so I don't know. 	1	Always great content	Nothing. 	2	D Forum						Implementation source code and experimentation. I don't ask enough questions. 	3	Yes, I like StackOverflow.	Slack would also probably be a great option as it implies a greater immediacy and, like IRC, would probably promote a greater feeling of freedom to ask whatever comes to mind. 	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development	Desktop applications					Big Data	Embedded Systems				Consumer Android applications (I checked off embedded systems for this reason) 	Official Windows .exe installer	Official tarballs		Official .deb packages										I compiled D from source					2.076.1 (static foreach)							2.069.2 (initial Objective-C support)				LDC	Linux	macOS	Windows		Android	iOS	WebAssembly			dmd	rdmd	dub					Gradle	Yes, I work with D part time			2	1	3	There are probably way too many obsolete bug reports that need to be updated. Also, I once used read too often that something about the language is admittedly wrong, but that it's too late to do something about that. 		3	Better insight into compile-time behavior. (#2 Documentation on its implementation.)	It's awesome, but I miss a few features	Answering this would take too long. One vague answer, though, is that the annotation system needs reform. 		string interpolation		named arguments	assert diagnostics			UDAs for attributes			writing files at compile-time						2		Yes	3	0	1				Poor naming choices					@safe for all modules																																																																				Yes	3															Non-perfect C++ integration			Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation	Compiler regressions					Non-enterprise IDE support	Poor debugging		DLL support on Windows			Better Android support 						C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library																				Shouldn't using a conservative GC be a deal breaker for actual / professional use? It would appear as if accepting a conservative GC would mean having to be okay with arbitrarily maximal memory usage, no? How could someone accept that in a typical project?	Great, on paper. 		Intended for a web service backend			Mixin	CTFE (static if, static foreach)			Performance		Readable syntax	UFCS				Templates					Garbage collection							Functional programming paradigm		static foreach		DMD as a DUB library		Compile-time format string checking												docarchives.dlang.io	Deprecation of the comma operator				Colorized error messages		Cross-compilation with LDC	newCTFE		Expressive leverage via metaprogramming; performance; mostly familiar syntax; extension functions (UFCS) 			This is so long. 	Spaces	2018-03-02 22:33:10	2018-03-03 03:10:21	bb0cb112ce
8930e36df7a470748fd5ee96ac42412b	Yes	3				tour.dlang.org	Language specification		D Forum: Learn						d-idioms		5	Sometimes I was a bit confused whether certain features were deprecated or not (e.g.: scope).	5		0	3	4	Needs a better code.dlang.org.	1	5		1	Mostly great content	I would love to hear from contributors and what they are working with.	5					My colleagues			4	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly		Desktop applications				Game Development						Daily scripts	Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows	BSD-variant								dub		cmake		scons		No	Visual Studio Code		3	0				5		It's awesome, but I miss a few features	Lack of syntax for closures without GC allocation (value closures?).	tuples		in-place struct initialization	named arguments			multiple alias this						Static inheritance			No	5		Yes	3	5	4						Reliance on the GC				@nogc		Performance					std.eventloop					std.database	std.i18n																		std.demangle					stdx.checkedint	stdx.logger					std.mathspecial																									No, and I don't plan to				Time is my only enemy												Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)		Interfacing with C and C++ requires manually re-writing of headers in D. This is a no-go when depending on several existing libraries. Also the lack of some features when interfacing with C++ (like constructors). I'm looking forward to the third-party tool Capylso.					Poor GC implementation / performance						DLL support on Windows						Attribute bloat	Virtual by default								Little marketing / no evangelists												Lack of focus at the management level				Pleasing to read (s/read/write/ as well)	I don't remember.	I was looking for an alternative to C++.	gtk-d		Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++		Templates		Built-in unittests	In, out, ref parameters				Contracts								opt-in GC and runtime													Automatic compilation of imports (dmd -i)					New third-party applications (e.g. Tilix)				Cross-compilation with LDC	newCTFE		The readability and meta-programming features.	Virtual by default.	Maybe, I'm still a student	Love <3	Meh, I don't care.	2018-03-02 23:10:29	2018-03-03 00:50:37	067df9d122
cf81b705c712c9bb8a1d480b8632555e	No, I have never used D			Never got the time to try/learn it.						"Programming in D" by Ali Çehreli												4	4																																																																																																																																																																																																																																																																																																																											2018-03-03 00:48:58	2018-03-03 00:50:32	152a58d450
8dcf02083fbf56229fa3841ef267c188	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification					"Learning D" by Michael Parker					3	string-char-dchar-int  conversions	3	Too many template details not enough examples of use.	4	3	4	Forum summary views don't always update correctly. I would like to see a heading for each forum topic, then a threaded view of the posts if I want to view that topic. Now I can have one or the other, bu threaded view for posts makes seeing all topics a pain. 	0			1	Mostly great content	Could use some longer more detailed articles. 	3	D Forum		#d on StackOverflow					3	Yes, I like StackOverflow.	I would like Adam on standby, but that's not going to happen.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications						Embedded Systems			Science/Research		Official Windows .exe installer				Official OSX dmg installer				Homebrew								2.078.3 (latest)													LDC	Linux	macOS	Windows					Embedded		dmd		dub						No	Sublime		3	0			I'm usually never sure if the problem is mine or the compiler or library.	4	Better error messages.	It's ok	@safe etc should be default, and I should only have to add decorators when I want to mark unsafe code.	tuples															No		What specification? Is TDPL the specification?	Yes	4	3	2		Auto-decoding for strings		Poor naming choices					@safe for all modules					More/better container classes			std.eventloop					std.database			std.decimal		std.image			Regex. Not sure what is accepted or how to parse captures.	std.base64																																													Better documentation. More examples.	No, but I want to to			Finding good issues to get started	Time is my only enemy						I am just starting to learn D													Poor Phobos (Standard Library) documentation					Nothing									Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language						Lack of good examples / tutorials									Wrong decisions at the management level			Powerful, readable, familiar.	Not sure	Cleaner alternative to C++.	Phobos.	Ranges & std.algorithm						Native interoperability with C	Readable syntax	UFCS																																	Runnable examples on dlang.org								Cross-compilation with LDC			I like to learn new languages. This one looks as promising as Python.				Spaces	2018-03-02 23:16:51	2018-03-02 23:49:55	655bac86d4
6c170c9ba6da83b1b46bf7feef77a244	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli					d-idioms		4	interoperation with C libraries is really far from seamless, especially with DMD	4		0	4	4		1	3		1	Mostly great content		3	D Forum		#d on StackOverflow					3	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly		Desktop applications				Game Development							Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows		Android					dmd	rdmd							No		Code::Blocks	3	0				4	understanding of more object file formats	It's awesome - keep it as is																				Yes, but only for some projects	5	4	2						Reliance on the GC				@nogc		Performance	More -betterC support	More/better container classes				@nogc containers																																																											No, and I don't plan to										I am just starting to learn D							Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance	I prefer C-style manual resource management, which D seems to actively discourage					DLL support on Windows		D's dependence on a large and bulky runtime				Attribute bloat													Lack of good examples / tutorials				Nothing.									probably from someone complaining about C++	D templates, mixins and CTFE are an excellent feature set unmatched by any other language without sacrificing low-level control			Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax		-betterC	Closeness to C/C++	Simple, but powerful module system	Templates										std.concurrency & std.process	Multi-paradigm	Functional programming paradigm			opt-in GC and runtime		Templated vector operations		-betterC										Runnable examples on dlang.org								Cross-compilation with LDC			I want to reduce template bloat in my existing C++ projects by converting some/all files to D	slices sometimes need the runtime even if I know they won't allocate	Maybe, I'm still a student	(int n)=>{return n;} is awful, please disallow	Meh, I don't care.	2018-03-02 21:15:47	2018-03-02 22:04:53	d8d3959ba0
695d7cc23e10ff83b666861505de94cb	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			4	Understanding the difference between arrays and Ranges and realizing that D is not C++.	5	What is lacking is some guidance on how Phobos should be used in a Software Project. How do all these Sublibs fit together? It would be awesome if there was a d sample project in which this could be showcased. Maybe a Text editor written in D.	0	4	3	List of features open source projects which use D in an idiomatic way. Latest changes in D and Phobos.	0			1	Mostly great content	I would like to have more content about the d language. Idiomatic usage, pitfalls, Tipps and Tricks, how do hughe projects build their products.	3							I have mostly found the answeres myself somewhere in the Internet	4	I don't care.	Nope.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely								Embedded Systems					Official Windows .exe installer														MacPorts		2.078.3 (latest)													DMD	Linux	macOS	Windows					Embedded				dub	make	cmake			Boost.build	No	emacs		4	0			I havent found issues	4		It's awesome, but I miss a few features						assert diagnostics										Pattern matching	No	4		Yes	4	4	5					Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules					More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization			std.i18n	std.benchmark	std.decimal						std.base64	std.bigint	std.bitmanip	std.compiler	std.complex							std.digest			stdx.allocator		stdx.logger					std.mathspecial		std.outbuffer							std.socket						std.uni	std.uri				std.windows		std.zlib	std.zip		No, and I don't plan to					Personal laziness							Nothing										Nothing								Poor debugging					Build infrastructure for bigger projects	Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects							Nothing.							Marketing.	Better than C++.	In a blog Form Bartosz Milewski.	Close to C++. But better Metaprogramming capabilities.	Unittest.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)						UFCS		Closeness to C/C++		Templates		Built-in unittests			Garbage collection		Contracts	Debug attribute			Multi-paradigm				opt-in GC and runtime				-betterC		New range functionality (substitute, slide)	toString with output ranges							Runnable examples on dlang.org													No, I'm not interested into D		Spaces	2018-03-02 17:15:15	2018-03-02 21:19:07	16d71562bf
710c646e228ae93a81b70ce8ca88cb93	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli							4	All the 'auto' return types in the function definitions in the standard phobos library reference.  Often just stating the minimal 'range' type would have been more useful.	3	(same answer as c. above) All the 'auto' return types in the function definitions in the standard phobos library reference.  Often just stating the minimal 'range' type would have been more useful.	4	3	5	The fact that the SSL certs are often out of date and Firefox on CentOS 6 can't load some of the pages.  Namely: https://tour.dlang.org/	1	4	Can no longer access the site due to an SSL problem.	1	Huge variance in quality	Would appreciate more stories about using D on larger projects such as games, or corporate infrastructure	5	D Forum							5			No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly											Science/Research				Official .rpm packages						Homebrew														2.072.2 (native TLS on OSX 64-bit)							DMD	Linux	macOS			Android					dmd		dub	make					Yes, I work with D part time	Visual Studio Code		2	0			Haven't encountered a bug in dmd or dub	4	(minor) Specifying output target path a single option instead of directory and filename separately	It's ok	(minor issue) It's hard to tell what a line of code does.  For example what does this line do:      unseen; It looks like an error, a no-op line but it actually calls the function unseen().  I would prefer D to have a little more explicit syntax sometimes.  Especially to attract developers from python (and to a lesser extent java). 															It already has so many. Please don't add anymore.	No			Yes	3	1	4								No default screen widget set (I know this is hard to do, but java came with Swing)							1. getopt help text that looks formats nicely in a terminal window, 2.Some standard-ish screen widget set preferably vector based.		std.eventloop				std.graph		std.i18n				std.image	std.drawing (2D)	Common widget set useful for Desktop and Mobile	Templates, since I come from Python/C land, however this doesn't mean there is anything wrong with them.				std.compiler							std.demangle				stdx.allocator	stdx.checkedint		std.functional					std.meta																							1. A very nice command line argument parser and help text formatter that understood terminal widths and could output to a variety of formats including html. 2. Some standardized screen widgets.  These can be simple but should work for mobile and desktop graphics. 3. Anything that helps python/D interoperability.	No, and I don't plan to				Time is my only enemy						I am just starting to learn D		Nothing										Nothing							Non-enterprise IDE support							Nothing															Lack of good examples / tutorials				Nothing.							People are followers.  People I talk to just want to know who your corporate sponsors are.  I sometimes say facebook which makes them happier about using D, but it's not a truthful answer.  If someone, say Amazon or Facebook or Netflix became an unabased D promoter it would help your cause, though that shouldn't matter, python dosen't have one.	Terse, compatible, obtuse.	My own search.  Probably a free to read Dr. Dobbs article on the internet.	Because python is too slow, Java is verbose and restrictive, and I turned away from C++ years ago after reading too many 8-page compiler errors. I needed something faster than python and looked at Go, and D.  D didn't require an interface layer so it would make it easier to reuse my legacy C and Fortran code and since it supported many different programming styles I felt it wasn't telling me how I was supposed to do my job.  To boot, Andrei's book was a joy to read.  So I translated a couple of my python scripts in to D and noticed that the line count was roughly similar.  So between the fact that D seemed to be efficient in terms of programmer time and very approachable introductory book, I started writing in D.	Phobos (not really using much else yet)							Native interoperability with C							Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters		Garbage collection						Multi-paradigm							Compile-time format string checking																vibe.d 0.8						Python is slow	Universal function call syntax (explicit is usually better than implicit for long term readablity)	Yes, I'm already doing so	I'd like to thank user 'Seb' from the forums.  If you know this person in real life please tell them their time is appreciated. Also TABS RULE!  Spaces are for indentation dictators.  Can't we all just set our own tab spacing however we like and all be happy? 	Tabs	2018-03-02 18:50:26	2018-03-02 20:39:50	230da74028
0665ce6bf39d954fac5d3d796d3a25f1	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification								d-idioms		5		4		5	4	4		0			0			3						I don't need help		5	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications				Game Development							Official Windows .exe installer	Official tarballs												I compiled D from source			2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub						No	Sublime		3	0				4		It's awesome - keep it as is																				Yes	3	4	4							Fear to do breaking changes			@nogc							std.eventloop	@nogc containers		better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)			std.base64	std.bigint		std.compiler							std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial	std.meta	std.outbuffer	std.parallelism					std.signals	std.socket	std.stdint						std.uri									No, but to other D repositories			Finding good issues to get started		Personal laziness							Nothing										Nothing						Nothing								Nothing										Less corporate support (including jobs) than other languages									Nothing.								Down to Earth	Saw The DPL by Andrei in a bookstore.	The DPL had an attractive cover / spine.	std.bitmanip	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system						Garbage collection						Multi-paradigm				opt-in GC and runtime																									It's a Swiss Army knife. Lots of power per line.	Modules and namespaces can be tricky sometimes.	Yes, just tell me how		Meh, I don't care.	2018-03-02 18:11:35	2018-03-02 18:59:35	9aefea0ea4
83198e879cd501f19be8a4e4f3920ae1	Yes	3								"Programming in D" by Ali Çehreli							3	Some concepts were not easy for me	3	needs lots of examples 	5	3	3	it changes	0			0			5	D Forum							5	I don't care.	no	Yes, it was hard to find out why.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily												Database	Official Windows .exe installer																2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd								No		ultraedit	5	1	3	sometimes very slow to get fix		4	assembler output	It's ok	not sure				named arguments			multiple alias this									No	4	not sure	Yes	0	3	2												Performance																																																																more functionality, better regex	No, but I want to to					Personal laziness					I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)									Nothing						Nothing																													Frequent breaking changes					Still relies on C code	really cool stuff	orasrp	it seems interesting	stdio						Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler	Contracts																												Colorized error messages					I like it	Windows install!!			Meh, I don't care.	2018-03-02 18:10:11	2018-03-02 18:32:42	ad08b1698e
6c01b54b04a8f385813e3fcc319cb1b8	Yes	3					Language specification										3	Compiler bugs & Documentation & Examples	3	Few examples (maybe not in the documentation itself)	0	3	4		0			1	Mostly great content		4						I don't need help			I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly						Game Development							Official Windows .exe installer																	2.077.1 (latest LDC)												LDC			Windows							dmd								No	Visual Studio + VisualD		3	0				3		It's ok				in-place struct initialization													No	3		Yes	4	4	4					Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes					Performance			Database & Base UI support				better json serialization	better xml serialization		std.database				std.color	std.image	std.drawing (2D)				std.bigint			std.complex				std.csv		std.demangle					stdx.checkedint																															No, and I don't plan to				Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems								Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows													Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects																				Mixin	CTFE (static if, static foreach)																																																						Spaces	2018-03-02 17:59:43	2018-03-02 18:11:55	8d041e5ca5
a7437641143ec2a74bece5e2c39ebe75	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli						Co-workers	4	Understanding compiler error messages Had a hard time finding beginner-friendly examples/how-tos	4		1	4	4		0			1	Mostly great content		3					My colleagues			4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily							Big Data																				DVM														2.078.0	DMD	Linux											dub	make					Yes, I work with D full time	Sublime		4	0				4	LDC to be up-to-date with DMD	It's awesome - keep it as is																				Yes	2	5	4				Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes			@nogc		Performance									std.graph			std.benchmark						std.json			std.bitmanip		std.complex						std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer						std.signals	std.socket	std.stdint		std.system							std.variant	std.windows	std.xml			Rename std.stdio to std.io	No, but to other D repositories			Finding good issues to get started	Time is my only enemy				High barrier to entry				Nothing													Poor compiler error messages						dub					Nothing								Nothing											Nothing.								fast clean powerful	co-worker	for my job	std.algorithm	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance			UFCS				Templates		Built-in unittests																Compile-time format string checking			New range functionality (substitute, slide)										Deprecation of the comma operator				Colorized error messages		Cross-compilation with LDC			speed/flexibility primary language for my job		Maybe, I miss accountability at the moment		Spaces	2018-03-02 16:54:14	2018-03-02 17:50:47	421a21b604
4e4c35e948fdd40a9dff8ca0fabf98ee	Yes	4				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							4		4	More examples.	1	4	5		1	4		1	Mostly great content	More news about D.	4	D Forum							4	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly		Desktop applications									Science/Research	Custom CLI tools				Official .deb packages													2.078.3 (latest)													DMD	Linux				Android								make					No	Atom		4	1	2	No response at all after several days. I would like, at least, to have feedback from developers.		4	To release the backend as an open source project.	It's awesome, but I miss a few features				in-place struct initialization	named arguments	assert diagnostics											Yes, but only for experimenting/testing/debugging	4		Yes	1	5	5						Reliance on the GC	Fear to do breaking changes	Putting open curly braces on the next line of the sentence (refer to Doom's main programmer, John Carmack, to know why).		@nogc		Performance	More -betterC support				std.eventloop	@nogc containers					std.i18n			std.color									std.complex										stdx.allocator		stdx.logger																														No, but I want to to				Time is my only enemy													Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems								Poor GC implementation / performance								D's dependence on a large and bulky runtime		Nothing										Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs					Favorite programming language.	In the web, more than ten years ago.	I liked its syntax a its powerful template system.		Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C	Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates								Debug attribute			Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime										Reproducible builds							New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)				Cross-compilation with LDC			Its syntax, template system and powerfulness.	Depends on GC and no easy way to add manual memory management and/or custom memory allocators integrated with D syntax.	Maybe, I miss accountability at the moment		Tabs	2018-03-02 16:55:20	2018-03-02 17:25:36	02963ede34
72f9db17df5f0bbed2a94c515415ef0d	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn								4	Compile time vs running time differentiation.	3	Some pages have very limited (if any) examples.	4	4	4		1	4		0			2					My colleagues			4	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily	Web development				Security		Big Data							Official tarballs		Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub						Yes, I work with D full time	Atom		1	0				3	Verbose error messages.	It's awesome - keep it as is																				Yes	6	4	3							Fear to do breaking changes							More/better container classes					better json serialization	better xml serialization		std.database		std.benchmark			std.image	std.drawing (2D)													std.demangle																													std.uuid				std.zlib			No, but I want to to			Finding good issues to get started	Time is my only enemy				High barrier to entry		I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)						Issues with language feature X (e.g. shared, @property)						Poor compiler error messages					Poor debugging		DLL support on Windows				Nothing															Lack of good examples / tutorials				Nothing.								Everything C++ isn't	Employer	Employer							Performance	Native interoperability with C	Readable syntax		-betterC	Closeness to C/C++	Simple, but powerful module system	Templates									import("myfile")			Functional programming paradigm				DMD as a DUB library			-betterC			toString with output ranges							Runnable examples on dlang.org											The community	Initial learning curve.	Maybe, I miss accountability at the moment		Tabs	2018-03-02 17:13:04	2018-03-02 17:24:57	421a21b604
ff40e5a2e4aa0bf92dfcc5d9a786728f	Yes	4							D Forum: Learn							Learn to Tango with D	3		4	Discoverability could be better	3	4	4		0			1	Mostly great content		5					My colleagues	I don't need help		4	No, the D.Learn forum is fine.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily							Big Data				Science/Research																dvm				2.076.1 (static foreach)											DMD	Linux									dmd		dub	make					Yes, I work with D full time		kakoune	2	1	3	Bugzilla seems really antiquated and can be confusing		4	String interpolation a la C#, PHP, etc.	It's awesome, but I miss a few features	Lack of string interpolation, first-class tuple support	tuples	string interpolation														No	4		Yes	3	5	4					Old modules like std.outbuffer or std.socket									More/better container classes					better json serialization									std.drawing (2D)		std.json, std.xml, std.socket		std.bigint			std.complex		std.container																	std.outbuffer																							Yes	4											Nothing										Nothing						Nothing								Nothing									Fewer third-party libraries than other language										Nothing.							General lack of data science libraries	Performant and productive	Co-worker	Performance without being C++		Ranges & std.algorithm					Performance		Readable syntax					Templates					Garbage collection							Functional programming paradigm		static foreach							New range functionality (substitute, slide)										Deprecation of the comma operator											Maybe, I miss accountability at the moment		Tabs	2018-03-02 16:54:15	2018-03-02 17:16:10	421a21b604
2c36f543f1db0eee049de59ea4fa01b4	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	GavergeCollection	5	about std.range(complex referrence)	1	4	4		0			1	Huge variance in quality		3							#dlang on Twitter	5	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications										contest	Official Windows .exe installer			Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows		Android					dmd	rdmd	dub						No		notepad++	4	1	4	little late		5		It's ok		tuples			named arguments			multiple alias this									No	4	tuple is not supported by compiler,want to write clearly	Yes	2	4	2								std.range is complex, std.tuple grammar looks not good	@safe for all modules			Performance																std.drawing (2D)			std.base64		std.bitmanip	std.compiler	std.complex		std.container				std.demangle					stdx.checkedint																												std.zlib			No, but I want to to			Finding good issues to get started		Personal laziness																	Nothing									dub					Nothing											Little marketing / no evangelists															type expression	D is safe	wikipedia	safe,productive,fast										UFCS																																										newCTFE			string based mixin	Maybe, I miss accountability at the moment		Tabs	2018-03-02 15:18:04	2018-03-02 16:01:23	fd43fba630
9e61fd3981c4c9564e544d93bf48b40d	Yes	3					Language specification										3	At the time, some things were not, or poorly documented.	4	Go to implementation/source(s) link. The design could be improved for readability.	0	2	3	The design / layout is very archaic and not super easy to read. It's not very marketable compare with https://kotlinlang.org/ The forums are actually a mailing list - no edit / delete post, etc...	0			0			4	D Forum					I don't need help		4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications		DevOps												Official .deb packages															2.076.1 (static foreach)											LDC	Linux	macOS	Windows	BSD-variant	Android	iOS	WebAssembly				rdmd	dub						Yes, I work with D full time	Visual Studio Code		4	1	3	It's unclear how bugs are prioritised and worked on.		3	An inliner that works.	It's awesome, but I miss a few features	immutable, const, inout, scope, etc... are not very well defined/easy to understand.	tuples		in-place struct initialization				multiple alias this			static break		UFCS for local symbols	Static inheritance			No	5		Yes	5	5	5		Auto-decoding for strings				Reliance on the GC	Fear to do breaking changes			@nogc		Performance		More/better container classes				@nogc containers	better json serialization	better xml serialization	std.graph													std.compiler					std.csv		std.demangle					stdx.checkedint	stdx.logger			std.json		std.mathspecial		std.outbuffer						std.signals		std.stdint						std.uri				std.windows	std.xml	std.zlib	std.zip	more and better containers	Yes	4	there were some issues setting up the build											Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough				Performance problems	Issues with language feature X (e.g. shared, @property)					Compiler regressions	Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging			Missing support for platform X	D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat							Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow							Too much low-level focus (C/C++)			Lack of focus at the management level	Wrong decisions at the management level		Small community	Nicer than C++	Andrey's Talk	Seemed nicer than C++	std.algorithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits			Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates					Garbage collection						Multi-paradigm	Functional programming paradigm		static foreach							New range functionality (substitute, slide)	toString with output ranges		Back referencing of mangled symbols			DMD support for AVX2					New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8		DCompute	Cross-compilation with LDC	newCTFE				Maybe, I miss accountability at the moment		Tabs	2018-03-02 14:53:31	2018-03-02 15:27:41	2d428ee7b9
854cf16bafdf6db4a72cbee97ac9aedc	Yes	5					Language specification										2	Documents are not enough.	5	It is unclear that what module are not recommended.	1	4	5	I cannot easily find pages I want to view.	0			0			3							#dlang on twitter	5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily											Science/Research	Signal Processing for Wireless Communications									Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows									dub						Yes, I work with D full time	Visual Studio Code		3	1	2	I think someone hesitate to report issue		5		It's awesome, but I miss a few features		tuples			named arguments							writing files at compile-time	UFCS for local symbols	Static inheritance			Yes, but only for experimenting/testing/debugging	5		Yes	4	6	5					Old modules like std.outbuffer or std.socket	Reliance on the GC							More -betterC support	More/better container classes				@nogc containers	better json serialization	better xml serialization																	std.container																	std.outbuffer							std.socket												std.xml	std.zlib	std.zip		No, but I want to to								High barrier to entry								Non-perfect C++ integration							Poor Phobos (Standard Library) documentation			Poor GC implementation / performance			Non-enterprise IDE support							Nothing												Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X		No good point for learning D	Few transition guides from programming language Y				Frequent breaking changes	Lack of progress on DIPs					My best language	on the Internet	Because D is similar to C.	std.numeric	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits			Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests									Multi-paradigm			static foreach		DMD as a DUB library			-betterC																			newCTFE				Maybe, I'm still a student		Spaces	2018-03-02 14:51:11	2018-03-02 15:13:19	b3f5e74f18
870602db9acdd39df57479b83e0dd302	No, I have never used D			small library  bad ide integration		tour.dlang.org	Language specification										3		2	not typical reference documentation standard	1	4	3		1	4		1	Mostly great content		3									Yes, I like StackOverflow.					Web development	Desktop applications	IoT								Science/Research		Official Windows .exe installer																	2.077.1 (latest LDC)													Linux	macOS	Windows		Android		WebAssembly			dmd								No	Visual Studio + VisualD		1																																																																																																																																																																																																																																							2018-03-02 14:43:20	2018-03-02 14:52:41	26b0b0e5c1
775e59429e6da1499107877ac0d0de05	No, I have stopped using D																								0			1																																																																																0				3		It's ok		tuples		in-place struct initialization	named arguments												No			Yes	3	3	2				Poor naming choices								Performance		More/better container classes												std.color	std.image																																																	The module name "std.uni" is really bad.	No, and I don't plan to																																																																					CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax					Templates											Multi-paradigm													Back referencing of mangled symbols							Deprecation of the comma operator							newCTFE						Tabs	2018-03-02 13:16:03	2018-03-02 13:43:43	8acf77d0e2
1eceb9e7b4fb3587080e87226f280207																																																																																																																																																																																																																																																																																																																																																		2018-03-02 13:15:47	2018-03-02 13:15:57	8acf77d0e2
39b92cd0d86f78e81c26cf1f966672b6	No, I have stopped using D						Language specification										3				0	3	3	Front page is too full and messy. More very simple examples. 	0			1															Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely									Machine Learning		Science/Research								d-apt Debian/Ubuntu																								Linux	macOS	Windows															No	Visual Studio Code			0																																																																																																																																																																																																																																						2018-03-02 13:00:46	2018-03-02 13:15:18	8acf77d0e2
a751b1d5b742c13d7113d54a88275e7a	No, I have stopped using D		no tools, bad dll, bad for windows				Language specification									was with it from beginning - now stopped	3	templates everywhere	2	professionalism	0	2	3	nothing is really up to date	0			0			0	D Forum							2	I don't care.	no	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications							Machine Learning		Science/Research		Official Windows .exe installer																2.078.3 (latest)	2.077.1 (latest LDC)										D1		DMD	Linux		Windows							dmd							vs2017	No	Visual Studio + VisualD		3	0			never gets done, probably retire before that	1	more like d1, no template hell, more windows support	It needs serious work	script like															care no more - let andralex order it	No	1	no/weak better c	No	0	0	3				Poor naming choices		Reliance on the GC							More -betterC support	More/better container classes				@nogc containers												template hell		std.bigint							std.csv												std.math	std.mathspecial											std.string									std.windows					No, and I don't plan to											linux centered		Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC						Poor Phobos (Standard Library) documentation			Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows		D's dependence on a large and bulky runtime				Attribute bloat			C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language			Few showcases / flagship projects			Lack of good examples / tutorials					Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level			not any more	inet/mars	interest - seemed promising			Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C			-betterC					Built-in unittests	In, out, ref parameters	@safe strings + arrays			Contracts							static foreach					-betterC																							No, I don't like the management of the DLF		Meh, I don't care.	2018-03-02 12:06:22	2018-03-02 12:33:41	50e3b6d20c
2b7c5d310292a37f270ddb7f4b4af552	Yes	4														self-taught using many of the above resources	4	understanding templates and template syntax	4		0	5	2		0			0			5			#d on StackOverflow					4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications											Official Windows .exe installer																2.078.3 (latest)													DMD			Windows									dub						No	Visual Studio Code		3	0				4		It's awesome, but I miss a few features	using parens for templates, lack of true property support	tuples	string interpolation		named arguments		language binding to X						UFCS for local symbols				No	4		Yes	2	4	6				Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes							More/better container classes					better json serialization	better xml serialization				std.benchmark		std.color	std.image	std.drawing (2D)		the json and xml modules are a source of constant headache																																std.stdint															No, but I want to to					Personal laziness									Missing language feature X / not moving fast enough								Nothing							Non-enterprise IDE support			DLL support on Windows				Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages												Lack of progress on DIPs										Mixin	CTFE (static if, static foreach)	std.meta	std.traits		Native interoperability with C		UFCS			Simple, but powerful module system	Templates					Garbage collection							Functional programming paradigm		static foreach		DMD as a DUB library		Compile-time format string checking											Runnable examples on dlang.org															Spaces	2018-03-02 11:46:09	2018-03-02 12:22:17	d966a83b83
89b5ded2a70feebeb947ed0208e877d6	No, I have stopped using D		Changed Jobs where I code much less, for one time tasks I use Python or C as I want Things Just to work Quickie and there are more resources and reference for these languages													Sociomantic internal chat was a gold mine	3	Learning the effect of reusing an array with array stomping  and such. Practice using const system especially when it is combined with arrays. Deciphering recursive tenplate errors, not because they are long but because they complain about the wrong thing.	4	Minimal examples are provided. One should explain more with examples than writing description.	0	4		The website imo should  focus on mainly advertising the parts that are most likely to be where the visitor get their answer: - Downloads - Documenta - Forum - dlang Tour - dub - other:    - licensing    - D foundation    - Vision document	1	2	Missing side Panel to jump to a topic particularly (at least on phone). IMHO the tour is more focused in the beginning on the new big stuff that were added to D (especially that are Walter's currently Focus) rather than the classical D things that makes great already or that maybe aren't used a lot by the community but are very sexy to sell: - UFC - String mixins and mixin Imports - static foreach and compile-time evaluation - How simple function templates are, and the more sexy (T...)  - slices, foreach (they are there but just mentioning as they are nice to keep) - auto declarations and returns (already there also)	0			4	D Forum				My colleagues			5	Yes, I like StackOverflow.			Go ahead and break code, even for the "little things", but do so through a gradual, managed process.									Embedded Systems			Science/Research	Used to b Backend services	Official Windows .exe installer			Official .deb packages													2.078.3 (latest)											D1		DMD	Linux		Windows					Embedded		dmd	rdmd								Visual Studio Code		3	0			Part of it is the 80 bugzilla UI, it feels Like If I click submit that an 80 mainframe will process my issued into the void	4	- a document that is Part of the repo which explains which package and module are responsible for doing what. 	It's awesome, but I miss a few features	@safe const(T[const[long]) pure functionName(T, C)(auto ref int param, inout T param, scope C instance)  nothrowif (isRange(C) && isInistaiable(C))  How anyone can not get intimidated and Not feel lost			in-place struct initialization	named arguments															Yes, but only for some projects	3	4	5						Reliance on the GC				@nogc		Performance	More -betterC support			I'm happy as is.															std.base64	std.bigint		std.compiler	std.complex	std.concurrency	std.container				std.demangle	std.digest	std.encoding		stdx.allocator			std.functional				std.mathspecial		std.outbuffer	std.parallelism							std.stdint		std.system		std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant		std.xml	std.zlib	std.zip	A good HTTP server, don't want to install Viber for quick tests	No, but to other D repositories			Finding good issues to get started	Time is my only enemy	Personal laziness								Language complexity (e.g. inout, abuse of mixin)								Lack of libraries to get me started on quick Project. Also I'm unsere about the correctness about some implementations				Poor compiler error messages		Big executables,. I would Love but not able to run it in Arduino			Poor debugging	dub		Missing support for platform X	D's dependence on a large and bulky runtime							C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages					Lack of good examples / tutorials						Frequent breaking changes					I don't hate the GC, but I don't like that many language features requires GC behind the scene (slices copy in write, nested functions Sometimes,...) you find that you've been unawarely tricked into using it. A very helpful tool would point to you everyone point that initiates the GC.	Maintainable code and can be fast	When applying to Sociomantic	Sociomantic	Ocean and derelict bindings	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance			UFCS	-betterC		Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection		Contracts	Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking	-betterC									Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org		Deprecation of the comma operator				Colorized error messages		Cross-compilation with LDC	newCTFE		Can create xompile-time guarantees that code will stay in sync (e.g this enum has this corresponding array that has the same length)		Maybe, I'm still a student	I think it'll be a huge push for D If one can import C modules with an import statement or such. Heck, an overkill approach can even be a tenplate that parses C code nd converts it to D code	Spaces	2018-03-02 09:26:41	2018-03-02 11:09:35	3daa4b4776
4c1b9a1c6f8c4c98ce3ebbdaa79b19d0																																																																																																																																																																																																																																																																																																																																																		2018-03-02 10:57:26	2018-03-02 10:57:42	884c8ca0c7
bfaa7112533f27331b8bb648c9c619bf	Yes	4					Language specification			"Programming in D" by Ali Çehreli					d-idioms		3	The documentation is lacking.	2	The documentation is sparse compared to Qt. Too few examples. The module overview doesn't have full function signatures.	0	2	2	There is too much going on on the front page.	1	4	It could use more content. I actually really like it.	1	Always great content		5						I don't need help			I don't care.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications				Game Development		Embedded Systems				Apps								Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux				Android							dub						Yes, I work with D part time		KDevelop	1	1	3	Bugzilla feels heavy/slow/unfriendly. The process itself is fine.		3	Fix the extreme memory usage. The frontend is unusable in an IDE at this time because of it.	It's awesome, but I miss a few features	The lack of syntax sugary tuples.	tuples					language binding to X	multiple alias this									No	4		Yes	0	1	2		Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes	std.datetime is unintuitive and missing common things custom date formatting, by far my least favorite module	@safe for all modules	@nogc	DIP1000	Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)		std.datetime, std.container. std.signals is missing the point, it is supposed to help with multithreading.				std.compiler	std.complex										stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt			std.mathspecial		std.outbuffer					std.regex	std.signals	std.socket	std.stdint		std.system				std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib		1. Remove autodecoding. 2. Remove/replace/rework all modules that isn't considered idiomatic. 3. Remove reliance on the C standard library.	No, but to other D repositories				Time is my only enemy	Personal laziness											Non-perfect C++ integration						Nothing													I want to create high quality IDE support but the frontend is unusable due to memory usage		Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language											Too much low-level focus (C/C++)		Lack of progress on DIPs		Wrong decisions at the management level		Ddoc: I really dislike having to write in that macro language.	Out. Of. Memory.	I have forgotten. It was years ago.	As a C++ programmer, D seemed less horrible.	Vibe.d			CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++		Templates		Built-in unittests		@safe strings + arrays	Garbage collection						Multi-paradigm			static foreach		DMD as a DUB library								Back referencing of mangled symbols							Deprecation of the comma operator			vibe.d 0.8			Cross-compilation with LDC	newCTFE		The promise of a replacement for C++.	I dislike them all equally.	Yes, but only for a specific project		Tabs	2018-03-02 09:38:08	2018-03-02 10:38:09	b2264a1720
da276da2d12ec218434232e5059b8239	Yes	4				tour.dlang.org	Language specification								d-idioms		3	Choosing which kitchen sink to use — there's so many!	4	don't know	4	5	5	don't know — but definitely keep the edit and run demo thing!	1	5	don't know — there are things to dislike?	0			4	D Forum						Wherever Google tells me to go	5	I don't care.	nope - I just go where Google points me	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely								Embedded Systems					Official Windows .exe installer																		2.076.1 (static foreach)											DMD	Linux		Windows					Embedded				dub						No	vim / neovim		3	0			never been the first to find an issue to open	5		It's awesome - keep it as is																				Yes	5	4	4				Poor naming choices		Reliance on the GC			@safe for all modules	@nogc						I'm happy as is.														mostly it's just figuring out which variant of a function to use for a given pattern, the names aren't always clear and choosing the wrong one can end up in some odd mysterious happenings																																															No, and I don't plan to										I am just starting to learn D							Dependence of some language features + Phobos (Standard Library) on the GC					Nothing												D's dependence on a large and bulky runtime		Nothing								Nothing											Nothing.							maybe a noob problem, but, with function name collisions before it tends to pour all the functions into one big global pot, making it hard sometimes to get the compiler to chose the right one  (first-run programs tend to have LOTS of "did you want this, that, or the other variant of function X" errors)	kitchen sink warehouse	don't know	there HAD to be something better than C++, and Microsoft has a kitchen franken-sink problem.	GtkD — used to use GTK+ back in the old days	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax					Templates									import("myfile")						opt-in GC and runtime														Runnable examples on dlang.org											it's just a damn nice language, that's woefully under-utilised	CTFE and ranges			Meh, I don't care.	2018-03-02 09:18:16	2018-03-02 10:21:09	cbb64dc513
c17c57fcc17d8456d99ae2cf27bda1f3	Yes	5					Language specification										5	Environment (IDE, integration, project building)	4	Template constraints for same function  (e.g. several definitions of "to" with different constraints that together would be simply no constraint at all and would make the whole signature _much_ more readable and understandable.)	1	3	4		0			1	Mostly great content		5	D Forum							5	I don't care.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly							Big Data	Embedded Systems											d-apt Debian/Ubuntu										2.078.3 (latest)													LDC	Linux		Windows									dub						No	Eclipse		4	1	3	Old stuff is not classified		4	cent / ucent, fp arithmetic at compiletime	It's awesome - keep it as is																				Yes	1	3	3			Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules		DIP1000							@nogc containers					std.i18n		std.decimal		std.image	std.drawing (2D)														std.digest											std.meta	std.outbuffer																							No, but I want to to				Time is my only enemy	Personal laziness															@safe-ty problems / missing DIP1000		Nothing						Nothing												Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)					Less corporate support (including jobs) than other languages																integer propagation should have completely been discarded especially from types like char	awesome 	c't article as D2 has come out	For fun. Best update from C ever. Much, much better design than C++.	Phobos			CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS				Templates		Built-in unittests		@safe strings + arrays							Multi-paradigm			static foreach				Compile-time format string checking							Reproducible builds						Deprecation of the comma operator					DCompute		newCTFE		Can express my ideas short and readable	Problems with shared	Maybe, I miss accountability at the moment		Spaces	2018-03-02 09:11:12	2018-03-02 10:10:16	a6b5114557
1b0ace2b8cf5b11f58288307d883dfdd	No, I have stopped using D				"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			5		3	Return types of template functions	0	5	5		0			1	Always great content		5	D Forum			dlang.slack.com				4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly									Machine Learning		Science/Research		Official Windows .exe installer						d-apt Debian/Ubuntu												2.076.1 (static foreach)											DMD	Linux		Windows		Android					dmd		dub		cmake				No	Eclipse		3	1	4			3	Consistent speed of compilation	It's ok	Too many unfinished stuff														Nothing - D is already awesome		No	5		Yes	3	3	4		Auto-decoding for strings				Reliance on the GC				@nogc	DIP1000			More/better container classes				@nogc containers																																																											No, but to other D repositories			Finding good issues to get started	Time is my only enemy	Personal laziness			High barrier to entry					Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000							Compiler speed		Non-enterprise IDE support	Poor debugging	dub			D's dependence on a large and bulky runtime			Auto-decoding of strings											Few showcases / flagship projects				No good point for learning D									Too much focus on language, too little on the tools	Tools almost always don't work by default. Just try to install an IDE with code completion on a fresh machine	Ambitious C++ replacement				Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C				Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests									Multi-paradigm				opt-in GC and runtime										Reproducible builds				Runnable examples on dlang.org						Colorized error messages			newCTFE		Shorter code means that I can maintain more features on my own in my hobby project		Maybe, I miss accountability at the moment		Spaces	2018-03-02 09:02:16	2018-03-02 10:08:52	5da7d61e4b
5547b3a70dcd2a8a3f29b7731043b79b	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli							3	mixins, immutable/const, in/out	4	need more examples 	4	2	2	need simplification. To many unneeded information	0			1	Always great content	it's perfect! Big thanks! maybe only design	4	D Forum		#d on StackOverflow					4	Yes, I like StackOverflow.	 	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development	Desktop applications											Official Windows .exe installer															2.079.0 (nightly)														DMD			Windows				WebAssembly	Embedded				dub						Yes, I work with D part time	Sublime		2	0			to complex to do it	4	better error messaging	It's awesome, but I miss a few features	sometimes to complex: Mixins, in/inouts 		string interpolation	in-place struct initialization													No	3		Yes	2	2	1		Auto-decoding for strings							@safe for all modules								std.eventloop		better json serialization	better xml serialization		std.database			std.decimal	std.color	std.image	std.drawing (2D)		current json/xml implementation																				std.json																							std.xml	std.zlib	std.zip		No, but I want to to				Time is my only enemy								Nothing													Poor compiler error messages							DLL support on Windows					Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library			Fewer third-party libraries than other language										Nothing.														CTFE (static if, static foreach)					Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates																DMD as a DUB library			-betterC												Deprecation of the comma operator						Cross-compilation with LDC	newCTFE						Tabs	2018-03-02 08:59:09	2018-03-02 09:37:23	6ed4d3096a
a496781ef0ad0b4d65766d2dfc508dc2	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification										4	no	5		5	5	4		0			0			3	D Forum					I don't need help		3	Yes, I like StackOverflow.		No.	Please don't ever break code.	Daily	Web development	Desktop applications							Machine Learning							Official .deb packages								Docker						2.077.1 (latest LDC)												DMD	Linux				Android	iOS	WebAssembly					dub		cmake				Yes, I work with D full time	vim / neovim		5	0				5		It's awesome - keep it as is																				Yes	5	6	6	Nothing - Phobos (Standard Library) is great					Reliance on the GC					DIP1000	Performance					std.eventloop					std.database													std.complex												stdx.logger																									std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to			Finding good issues to get started									Nothing			Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)											Poor GC implementation / performance			Non-enterprise IDE support							Nothing								Nothing											Nothing.													Mixin		std.meta	std.traits	Performance			UFCS				Templates														static foreach					-betterC																							Maybe, I miss accountability at the moment		Spaces	2018-03-02 09:07:59	2018-03-02 09:23:24	a92e49f0f5
5b4c69faea2cdde636addc4828535a4d	Yes	4					Language specification										4		3		0	5	5		0			1	Mostly great content				#d on IRC							No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly												Mobile Development															DVM		2.078.3 (latest)													DMD		macOS								dmd		dub						No	Atom		2	1	3			4	First class optionals/non-nullables	It's awesome, but I miss a few features	Constants being enums instead of aliases	tuples	string interpolation		named arguments								UFCS for local symbols			Swift-like enums	No	5		Yes	3	5	2							Fear to do breaking changes	Hard to find correct module, need more umbrella modules				Performance		More/better container classes				@nogc containers	better json serialization							std.color	std.image	std.drawing (2D)				std.bigint													stdx.allocator	stdx.checkedint	stdx.logger													std.signals																	No, but to other D repositories					Personal laziness			High barrier to entry													Missing mac shared library support									Poor debugging					Poor mac tooling 									Nothing															Lack of focus at the management level								Ranges & std.algorithm		CTFE (static if, static foreach)			Performance			UFCS			Simple, but powerful module system	Templates					Garbage collection							Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library								Back referencing of mangled symbols							Deprecation of the comma operator													Spaces	2018-03-02 07:57:37	2018-03-02 08:12:18	4aee66b4e6
ca7ad3d351899e187f55a0bfc39cd6cd	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org			D Forum: Learn								4		3		0	4	5		1	5		1	Mostly great content		4	D Forum							4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly							Big Data			Kernel Development	Science/Research															I compiled D from source			2.078.3 (latest)													LDC									SmartOS	dmd	rdmd	dub						No	Visual Studio + VisualD		4	0				4		It's awesome - keep it as is																				Yes	2	4	2		Auto-decoding for strings										Performance							better json serialization								std.image	std.drawing (2D)		SmartOS				std.compiler							std.demangle											std.mathspecial																									No, but I want to to								High barrier to entry					Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)					Compiler regressions					Non-enterprise IDE support	Poor debugging			Missing support for platform X				Auto-decoding of strings								Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages									Nothing.							D is great but not trustworthy for enterprise grade software, not supported on Solaris/SmartOS.					Ranges & std.algorithm						Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system			Built-in unittests				Inline assembler	Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm			opt-in GC and runtime				-betterC								DMD support for AVX2		Runnable examples on dlang.org		Deprecation of the comma operator			vibe.d 0.8		DCompute				productivity without sacrifice, not being locked to a platform		Yes, I'm already doing so		Tabs	2018-03-02 07:25:43	2018-03-02 07:55:08	2911b165e5
6c2f1a110d93b2c5fa3fe01504dd06b5	No, I have never used D			 																																																																																																																																																																																																																																																																																																																																														2018-03-02 07:25:38	2018-03-02 07:26:41	560e9009e3
5dbaa310aa72b681e635423fe0200d22	Yes	4					Language specification										5	Parallelism	4		2	5	5		0			0			4							Twitter(Japanese)	4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly						Game Development					Science/Research																Official Windows .7z package			2.077.1 (latest LDC)												LDC	Linux		Windows									dub						Not applicable	Visual Studio Code		5	0				5		It's awesome - keep it as is																				Yes	6	6	5	Nothing - Phobos (Standard Library) is great								@safe for all modules	@nogc		Performance														std.color	std.image				std.base64			std.compiler		std.concurrency			std.csv		std.demangle	std.digest			stdx.allocator	stdx.checkedint						std.mathspecial	std.meta	std.outbuffer						std.signals	std.socket	std.stdint		std.system													No, and I don't plan to			Finding good issues to get started									Nothing										Nothing						Nothing												Wrong defaults (e.g. not @safe by default)				Nothing											Nothing.									Game development community			Ranges & std.algorithm		CTFE (static if, static foreach)										Templates														static foreach																														Meh, I don't care.	2018-03-02 06:13:57	2018-03-02 07:19:44	286bd5866d
3b3ea98f4c93ce7622705b4f37cbc798	Yes	4			"The D Programming Language" by Andrei Alexandrescu												4	const vs. immutable inout pure functions	4	The blocks of bare names look messy. I would prefer to see a table of items grouped by their purpose with argument lists, return types and item kinds (class/struct/function/template...).	3	4	5	Table of contents of the language reference has no structure or order.	0			0			4	D Forum		#d on StackOverflow					5	Yes, I like StackOverflow.	No	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily											Science/Research		Official Windows .exe installer						d-apt Debian/Ubuntu							I compiled D from source			2.078.3 (latest)													DMD	Linux		Windows									dub						Yes, I work with D part time	emacs		3	1	3	Issues stuck in NEW state for years.		4	An option to show error line numbers in Emacs-compatible format	It's awesome, but I miss a few features	Inconsistent attribute names (with and without @).  Poor support of function purity in Phobos and in language itself (issue 9909).  The word "immutable" is too long (even longer than "constant"). It could be "immut" since there is "const" already.	tuples			named arguments			multiple alias this									No	5	Nothing	Yes	4	5	5		Auto-decoding for strings						Incomplete supporf of const, pure, @safe etc.							Full compatibilty with pure functions and const data				better json serialization	better xml serialization										None	std.base64	std.bigint	std.bitmanip	std.compiler		std.concurrency			std.csv		std.demangle					stdx.checkedint	stdx.logger	std.functional						std.outbuffer	std.parallelism					std.signals	std.socket	std.stdint		std.system			std.uni	std.uri		std.uuid		std.windows		std.zlib	std.zip	std.math: double sqrt(int)  std.complex: isComplex(T)  approxEqual for aggregate types (including std.complex.Complex) similar to toString method used by std.conv and std.stdio.	Yes	4	Long review time																		@safe-ty problems / missing DIP1000				Compiler regressions					Non-enterprise IDE support	Poor debugging		DLL support on Windows					Auto-decoding of strings	Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language													Lack of progress on DIPs				Too many NEW issues on Bugzilla.	Best metaprogramming support	From my friends	More powerful than C. Less messy than C++. Faster than C# and Java. Familiar C-like syntax.	Mir	Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax				Simple, but powerful module system			Built-in unittests			Garbage collection			Debug attribute			Multi-paradigm			static foreach																	Deprecation of the comma operator									Readable syntax	Issue 5710	Yes, but only for a specific project	Nothing	Spaces	2018-03-02 05:42:45	2018-03-02 07:00:58	8d44a54cb7
74df87ac067822e24009bf489b0d7c11	Yes	5				tour.dlang.org										D language refernce, reading through phobos	4	I don't remember	3	The C based libraries are hard to read through	3	4	3	@system is never explained	1	5		0			4	D Forum						google, most questions already have answers	4	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly											Science/Research	student	Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu												2.076.1 (static foreach)										gdc	DMD	Linux		Windows		Android					dmd		dub	make					Not applicable		gedit	4	0			no issue found/ already reported	5		It's awesome, but I miss a few features							language binding to X					writing files at compile-time					No	5		Yes	3	4	5								readln not taking a keepIterator argument						More/better container classes				@nogc containers			std.graph							std.drawing (2D)	std.container.queue, std.container.stack, better std.signals		std.base64		std.bitmanip	std.compiler							std.demangle	std.digest			stdx.allocator	stdx.checkedint																										std.windows					No, but I want to to											low experience prgramming in general					Non-perfect C++ integration						Nothing									dub														Fewer third-party libraries than other language		Little marketing / no evangelists								Nothing.								awesome, fun, comprehensive	Wikipedia	I was looking for a good programming language	don't know (probably std.mathspecial)	Ranges & std.algorithm							Readable syntax				Simple, but powerful module system	Templates		Built-in unittests			Garbage collection									static foreach		DMD as a DUB library						toString with output ranges													Colorized error messages	DCompute				The syntax	to!int not stripping newline at end	Maybe, I'm still a student		Meh, I don't care.	2018-03-02 05:07:15	2018-03-02 05:44:16	670466e447
3421e7ff8c6fcacad1b2d36030c279de	Yes	5													d-idioms	just started hacking using D... the language feels really natural to me	4	documentation, mostly.  it’s getting better, but I still have to look at the source code of eg. phobos to fully understand what’s going on	4	took me quite some time to understand (lesser-used?) modules like std.signals (or w/e)	0	5	5		1	3		1	Mostly great content		4						I don't need help			I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications		DevOps			Big Data														Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												LDC		macOS	Windows	BSD-variant			WebAssembly		anything that’s also an LLVM target			dub					sometimes rake	No	emacs		4	0			never had a real issue which could not be solved by my code ;-)	5		It's awesome, but I miss a few features	consistency, e.g. pure vs @nogc 		string interpolation	in-place struct initialization	named arguments	assert diagnostics				@mutable in immutable		writing files at compile-time					Yes, but only for experimenting/testing/debugging	5		Yes	3	5	5		Auto-decoding for strings				Reliance on the GC							More -betterC support						better json serialization	better xml serialization		std.database		std.benchmark	std.decimal			std.drawing (2D)																	stdx.allocator	stdx.checkedint						std.mathspecial															std.uni					std.windows					No, but to other D repositories					Personal laziness							Nothing											Poor Phobos (Standard Library) documentation		Poor compiler error messages			Nothing								Nothing									Fewer third-party libraries than other language				Little info on StackOverflow						Nothing.								powerful, expressive, awesome	the Internet, I guess.  was looking for new languages to learn	¯\_(ツ)_/¯ 	even though i don’t really use it that much: dplug.  	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler	Contracts		import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC						Reproducible builds							New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)		Colorized error messages		Cross-compilation with LDC					Maybe, I miss accountability at the moment		Spaces	2018-03-02 05:19:52	2018-03-02 05:36:43	3525317425
12620da5a9e8bdad340a791ecab40eb0	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn				"D Web Development" by Kai Nacke				4	not enough information 	5		5	4	5		1	4		1	Mostly great content		5	D Forum							5	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications											Official Windows .exe installer		Official .rpm packages														2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd							Yes, I work with D part time	Visual Studio Code		2	0				5		It's awesome - keep it as is																				Yes	4	5	6	Nothing - Phobos (Standard Library) is great								@safe for all modules					More/better container classes					better json serialization			std.database	std.i18n												std.complex										stdx.allocator	stdx.checkedint	stdx.logger																							std.uuid							Yes	5																				GUI	Nothing							Non-enterprise IDE support							Nothing									Fewer third-party libraries than other language					Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials				Nothing.												Ranges & std.algorithm	Mixin			std.traits			Readable syntax																																															Maybe, I miss accountability at the moment		Meh, I don't care.	2018-03-02 03:14:29	2018-03-02 03:40:29	5810eaa77e
d97746808743ea1db773ff5621568237	No, I have stopped using D		at the job: too busy working on projects that use different tech (mostly webdev) at home: no time, no energy for the most part				Language specification										3	The by far biggest hurdled I had was doing a SIMPLE(!) date parsing and formatting (with and without timezones) back and forth between string<->date and Unix timestamp<->date<->string. I have experience in JavaScript, PHP, Objective-C, Java, and a bunch of others, and I can do that task in those languages quite easily. However, in D it completely stumped me. The documentation didn't really help at first, and I had to re-read it a bunch of times and also do a lot of trial-and-error.	3	Simple, every day tasks (like date parsing and formatting) lack good, real-world examples.  Also, lack of intermediate examples, only providing either completely trivial examples or advanced ones, which both were not helping me solving my immediate problem at hand.	0	4	4	The site itself is fine. Just my points about the documentation above: would be nice to have more real world and intermediate examples. Also: would be nice to post comments and/or own examples right on the documentation for a function/method/class.	0			1	Mostly great content	Nothing specific comes to mind.	3							I don't usually ask questions, but if I had to I would rather try the forum, IRC, or Slack before going to StackOverflow.	4	I don't care.	Slack, IRC and the Forum are good options. Not sure if any more are needed.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development	Desktop applications		DevOps								Mobile Development	Official Windows .exe installer					Official dlang.org/install.sh script			Homebrew		Choco			I compiled D from source			2.078.3 (latest)													DMD	Linux	macOS	Windows			iOS						dub						No	Sublime		3	0			Didn't run into any.	5		It's awesome, but I miss a few features	I am not sure if I ever get used to the ~ operator to concat strings. :-)	tuples	string interpolation		named arguments							writing files at compile-time					No	4		Yes	3	2	2								That some things are not in places I would expect them, e.g. lots of String functions end up coming from the algorithm module. Which was (and sometimes still is) confusing as hell compared to other languages & libraries.	@safe for all modules	@nogc			More -betterC support									std.database	std.i18n			std.color	std.image	std.drawing (2D)		Date, Time, timezones and the whole to/from-string-parsing/formatting.		std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle				stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer						std.signals	std.socket															Maybe "make the easy things easy, and the hard things possible"?	No, but to other D repositories				Time is my only enemy	Personal laziness							Nothing										Nothing						Nothing															Time	Nothing											Nothing.							It probably has, and you most likely identified a lot of them yourselves. My only issue with D right now is: I don't have time to use it (more often).	C/C++ awesome nephew.	I don't quite remember, but it might have been reddit.com/r/programming.	Because it looked like C/C++ on steroids - in a good way.	I'll go with Phobos, since it is the only one I have used a lot.			CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax				Simple, but powerful module system			Built-in unittests			Garbage collection		Contracts				Multi-paradigm	Functional programming paradigm	The "version" keyword! Awesome!	static foreach	opt-in GC and runtime			Compile-time format string checking	-betterC						Reproducible builds															Doing mostly webdev for my day-to-day job, using D makes me feel like a proper programmer. ;-)	I think the ~ operator to concat strings is the right answer here. :-)	Maybe, I miss accountability at the moment	Keep getting better, awesome people!	Spaces	2018-03-02 00:30:38	2018-03-02 01:25:56	ba12148094
f64f5407da910168d662bfa0e6932d31	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification						"D Web Development" by Kai Nacke				4	Online-only documentation, editors without popup hints	4	Interface of Phobos site requires a habit	1	4	5	Idiomatic D examples on the front page isn't understandable by users of another C-like languages	0			0			5	D Forum				My colleagues		Russian Telegram channel	5	I don't care.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications														Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows				WebAssembly					dub						Yes, I work with D full time		Geany	3	1	5	A lot of issues that for years remain unresolved.		5		It's awesome - keep it as is																				Yes	3	5	5							Fear to do breaking changes						More -betterC support	More/better container classes			std.eventloop	@nogc containers					std.i18n	std.benchmark						Ranges: it is simple concept, but it is too many types of Ranges and its names isn't obvious.				std.compiler	std.complex				std.csv		std.demangle							std.functional				std.mathspecial		std.outbuffer								std.stdint					std.uni									You can not grasp the infinite. But a code.dlang.org can.	Yes	3																				Sometimes lack of clear understanding: when value are copied and when sent by reference						Too many bugs in compiler								Depend popular C libraries should be able to build by D building tools, otherwice it is lead to rewriting C code into D.					Wrong defaults (e.g. not @safe by default)						Less corporate support (including jobs) than other languages		Few showcases / flagship projects							Nothing.								C++ and C# as it should be done. 		As replacement of C++		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays			Contracts	Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC				Deprecation of the integral promotion for unary operators		Reproducible builds				Runnable examples on dlang.org								Cross-compilation with LDC	newCTFE		The rest is even worse :-)	Templates	No, I'm already donating my free time		Spaces	2018-03-01 12:04:33	2018-03-02 00:09:06	49e1b7f8ab
505665ba3ba16921687b3717bf4fab11																																																																																																																																																																																																																																																																																																																																																		2018-03-01 23:24:30	2018-03-01 23:24:37	91b23fe94c
d422d8d5b93d2b37942888a8af8e1adf																																																																																																																																																																																																																																																																																																																																																		2018-03-01 22:40:52	2018-03-01 22:41:08	0df1335d8b
2fc6dd3a7f7bfa5f12032d20c6e765c8																																																																																																																																																																																																																																																																																																																																																		2018-03-01 22:39:09	2018-03-01 22:39:26	0df1335d8b
dbb144f57054324ef7034c444a47b59b	No, I have stopped using D		* Bad tooling * No way to turn off exceptions (have to spam nothrow everywhere too) * No language support for bitfields (int x : 12; int y : 20;) * No language support to instantiate a class type on the stack. * others... From D I expected a low-level language that I can stack layers of high-level stuff on top of. However, these layers are not as cleanly divided as I'd like them to be.				Language specification		D Forum: Learn							Friends	4	Bad tooling and bad compiler messages / diagnostics (stack traces, etc).	4		0	4	5		0			0			5	D Forum		#d on StackOverflow		My colleagues			4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly		Desktop applications				Game Development							Official Windows .exe installer	Official tarballs		Official .deb packages																										DMD	Linux		Windows							dmd		dub						No	Sublime		1	1	3	It feels very, very old and is not a joy to work with.		4	Compile-time execution of ANY code.	It's awesome - keep it as is																				Yes, but only for some projects	1	2	4			Auto-decoding isn't nothrow	Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc			More -betterC support					@nogc containers	better json serialization					std.benchmark		std.color	std.image	std.drawing (2D)						std.compiler			std.container									stdx.checkedint			std.getopt			std.mathspecial		std.outbuffer						std.signals	std.socket											std.windows				Easy way to completely opt-out of phobos being compiled in my code.	No, but I want to to				Time is my only enemy	Personal laziness									Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)						Poor compiler error messages					Poor debugging	dub	DLL support on Windows		D's dependence on a large and bulky runtime				Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library						Few showcases / flagship projects												Wrong decisions at the management level		D should be a low-level language in the first place and build on top of that. All high-level features should be optional. Compilers should support running arbitrary code at compile-time (not just CTFE) with proper error messages, etc.	Not just yet	Benjamin Thaut taught me.	I was sick of the inconcistencies and lack of features and ESPECIALLY the compile times of C/C++.			Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++		Templates		Built-in unittests				Inline assembler		Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library			-betterC									Automatic compilation of imports (dmd -i)			Deprecation of the comma operator				Colorized error messages		Cross-compilation with LDC			It's quite mature and close to C/C++ with less crap and more useful features that programmers actually need.	Fast compile times / bad tooling	Maybe, I miss accountability at the moment		Spaces	2018-03-01 21:36:22	2018-03-01 22:25:07	2fd3a1d61c
03ec78f44c4ea4d5e499fceb75dea4a2	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		4		4		1	4	4		0			1	Mostly great content		4	D Forum		#d on StackOverflow					5	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications									Science/Research			Official tarballs															2.078.3 (latest)													DMD	Linux		Windows		Android					dmd								Yes, I work with D part time		FAR Manager	4	1	4			4		It's awesome - keep it as is																				Yes	2	5	5		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes							More/better container classes																					std.complex						std.demangle													std.outbuffer						std.signals								std.uri		std.uuid							Yes	4														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing						Nothing								Nothing								Nothing											Nothing.												Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax	UFCS			Simple, but powerful module system			Built-in unittests			Garbage collection		Contracts	Debug attribute			Multi-paradigm			static foreach				Compile-time format string checking		stdx.checkedint											Deprecation of the comma operator				Colorized error messages			newCTFE				No, I'm already donating my free time		Meh, I don't care.	2018-03-01 22:07:13	2018-03-01 22:18:43	780a0ab404
804cca47a53d5c947f49b14ff0541920	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli					d-idioms		4	Lacking and sometimes outdated documentation and language specification. Hard time understanding when to pass by value and when by reference and problems resulting from that   such as functions from standard library taking a range (sometimes they are modified by a function and sometimes they are not). Too much not obvious annotations and keywords, e.g.  auto ref, inout, nothrow etc.	3	The documentation is very inconsistent regarding the English grammar as well as some functions in the same module are not equally detailed. Many functions should be more specific about what happens to arguments and possible gotchas. Lacking code examples.	0	5	5	I don't have any big complaints about dlang.org.	0			1	Always great content	I really like the posts and I just wish they appeared more often.	3	D Forum							4	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications																		Arch Linux						I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows							dmd	rdmd	dub						Not applicable	vim / neovim		2	1	2	I don't like the UI of Bugzilla, it's obsolete and unintuitive, quite hard to search and navigate through the issues. Also seems like many issues are abandoned and don't hear anything from people having a knowledge and power to comment on them and you can't really say what to do with them, in particular, whether to try to solve them at all.		4	Better error messages.	It's ok	Littering of attributes and keywords, sometimes too many ways of doing the same thing (even 3 kinds of comments) and wondering which one is the true idiomatic. Ability to harm yourself, e.g. you can overload the default constructor of a struct, but it doesn't work as you would expect. Slicing operators overloading is messy. Specifying template constraints could be cleaner. Using "alias" keyword.	tuples		in-place struct initialization		assert diagnostics		multiple alias this		@mutable in immutable						builtin (or good implementation in Phobos) set	No	3	It's not kept up to date and not everything is described in enough detail.	Yes	2	4	4		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes	poorly implemented and documented collections	@safe for all modules	@nogc	DIP1000	Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database		std.benchmark	std.decimal		std.image	std.drawing (2D)	Better compression modules	Collections are not reliable, strange design choices, e.g. BitArray and Array!bool are doing mostly the same thing, reversed logic of shift operators in BitArray, cumbersome functions of utf decoding and encoding, not @safe stdio functions																stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer						std.signals		std.stdint		std.system							std.variant	std.windows					Yes	3	PRs stuck in the queue with little response, sometimes discouraging comments "why would you ever do this".											Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)					@safe-ty problems / missing DIP1000						Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging								Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects				No good point for learning D						Lack of progress on DIPs	Lack of focus at the management level				elegant fast complicated	While looking for alternatives for C++.	To see if it's good for me to switch from C++. From the start, I found it very elegant and liked the syntax of templates.	vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance			UFCS				Templates	Built-in documentation (Ddoc)	Built-in unittests									Multi-paradigm			static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking				toString with output ranges			Reproducible builds				Runnable examples on dlang.org						Colorized error messages		Cross-compilation with LDC	newCTFE		Very elegant syntax and freedom.	Poor performance of GC.	Maybe, I'm still a student		Spaces	2018-03-01 20:52:08	2018-03-01 22:02:00	0b2f8595ef
7eccbf73e07bcbdb12bb09d1cb9cb923	No, I have stopped using D		GC. No volatile. Can't program bare metal like in C++ and ADA		"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke				3	non	4	all well	2	5	5	no volatile. far from bare metal	0			1	Mostly great content		4	D Forum							5	No, the D.Learn forum is fine.	no	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely		Desktop applications						Embedded Systems	Machine Learning				Official Windows .exe installer	Official tarballs		Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux							Embedded		dmd		dub		cmake				No	emacs		4	0			not a compiler proffesional	4	volatile	It's awesome, but I miss a few features	no volatile														Nothing - D is already awesome		No	3		Yes	3	4	4						Reliance on the GC				@nogc			More -betterC support	More/better container classes				@nogc containers																																																						std.windows					No, and I don't plan to				Time is my only enemy		No roadmap											Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)							Poor GC implementation / performance			Non-enterprise IDE support							Nothing																No good point for learning D					Frequent breaking changes					litle support for bare metal	impressive productivity GC	Alexandrescu	thought c++ killer	mir	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits						Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters			Inline assembler	Contracts	Debug attribute						static foreach		DMD as a DUB library											DMD support for AVX2							vibe.d 0.8		DCompute	Cross-compilation with LDC			safety	unittest	Yes, but only for a specific project		Meh, I don't care.	2018-03-01 21:17:39	2018-03-01 21:53:45	504eae6ff9
82c22fc7d29c643da05d003d42480fea	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							5		5		5	5	4		0			1	Mostly great content		5	D Forum				My colleagues			4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications	IoT	DevOps	Security		Big Data	Embedded Systems					Official Windows .exe installer	Official tarballs	Official .rpm packages					Arch Linux				Docker					2.078.3 (latest)	2.077.1 (latest LDC)									2.068.2 (last C++ release)			DMD	Linux	macOS	Windows		Android			Embedded		dmd								Yes, I work with D part time	Visual Studio Code		4	1	3			5		It's awesome - keep it as is																				Yes	4	4	3		Auto-decoding for strings		Poor naming choices		Reliance on the GC			@safe for all modules	@nogc			More -betterC support				std.eventloop	@nogc containers				std.database												std.compiler																																											No, but to other D repositories				Time is my only enemy												Non-perfect C++ integration										Poor GC implementation / performance			Non-enterprise IDE support											Wrong defaults (e.g. not @safe by default)								Few showcases / flagship projects										Lack of progress on DIPs					fast compile sometimes	I dont know	seems sexy	phobos	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates															opt-in GC and runtime				-betterC														New third-party applications (e.g. Tilix)				Cross-compilation with LDC	newCTFE		It is really nice language	speed of CTFE	Maybe, I miss accountability at the moment		Spaces	2018-03-01 21:34:20	2018-03-01 21:44:18	ab9a0482ae
7829736c4920715f45834ab51abebbdf	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								3	dlang as a multiparadigm language is not the easiest to learn, especially if you want to write "good" dlang code.	4		0	2	3	i do not like the bright style.	1	4		1	Mostly great content		4	D Forum							4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications	IoT					Embedded Systems			Science/Research			Official tarballs															2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS										dub						No	emacs		2	0			- bugzilla :) - lack of time to properly write the issue	4	better documentation for crosscompilation.	It's awesome - keep it as is																				Yes	1	1	5					Old modules like std.outbuffer or std.socket		Fear to do breaking changes							More/better container classes										std.benchmark						compared to e.g. java i do not like the input/output api																						std.mathspecial									std.socket			std.system			std.uni					std.windows				- no deprecated stuff anymore	Yes	4												Language complexity (e.g. inout, abuse of mixin)									Nothing						Nothing								Nothing								Nothing											Nothing.							Its hard to get top performance out of dlang in real world examples i encountered. i desperately miss baremetal and crosscompiler options. i think that pattern matching if done right would benefit the language.	underdog getting better	tdpl	looked really good in the book	unit_threaded	Ranges & std.algorithm								UFCS						Built-in unittests			Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm																												the code looks as good as code could look like		No, I'm already donating my free time		Spaces	2018-03-01 20:50:16	2018-03-01 21:18:29	377767f5ff
007719981ab077c3fdb05203cd4c7928	Yes	2								"Programming in D" by Ali Çehreli							3	Need more examples of advanced stuff	2	Too much info in one page. 	2	3	3	Wiki is not upto date	1	4	Need more advanced examples	0			1	D Forum						github projects	3	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications											Official Windows .exe installer																2.078.3 (latest)													DMD			Windows							dmd		dub						No	Visual Studio Code		1	0			Compiler issues were not a big problem and the bugs that do bother me were already reported in bugzilla by others.	3	Recent 512mb limit issue was blocking for me. Looks like its wixed/contained for now.	It's ok	Inconsistent use of keyword and @keyword syntax, this is lame.														Nothing - D is already awesome		No	4		Yes	3	3	3				Poor naming choices							DIP1000		More -betterC support	More/better container classes															Put some http & GUI lib already																																															missing net & gui libs	No, but to other D repositories				Time is my only enemy								Nothing										Nothing						Nothing								Nothing					C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language											Too much low-level focus (C/C++)							fast & limited tooling						CTFE (static if, static foreach)						UFCS									Garbage collection						Multi-paradigm																											newCTFE		Only decent native lang with GC. Other contender is Go.				Meh, I don't care.	2018-03-01 20:24:55	2018-03-01 21:09:12	236a556359
166549a231e3103d5b685ce9b4b1fc07	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification	#d IRC on freenode		"Programming in D" by Ali Çehreli							5	compiler changes making once working code non-functional	4	sometimes not up-to-date with the implementation (not critical though), missing examples	5	5	5	does not provide information on dlang development infrastructure (ci, build system, ...)	1	4	some things extremely simplified for an advanced D user	1	Mostly great content	I wish more hands-on articles on solving non-trivial real world problems	5		#d on IRC						5	I don't care.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development															Official .deb packages		Official dlang.org/install.sh script	d-apt Debian/Ubuntu											2.077.1 (latest LDC)			2.074.1 (compile-time format checking)									DMD	Linux									dmd	rdmd	dub					Z shell scripts along with dub	Yes, I work with D full time	Sublime		3	1	2	I don't really see the plan for the next release(s), I reported bugs, one critical to my project and have no idea when it will be fixed		5		It's awesome, but I miss a few features	invoking "inline" @trusted code: () @trusted { .. }(); what if just @trusted { .. } executed the code instead	tuples	string interpolation		named arguments			multiple alias this									No	5	I miss versioning of the D spec	Yes	5	4	4						Reliance on the GC				@nogc		Performance					std.eventloop		better json serialization	better xml serialization	std.graph	std.database	std.i18n		std.decimal		std.image			strings, with inderections from std.array and std.range					std.complex										stdx.allocator	stdx.checkedint		std.functional				std.mathspecial		std.outbuffer								std.stdint										std.windows				missing in-code comments	Yes	4											Nothing												Compiler regressions		Poor GC implementation / performance				Poor debugging						Nothing									Fewer third-party libraries than other language						Lack of good examples / tutorials						Frequent breaking changes						complex versatile efficient	Wikipedia	I was looking for an efficient and powerful alternative language	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance			UFCS		Closeness to C/C++		Templates											Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking											Runnable examples on dlang.org	docarchives.dlang.io				vibe.d 0.8	Colorized error messages					D's a multi-purpose swiss knife	linking	Maybe, I miss accountability at the moment	Thank you for all your work	Tabs	2018-03-01 16:16:04	2018-03-01 20:18:35	1b210a0d1c
f195e3c12ab260a747b2d21930129032	Yes	5				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			5	The absence of a really good IDE or full language support on text editors, there is dlangIDE and some plugins but it would be better to have better choices	4	Honestly nothing	0	5	5	nothing	1	4	nothing	0			3							still haven't tackle some real problems	4	Yes, I like StackOverflow.	StackOverflow	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications											Official Windows .exe installer			Official .deb packages				Arch Linux									2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub						No		textadept	3	0			no	5		It's awesome - keep it as is																				Yes, but only for some projects	5	4	5	Nothing - Phobos (Standard Library) is great								@safe for all modules													std.database						std.drawing (2D)		none	std.base64					std.concurrency																	std.meta	std.outbuffer																						be able to develop GUI apps would be great	No, and I don't plan to										I am just starting to learn D					Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing							Non-enterprise IDE support							Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists		Little info on StackOverflow		Lack of good examples / tutorials				Nothing.							no	let me move from C/C++	I found a book title on the internet for Ali Sehrili	I found it promessing and far easier than C/C++	stdlib , dlangui	Ranges & std.algorithm							Readable syntax		-betterC		Simple, but powerful module system		Built-in documentation (Ddoc)								import("myfile")		Multi-paradigm	Functional programming paradigm				DMD as a DUB library						toString with output ranges											New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages		Cross-compilation with LDC			have more power with less hassel	none	Maybe, I'm still a student	cheers keep up the good work	Tabs	2018-03-01 19:16:50	2018-03-01 19:47:29	504d984b71
6584f609d5ce4ebece3809b9d52f4050	Yes	3					Language specification										3				0	4	4	forum	0			0			5	D Forum							5				Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly		Desktop applications						Embedded Systems					Official Windows .exe installer			Official .deb packages																										DMD	Linux		Windows					Embedded		dmd								No	DlangIDE		3	0				4	a good and easy to use gui library	It's awesome - keep it as is																				Yes	3		3																	std.eventloop			better xml serialization	std.graph	std.database				std.color	std.image	std.drawing (2D)																																																	No, but to other D repositories										I am just starting to learn D																																																															Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system													Functional programming paradigm																														Maybe, I'm still a student			2018-03-01 19:13:44	2018-03-01 19:44:50	c4f09e1320
10f8cd3babc44f79df603265b7bb173f	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		5	Recursive templates	4	Not enough documented what kind of objects returned by algorithms (what extra methods/properties do they have)	3	4	4	What to see some news about language/Phobos changes on the main page. And links to articles, blogs etc.	1	4	Do not remember	1	Mostly great content	Often do not know how to use info that I get there :)	4	D Forum					I don't need help		4	No, the D.Learn forum is fine.	Dont understand the question - I'm from Russia	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development															Official .deb packages													2.078.3 (latest)													DMD	Linux										rdmd	dub						No	Visual Studio Code		4	1	3	Nothing to say		5		It's awesome - keep it as is																				Yes	4	5	5						Reliance on the GC	Fear to do breaking changes			@nogc				More/better container classes		I'm happy as is.		@nogc containers	better json serialization											Dont' know																								std.outbuffer						std.signals												std.windows	std.xml			We containers with std.experimental.allocator support Clear way to use auto reference counting with containers Integration with more performant OS eventloops	Yes	4	It was long ago																			Lack of time :(	Nothing													dfmt plugin not compiles for VS Code recently						C behavior without warning (e.g. signed to unsigned comparisons)		cast(short)(10) - cast(short)(5) gives int result (what the hell??)			Less corporate support (including jobs) than other languages	Little marketing / no evangelists								Nothing.							D is better C++. I like it! :)	It is like Python or JavaScript (in writing code productivity), but also has strong type checking	In Wikipedia. D is the next word after C++ :)	It was new and looked good. Has better templates than C++	Phobos (and my own utilities library)	Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax	UFCS				Templates					Garbage collection						Multi-paradigm			static foreach														Automatic compilation of imports (dmd -i)			Deprecation of the comma operator				Colorized error messages			newCTFE		I don't need motivation for it	It is long survey. I want to sleep	Maybe, I miss accountability at the moment	Don't know	Tabs	2018-03-01 19:00:58	2018-03-01 19:41:50	61b70dcdad
6f2664cbf806babef96a7098dbdafae4	Yes	5														D spec of 2007	3	It was one of my first languages, so probably that.	4			3			0			1	Always great content		5	D Forum							4	I don't care.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly	Web development	Desktop applications										Software Testing	Official Windows .exe installer			Official .deb packages											Windows Zip		2.078.3 (latest)		2.076.1 (static foreach)											LDC	Linux		Windows		Android							dub						Yes, I work with D part time	vim / neovim		4	1	5			5		It's awesome, but I miss a few features								multiple alias this									No			Yes	3	3	6		Auto-decoding for strings						Solutions are in peices a lot of times and it can be hard to remember what parts to put together							Good building blocks: DB, Serialization for implementations to share				better json serialization	better xml serialization	std.graph	std.database							Good building blocks: DB, Serialization for implementations to share		std.base64	std.bigint	std.bitmanip	std.compiler	std.complex		std.container				std.demangle				stdx.allocator	stdx.checkedint		std.functional		std.json	std.math	std.mathspecial	std.meta	std.outbuffer							std.socket			std.system									std.xml				Yes	2	Working within a module and having to provide the contribution in std.experimental resulted in a lot of work copying over internal functions needed to support the new functionality.										Nothing										Nothing							Non-enterprise IDE support	Poor debugging																Less corporate support (including jobs) than other languages									Nothing.							A lot of the available libraries don't get the continued maintenence they need for a company to want to take on utilizing them.		Search for better C++	I didn't want to learn C++	std.algorithm	Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C		UFCS				Templates		Built-in unittests		@safe strings + arrays	Garbage collection					std.concurrency & std.process	Multi-paradigm			static foreach				Compile-time format string checking			New range functionality (substitute, slide)	toString with output ranges		Back referencing of mangled symbols											Colorized error messages			newCTFE		The language is fun to work in and I can work comfortably at different levels (calling C functions, scripting a helper program)	Shared. I would say there hasn't been enough emphasis on explaining how to correctly work with shared and the compiler verification of  it.			Tabs	2018-03-01 16:49:00	2018-03-01 19:22:54	84fdce5c80
8110b0638bda5288a7c28f7648f9f48f	No, I have stopped using D		Still small ecosystem, too much C++ on work. But may happen i be back		"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								4	I was on Windows at that time, it was supported pretty badly. OMF/COFF issues,  no 64 support, limited DLL. Now its much better .	4	I did not used it so much	3	4	4	Mostly its ok. May be add new updates on code.dlang.org	0			1	Mostly great content	Add there some links on personal d blogs	4	D Forum							4	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly			IoT				Big Data	Embedded Systems		Kernel Development		Low latency and high throuhput networking	Official Windows .exe installer		Official .rpm packages											I compiled D from source			2.078.3 (latest)													DMD	Linux		Windows				WebAssembly			dmd	rdmd	dub	make	cmake				No	vim / neovim		4	1	4			4	Common ABI	It's awesome - keep it as is																				Yes, but only for some projects	3	3	3					Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc	DIP1000		More -betterC support	More/better container classes				@nogc containers				std.database	std.i18n	std.benchmark																																																					No, but I want to to				Time is my only enemy				High barrier to entry									Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000				Compiler regressions		Poor GC implementation / performance				Poor debugging		DLL support on Windows						Attribute bloat		Wrong defaults (e.g. not @safe by default)						Less corporate support (including jobs) than other languages		Few showcases / flagship projects										Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level			Brilliant without visibility	Internet search	Why not?								Native interoperability with C		UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates															opt-in GC and runtime		Templated vector operations		-betterC																							No, I'm already donating my free time		Meh, I don't care.	2018-02-28 15:22:58	2018-03-01 19:16:34	c739bbb06d
34382864a6bea86cef185e00fa2cb39d	Yes	4															4	bad error messages from compiler and runtime exceptions	2			2	3		0			1	Mostly great content		4						I don't need help			Yes, I like StackOverflow.	actually discuss on D.learn, archive answers for future reference on stack overflow	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications				Game Development				Kernel Development			Official Windows .exe installer	Official tarballs															2.078.3 (latest)													DMD	Linux	macOS	Windows					Embedded		dmd			make					Yes, I work with D part time	vim / neovim		4	1	1	the search is terrible		4	better error messages	It's awesome, but I miss a few features	too many attributes, wrong defaults.																Yes, but only for experimenting/testing/debugging	3		Yes	3	4	4		Auto-decoding for strings														I'm happy as is.														compile error messages.							std.container		std.csv				std.encoding		stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer						std.signals													std.xml				Yes	2	slow and nitpicky										Nothing										Nothing						Nothing								Nothing																		libraries suck.	Nothing.							d rox	effective	digitalmars.com when downloading dmc in like 2001	cuz it rox.	arsd							Native interoperability with C	Readable syntax										Garbage collection	Inline assembler					Multi-paradigm																											newCTFE		it sucks less than all other programming languages	@nogc	No, I'm already donating my free time	worship d		2018-03-01 18:40:42	2018-03-01 18:57:45	29532c0aff
f72a7a7f835e1be4e22b266ea01c2813	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4	Lots of things poorly explained and you're forced to do detective work to learn their workings. "auto ref" etc.	3	Sometimes the info is just very superficial, you hardly know what the parameters are supposed to do. I don't have specific examples, it's just how I recall things as being. This is certainly not a "beginner's language" as it stands. 	0	4	4		0			0			2	D Forum							4	I don't care.			Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly		Desktop applications												Official tarballs																				2.073.1 (new Ddoc theme)								DMD	Linux	macOS	Windows								rdmd	dub	make					No	emacs		2	0				5		It needs serious work	It's very late to fix things, but basically the initial wrong defaults (not @safe, nothrow etc) leading to extreme verbosity. 														Nothing - D is already awesome		No			Yes	3	3	2			Auto-decoding isn't nothrow						@safe for all modules	@nogc						I'm happy as is.																	std.bitmanip	std.compiler	std.complex						std.demangle				stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer							std.socket																No, but I want to to					Personal laziness								Language complexity (e.g. inout, abuse of mixin)						Issues with language feature X (e.g. shared, @property)					Compiler regressions				Nothing										Attribute bloat		Wrong defaults (e.g. not @safe by default)				Nothing											Nothing.								There's still potential.	A random programming forum	I wanted a sane C++		Ranges & std.algorithm		CTFE (static if, static foreach)			Performance					Closeness to C/C++		Templates		Built-in unittests							import("myfile")						opt-in GC and runtime																						Cross-compilation with LDC			It's good as a slightly higher level replacement for C++. Gc and some aforementioned issues fixed, and it's there. Rust is not what I'm looking for.	Overreliance on templates/meta programming in some std features.	Maybe, I miss accountability at the moment		Spaces	2018-03-01 18:25:05	2018-03-01 18:53:44	71bb1ab549
01ccbc74b6badd605199f8dd052b7cd6	Yes	4					Language specification			"Programming in D" by Ali Çehreli					d-idioms		4	getting a feel for current idiomatic usage - also understanding more complex features fo the language (meta programming)	4	It would be great to see usage examples in the context of larger code samples.	5	4	3	The home page design is heavy and crowded, and I think the tagline is confusing.	0			1	Mostly great content	The dblog is great. Some topics are over my head, but it's always interesting.	5	D Forum							4	I don't care.	I think the forum is a good resource - it would be fantastic if it were easier to search and it was more clear whether answers were relevant despite language changes (sometimes old results show up). Having lots of options fragments knowledge, but I don't know how to go about consolidating it.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development													Official tarballs						Arch Linux						I compiled D from source			2.078.3 (latest)														Linux										rdmd	dub						Not applicable	emacs		4	0			Th eissues I encounter are already reported.	4	Consistent error messages and stack traces																																																																																																																																																																																																																																	2018-03-01 17:53:20	2018-03-01 18:14:26	223f230327
04c2b8bcb370b5815a143b4bc32c465e	Yes	3				tour.dlang.org	Language specification		D Forum: Learn								3	Some inconsistent syntaxes  + rough edges + lack of documents/samples on a feature	3	lack of various sample constructs to put logic together	1	4	4	No comment	1	2	more language constructs	0			3	D Forum							4	Yes, I like StackOverflow.	no comment	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely													Official Windows .exe installer																2.078.3 (latest)													DMD			Windows							dmd								No	Visual Studio + VisualD		3	1	3	Slow but understandable 		4	Fix bugs quickly	It's ok										@mutable in immutable							No	4	no comment	Yes	4	3	3		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket						DIP1000	Performance		More/better container classes			std.eventloop		better json serialization	better xml serialization		std.database	std.i18n		std.decimal								std.bitmanip																			std.mathspecial																								Variant - lack of runtime discovering (too much on compile time)	No, but to other D repositories								High barrier to entry					Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)											Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows					Auto-decoding of strings	Attribute bloat			C behavior without warning (e.g. signed to unsigned comparisons)									Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials		Few transition guides from programming language Y			Too much low-level focus (C/C++)							good language	news/blog on web 	compile time introspect		Ranges & std.algorithm		CTFE (static if, static foreach)			Performance			UFCS						Built-in unittests					Contracts							static foreach	opt-in GC and runtime										Reproducible builds				Runnable examples on dlang.org												GC is not good quality - false memory leak	Maybe, I'm still a student	lack of good converter from c header to d	Spaces	2018-03-01 17:42:13	2018-03-01 18:07:06	b805409102
30129d0417f7b96839a6f2baefbf5249	No, I have stopped using D		Couldn't use it at my new job.						D Forum: Learn								4	Kind of irrelevant now since I learned it in like 2005.  There's tons more material to draw upon now than I had.	3	DDoc is super ugly with all its $(blah ......) everywhere.  I haven't looked at phobos doc since 2008 or so, though.	0	4	4	It looks a little scattered, design-wise.  The company logos feel like ads taking up the center stage.  Some big calls to action like on the python page would be better ("get started" "download" "docs" "jobs")	0			1	Mostly great content	Most recent one about this survey seemed like the author was trying way too hard to be clever.  Just made it hard to read in my opinion.	3	D Forum							4	No, the D.Learn forum is fine.	Nope email/forum is fine.	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely												mobile dev															Don't recall it was so long ago.  Probably downloaded a .zip from digitalmars.com													D1		DMD	Linux	macOS	Windows		Android	iOS				dmd								No		XCode	1	1	3	Been too long... but I think I had bugs on the list that had no action for a decade.		3	The biggest problem I was having was that compilations got really really slow once you had significant amounts of fancy template and CTFE stuff.	It's awesome, but I miss a few features	"version" is a pain in the butt. Just give me some damn macros.  They solve way more problems than they cause IMHO.	tuples	string interpolation														No	4		Yes																																																																																																																																																																																																											Spaces	2018-03-01 17:48:24	2018-03-01 18:06:29	e3f41aaab4
639d3e461256eef05f5de268fcf1cad2	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification							"D Cookbook" by Adam D. Ruppe		Learn to Tango with D	4	Started to learn D1 one and a half year before TDPL was published, which describes D2.	4		0	4	3		1	3		1	Always great content		3	D Forum							1	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily												Information Systems		Official tarballs																2.077.1 (latest LDC)												DMD	Linux											dub					rake	Yes, I work with D full time	Eclipse		3	1	1	Important issues are not resolved for years.		4		It's ok		tuples				assert diagnostics											No	3		Yes	0	5	5					Old modules like std.outbuffer or std.socket				@safe for all modules									@nogc containers		better xml serialization									non-experimental logging						std.complex						std.demangle	std.digest					stdx.logger					std.mathspecial		std.outbuffer						std.signals												std.windows	std.xml	std.zlib	std.zip		No, but to other D repositories				Time is my only enemy											Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)									Compiler regressions						Poor debugging						Nothing								Nothing											Nothing.								Clean Code	Job interview	Job requirement		Ranges & std.algorithm		CTFE (static if, static foreach)						UFCS						Built-in unittests			Garbage collection		Contracts					Functional programming paradigm		static foreach		DMD as a DUB library		Compile-time format string checking				toString with output ranges																			crashes caused be issues with contracts like Issue 15984 - [REG2.071] Interface contracts retrieve garbage instead of parameters 	Yes, but only for a specific project		Spaces	2018-03-01 16:51:41	2018-03-01 18:05:14	144f71dfdb
fdf6cbc643d3fb3a1b2f061ec54b68a3	Yes	5					Language specification										4	Information sources in native language.	4	Description for template arguments.	5	4	4	Visual information such as figures, graphs and photos.	0			0			4							Twitter	3	I don't care.	Yes, because they can not question easily in my native language.	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily		Desktop applications																								I compiled D from source		2.079.0 (nightly)														DMD			Windows							dmd		dub						No	Visual Studio Code		4	1	4	No		4	Advisor for more beautiful, robust, efficient coding.	It's awesome - keep it as is																				Yes	3	3	3						Reliance on the GC			@safe for all modules	@nogc			More -betterC support	More/better container classes					better json serialization	better xml serialization										Efficient container and algorithm combination						std.concurrency							std.encoding							std.json																					std.variant		std.xml		std.zip	Detach from druntime / cruntime for -betterC	Yes	4	Maintenance/Enhancement of manual											Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000		Nothing						Nothing								Nothing										Less corporate support (including jobs) than other languages												Lack of progress on DIPs				Lack of ecosystem	simply, fast, everything	Books in bookstore	Interest for language of early period	msgpack-d			CTFE (static if, static foreach)	std.meta	std.traits								Templates									import("myfile")					static foreach					-betterC																		Cross-compilation with LDC			Accustomed	Habituation	No, I'm already donating my free time	Nothing	Tabs	2018-03-01 14:26:05	2018-03-01 18:03:12	be453c6736
59c2dd164042e4f96f5ac663854ae33c	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4	nothing drastic	4	The placement of examples is often not apparent for a given context.  This has gotten better.	4	4	4	news elements often feel under the fold, but I often go straight to the forums anyway.	1	4		1	Mostly great content		4	D Forum							4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development		IoT			Game Development				Kernel Development											Homebrew					I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS						Embedded				dub	make	cmake				No	Visual Studio Code		4	0				4		It's awesome - keep it as is																				Yes	3	4	4	Nothing - Phobos (Standard Library) is great					Reliance on the GC		some aspects are very hard to leverage in an embedded setting							A distinction between core primitives and advanced concepts.  Allowing a better delineation towards embedded usage.		std.eventloop					std.database																			std.demangle																																			There are a lot of great aspects to it but when I get to my embedded projects I feel like I have to throw most of them out.	No, but I want to to				Time is my only enemy								Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.								solutions my way	systems level programming language conversation with peers	Writing systems level code can be a chore and I wanted to try newer concepts	do I have to pick one?!	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits				UFCS			Simple, but powerful module system	Templates											Multi-paradigm			static foreach	opt-in GC and runtime				-betterC															vibe.d 0.8			Cross-compilation with LDC	newCTFE		The flexibility I get while using D lets my mind truly explore a problem space rather than forcing it down a common path.		Yes, just tell me how		Spaces	2018-03-01 17:42:57	2018-03-01 17:59:20	ab3fa0f2e8
0541d50271a7e92744792efd436cfea0	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification								d-idioms		5	looking for functions. UFCS is greate but it is very difficult to find what you want if you don't think about UFCS and templates	4	It is structured by modules, not topics. Usualy I want everything about some area, e.g. strings, so I want to see std.algorithm and ranges use cases for string. Now it is just mentioned	0	4	4	stability and design. I saw site was down several times. And its design is good but not prefessional	0			1	Always great content	Not enough posts. Sometimes it is better to write small notes just to be up to date. Big articles are greate, just add more small	5						I don't need help			Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly						Game Development							Official Windows .exe installer						d-apt Debian/Ubuntu												2.076.1 (static foreach)		2.074.1 (compile-time format checking)									DMD	Linux		Windows				WebAssembly					dub						No	Sublime		3	0			Registration and bugzilla itself. Github and its issues is a standard, bugzilla is old thing that I don't want to use	5		It's awesome, but I miss a few features		tuples		in-place struct initialization				multiple alias this					UFCS for local symbols				No	4		Yes	3	3	3		Auto-decoding for strings		Poor naming choices		Reliance on the GC				@nogc	DIP1000	Performance					std.eventloop	@nogc containers												Any old code without ranges, e.g. std.zip	std.base64				std.complex							std.digest			stdx.allocator	stdx.checkedint	stdx.logger							std.outbuffer						std.signals	std.socket											std.windows	std.xml	std.zlib	std.zip		No, but I want to to								High barrier to entry								Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC				popularity, no one knows D, business does not want to take risks	Nothing							Non-enterprise IDE support							Nothing										Less corporate support (including jobs) than other languages	Little marketing / no evangelists				Lack of good examples / tutorials	No good point for learning D						Lack of progress on DIPs	Lack of focus at the management level			Yes. It is too slow (GC and runtime) and strange as betterC and too unsafe for enterprise	better simpler C++	some news, I don't remember	I thought that C++ is bad. D looked better	std.regex	Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C		UFCS				Templates							Contracts				Multi-paradigm	Functional programming paradigm				DMD as a DUB library												Automatic compilation of imports (dmd -i)						vibe.d 0.8		DCompute		newCTFE		I can write code fast and can optimize it if I need 	Template Constraints. It is greate as idea, but makes a lot of noize in code. I feel lack of good algorithm of choosing of better implementation.	Yes, just tell me how	Finish one greate feature (e.g dip100) and go to all conferences possible. Create as much advertising as possible. betterC is not good enough for such things	Spaces	2018-03-01 16:11:31	2018-03-01 17:27:42	688271a5c7
fd8b43a9e9d619e4b3c426afe2d7ddd2	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							3	None personally, but lack of transaltion for less common languages could well be if i was less proficient with English.	4	Nothing major comes to mind	1	4	3	Some things, like how to integrate with C++ (for some parts), are not always found where you'd think. You know about them only if you've happened to read the correct blog, Dconf talk or forum post.	0			1	Always great content	I just love reading generally. Also I can always hope to learn about some abilites of D I've not heard, or thought, of.	4	D Forum						GitHub, when I need help with my pr to phobos.	5	I don't care.	I like both D forums and stack overflow.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications											Official Windows .exe installer													I compiled D from source		2.079.0 (nightly)		2.077.1 (latest LDC)												LDC			Windows				WebAssembly		...All of the rest to lesser extent	dmd		dub						Yes, I work with D part time	DlangIDE		4	1	3	Requires making an account, a bit hard to search at first.		4	More iDiomatic implementation :). It could use those parts of Phobos that are not used as a runtime library.	It's awesome, but I miss a few features	Still heavy syntax when manipulating types. But better than with most alternative languages.	tuples						multiple alias this					UFCS for local symbols				Yes, but only for experimenting/testing/debugging	5	Just some small things here and there. Nothing in general.	Yes	5	6	6		Auto-decoding for strings	Auto-decoding isn't nothrow			Reliance on the GC			@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes															All these are good but they would be fine as DUB modules as well.	std.range.interface somewhat. I would like a way to use them as value types.	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex		std.container		std.csv		std.demangle		std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json		std.mathspecial		std.outbuffer		std.path			std.regex	std.signals	std.socket	std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	That it stays in the direction it's developing!	Yes	3	Reviewers tend to be too busy. Perhaps the quality standard also needn't to be that strict with formatting. But attitude is good.																			Being a systems language, it can't be integrated to virtual enviroments without complications	Nothing						Nothing								Nothing									Fewer third-party libraries than other language										Nothing.							Being somewhat small, which I believe we're all trying to solve the best we can!	C++ done right	Wikipedia	Seemed like (and is) a modern well-balanced language capable of systems programming if need be.	Phobos. After that, perhaps DLangUI.	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax	UFCS	-betterC	Closeness to C/C++		Templates											Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC		New range functionality (substitute, slide)										Deprecation of the comma operator		New third-party applications (e.g. Tilix)				Cross-compilation with LDC	newCTFE	-Dip1000 and possible continuations to it	Hobby, utility uses and possibly coding part of commerical project in future.	Autodecoding	Maybe, I'm still a student	Something in Announce forum. I hope I someday have something for that.	Meh, I don't care.	2018-03-01 16:10:11	2018-03-01 17:11:36	2df2639013
0e7e10e9624731b6d7fb867fc594804a	Yes	3			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		4	Maybe that compared to C++ there is less to look at, but, overall, coming from C++, seems a quite natural transition.	4	I honestly do not have enough experience to make full assesment. I hardly used a bit of ranges, std.json and std.io. When I do async/await in Python I say... this is great. I know there are fibers. Did not look too deep into them or vibe.d so I cannot make a full assesment except to say that they look less familiar to me.	1	4		I think the website should look with Learn immediately after who uses D and be bigger and the documentation just below also quite big, the rest of news and community should follow all the way down but smaller, not because it is not important, just because what you want is the most accessible and fast way to start, the rest can wait: make Learn section bigger than the rest.	0			1	Mostly great content	 	3	D Forum							5	Yes, I like StackOverflow.	Stackoverflow should be best, many languages and questions converge there. I use it for Python and C++ as well.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly	Web development	Desktop applications																			Homebrew								2.078.3 (latest)													LDC	Linux	macOS	Windows		Android	iOS	WebAssembly	Embedded		dmd	rdmd				meson			No	emacs		2	0			Did not use in a critical enough task maybe and it is just for hobby as of now, mainly.	3	Shared libraries	It's awesome - keep it as is																				Yes	2	4	3		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000	Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization			std.database		std.benchmark						Not enough experience to make full assesment :)				std.compiler	std.complex																	std.mathspecial		std.outbuffer							std.socket	std.stdint		std.system			std.uni					std.windows				Networking should be supported with something as similar as async/await as possible and an event loop. I do not care it is async/await and I am not even sure if it can already be done. But a mechanism for async programming is really necessary for a networked world without something like vibe.d,  whose scope is much bigger. 	No, and I don't plan to				Time is my only enemy				High barrier to entry		I am just starting to learn D				Missing language feature X / not moving fast enough								Nothing												D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat							Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages			Little info on StackOverflow			No good point for learning D			Nothing.							The weak point is lack of resources. Rust has that, though I still prefer D. But for getting the job done you will need real libraries and real support.	Familiar, pragmatic, powerful.	Was like over 10 years ago, discovered by accident I do not even remember how. Been following since then from time to time. Recently I decided to experiment with it.	The C++ -> D transition is easier than to other languages yet has many features valuable to me: static reflection and static if come to mind. Also opDispatch is nice to have. Slicing is also powerful. And importing file + CTFE is a great idea. All of them save my time in some way.	I just worked with phobos for now. I cannot make a full assesment.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits		Native interoperability with C				Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests				Inline assembler			import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations								Reproducible builds			Automatic compilation of imports (dmd -i)				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8		DCompute	Cross-compilation with LDC			Higher productivity than C++ with close performance.	I could not choose one. I will list a few: slices, static reflection, mixins + static reflection together, import("my.file") + CTFE.	Yes, just tell me how	Support for Android/iOS will be essential to get D relevant. This is one of the reasons why I still stick to C++, which I also like a lot, but it is legacy in some areas.	Spaces	2018-03-01 16:12:00	2018-03-01 16:57:21	a2d6c19a93
bd8a4e23b43efd114c983d0a9bd72b37	Yes	4			"The D Programming Language" by Andrei Alexandrescu												2	big .exe files	3	examples	5	4	5	-	0			0			0						I don't need help		5	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications	IoT		Security	Game Development		Embedded Systems					Official Windows .exe installer			Official .deb packages													2.078.3 (latest)													GDC	Linux		Windows		Android			Embedded					make					No	Visual Studio Code		5	0				5		It's awesome - keep it as is																				Yes	3	3	3	Nothing - Phobos (Standard Library) is great								@safe for all modules	@nogc		Performance	More -betterC support				std.eventloop		better json serialization			std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)					std.bitmanip	std.compiler				std.conv																						std.signals								std.uri									No, and I don't plan to										I am just starting to learn D							Dependence of some language features + Phobos (Standard Library) on the GC						Poor Phobos (Standard Library) documentation						Non-enterprise IDE support			DLL support on Windows		D's dependence on a large and bulky runtime		Nothing															Lack of good examples / tutorials							Lack of progress on DIPs							it's better than C and not so ugly as C++								Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates			In, out, ref parameters	@safe strings + arrays		Inline assembler			import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations				New range functionality (substitute, slide)								Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)					Cross-compilation with LDC			i was search for alternative to c++	dynamic arrays & string functions, classes	Maybe, I miss accountability at the moment		Spaces	2018-03-01 15:11:48	2018-03-01 16:54:46	a1cf273f51
77770c8db36966da17c790ff59d73407	Yes	4			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							4	Not the greatest docs at times	3	Seems pretty incomplete at times	0	4	4	Not much	0			0			4	D Forum	#d on IRC						4	No, the D.Learn forum is fine.	Nope	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly										Kernel Development												Gentoo							2.078.3 (latest)													LDC	Linux											dub						Yes, I work with D part time	emacs		3	0			Dunno	4	N/A	It's awesome, but I miss a few features	Function signatures can get laden with lots of stuff, any effort to cut this down would be great	tuples	string interpolation								static break						Yes, but only for experimenting/testing/debugging	4	N/A	Yes	3	3	4						Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers	better json serialization											N/A																																														N/A	No, and I don't plan to					Personal laziness							Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							I see a few ideas from FP langs that could be used (HKTs, pattern matching, ADTs)	Easy, nice-looking, powerful	Various spots on the Internet	Looking for an alternative high-level language	N/A	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax	UFCS	-betterC	Closeness to C/C++																	opt-in GC and runtime				-betterC					Back referencing of mangled symbols							Deprecation of the comma operator							newCTFE		N/A	Can't make a default constructor for structs	No, I'm already donating my free time	Nope	Tabs	2018-03-01 16:11:09	2018-03-01 16:26:34	a7c815e630
2f6ddc65997e958689eab753c0c9a862	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							3	Tempates	4	Few examples	2	4	3	Nothing	0			0			4							Telegram russian 	3			Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly	Web development															Official .deb packages													2.078.3 (latest)													DMD	Linux											dub						No	Visual Studio Code		3	0				4		It's ok		tuples	string interpolation													Inout	No	3		Yes	3	2	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc			More -betterC support				std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database	std.i18n		std.decimal														std.csv				std.encoding		stdx.allocator	stdx.checkedint															std.socket										std.variant	std.windows	std.xml				No, and I don't plan to															Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC												Non-enterprise IDE support		dub														Fewer third-party libraries than other language		Little marketing / no evangelists				Lack of good examples / tutorials						Frequent breaking changes	Lack of progress on DIPs							was looking for a replacement for python								Native interoperability with C	Readable syntax					Templates		Built-in unittests	In, out, ref parameters		Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations		-betterC								DMD support for AVX2								Colorized error messages							No, I'm already donating my free time		Spaces	2018-03-01 15:22:52	2018-03-01 15:47:38	115b139209
3757de71f2bac87d542f689ab433de29	Yes	5								"Programming in D" by Ali Çehreli							4	lack of video tutorials	4	perhaps examples for each use? or a visual diagram like http://llvm.org/doxygen/classllvm_1_1IntegerType.html	0	5	5	the forum could be more modern, seems ancient	0			1	Mostly great content	 	2						I don't need help		3	Yes, I like StackOverflow.	have a list of the commonly asked questions and so forth,maybe a wiki?	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications																		Arch Linux																																dmd		dub						Not applicable	Visual Studio Code		5	0			haven't hit major bugs	4	 	It's awesome - keep it as is																				Yes	3	5	4								could use a Java Scanner like library(maybe it exists and I haven't found it)				Performance										std.database					std.image	std.drawing (2D)	https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html	 	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex				std.csv		std.demangle				stdx.allocator	stdx.checkedint		std.functional				std.mathspecial	std.meta	std.outbuffer						std.signals												std.windows				 	No, but I want to to					Personal laziness										Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing						Nothing								Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages			Little info on StackOverflow			No good point for learning D			Nothing.							people might get confused by the huge amounts of compilers for D	efficient, simpler syntax, flexible	was searching for a language thats a mix of python (simple syntax) with speed(C/C++/ Javabytecode[maybe]) 	needed a general purpose language to automate tasks on my computer, replace my python programming, and compiles into a binary, wanted something 'next-gen' and not encumbered by ancient programming paradigms	std.stdio! that would be too easy, but I use std.process-std.path,std.string, std.file, std.algorithm and std.netl often as well						Performance		Readable syntax				Simple, but powerful module system		Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters		Garbage collection					std.concurrency & std.process	Multi-paradigm					DMD as a DUB library								Back referencing of mangled symbols	Reproducible builds			Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org	docarchives.dlang.io					Colorized error messages					just need one language to do everything generally well, plus its fun 	 	Maybe, I'm still a student	keep up the good work	Spaces	2018-03-01 15:02:37	2018-03-01 15:33:41	eeaa04dd07
5969c0ea55d154a2d0e0171b11e6dda7	Yes	4								"Programming in D" by Ali Çehreli							4	Lack of proper tooling	4		0	3	4		0			1	Mostly great content		3						I don't need help			I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications											Official Windows .exe installer		Official .rpm packages														2.078.3 (latest)													DMD	Linux				Android					dmd		dub						No	Atom		1	0				5		It's awesome - keep it as is																				Yes	3	3	5	Nothing - Phobos (Standard Library) is great								@safe for all modules	@nogc		Performance	More -betterC support	More/better container classes			std.eventloop		better json serialization	better xml serialization		std.database	std.i18n										std.bitmanip								std.demangle	std.digest																																			No, and I don't plan to			Finding good issues to get started	Time is my only enemy	Personal laziness					I am just starting to learn D		Nothing										Nothing							Non-enterprise IDE support	Poor debugging						Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists								Nothing.												Ranges & std.algorithm										Closeness to C/C++	Simple, but powerful module system						Garbage collection						Multi-paradigm																															Maybe, I miss accountability at the moment		Tabs	2018-03-01 15:11:10	2018-03-01 15:28:24	fedf204368
c14f4d62cd16463d1cac03d3f00017f3	Yes	3					Language specification		D Forum: Learn								5	bugs in compiler lack of online resources: tutorials, blogs, etc	4	Sometimes lacks usage examples: how to do things.	0	4	4	Documentation feels spread out: across 3 top-level categories: learn, documentation and resources. the 'feature overview' is useless, but the 'tour' is useful yet not listed under documentation Articles and the tour seem to be very useful, provide more topical high-level guidances, yet somehow these feel second class. Maybe due to the navigational structure, or because I don't trust that the information is up to date.  	1	5	The name undersells it, as if its something for complete newbies to get a taste. Yet, its actually pretty large and in-depth.  Don't like that it is completely distinct from the rest of the documentation. Finally I find the tour somewhat unbalanced, for example there is no treatment of how to read a simple file yet a whole top level section is dedicated to multi-threading. As if the tour was made more to impress people new to D than to actually serve as a tutorial for beginners.	1	Always great content	nothing	3	D Forum							4	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development												Official Windows .exe installer		Official .rpm packages														2.078.3 (latest)													DMD	Linux		Windows		Android							dub						No	Visual Studio Code		3	1	4			4		It's awesome, but I miss a few features	slightly complex (more than one way to do things) in places, for example the various ways to express lambda's / delegates. 				named arguments												No	4		Yes	1	3	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket		Fear to do breaking changes			@nogc				More/better container classes	better IO model, replace or get rid of modules than or considered obsolete such as std.xml and std.json		std.eventloop		better json serialization	better xml serialization		std.database	std.i18n		std.decimal									std.compiler	std.complex							std.digest								std.json		std.mathspecial								std.signals	std.socket												std.xml			Old modules are replaced with idiomatic ones, so the whole of phobos feels congruent	No, but I want to to				Time is my only enemy	Personal laziness			High barrier to entry					Language complexity (e.g. inout, abuse of mixin)								lack of quality libraries and toolchain	Nothing								Poor debugging						Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects			Lack of good examples / tutorials					Too much low-level focus (C/C++)							powerful, multi-paradigm, expressive	online, more than ten years ago (can't remember)	fun		Ranges & std.algorithm					Performance			UFCS						Built-in unittests										Functional programming paradigm																				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)												Spaces	2018-03-01 14:42:33	2018-03-01 15:27:10	0012f3888c
23da1335c04fefabc92ac6089edab1c3	Yes	3			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org							"D Web Development" by Kai Nacke				2	Few samples on the Web and low googlability.	3		1	3	3		1	4	few samples and code snippets	1	Poor/unhelpful content	I want business usecase	2								3	No, the D.Learn forum is fine.		No.		Monthly	Web development			DevOps									Official Windows .exe installer						d-apt Debian/Ubuntu					Docker					2.078.3 (latest)													DMD	Linux		Windows							dmd		dub						No, but my company uses D	vim / neovim			0				3		It's ok																	No	4		Yes	2	3	1					Old modules like std.outbuffer or std.socket							Performance										std.database	std.i18n																																																						No, and I don't plan to					Personal laziness																										dub														Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects		Missing tutorials / documentation in spoken language X													good for me	Digital Mars Official site	D-man								Native interoperability with C								Built-in unittests				Inline assembler																												vibe.d 0.8								No, I'm already donating my free time		Spaces	2018-03-01 14:25:10	2018-03-01 15:03:53	a14806398a
74a5f20364f8322a385fbd22d8a8d635	Yes	4				tour.dlang.org	Language specification		D Forum: Learn								4	Compiler error messages don't help much 	5	Direct access to source code	0	5	5	\	1	4	lack of answers	0			5					My colleagues			5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily									Machine Learning				Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													LDC	Linux		Windows							dmd							ldc2	No	Sublime		4	0				4	better compiler error message	It's awesome - keep it as is																				Yes, but only for some projects	3	6	6								Might not handle weel error in parameters (e.g. Fft with size not a power of 2)	@safe for all modules			Performance									std.graph							std.drawing (2D)			std.base64	std.bigint	std.bitmanip	std.compiler				std.conv			std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json		std.mathspecial	std.meta	std.outbuffer		std.path				std.signals	std.socket	std.stdint		std.system		std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to										I am just starting to learn D		Nothing													Poor compiler error messages			Nothing												Wrong defaults (e.g. not @safe by default)									Little info on StackOverflow						Nothing.												Ranges & std.algorithm	Mixin				Performance			UFCS									Garbage collection																																					No, I'm already donating my free time		Spaces	2018-03-01 14:25:20	2018-03-01 14:58:23	c1e55a1614
0c7af4f23b71c51650d66ae08a25a86a	Yes	5				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							5	Templates, CTFE	5		0	5	5		1	5		1	Always great content	I'd like to see more posts	5	D Forum					I don't need help		5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications																		Arch Linux									2.078.3 (latest)													DMD	Linux						WebAssembly					dub	make				reggae	Not applicable	Visual Studio Code		4	1	4	It's ugly and hard to use		5		It's awesome - keep it as is																				Yes	5	5	4				Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules			Performance					std.eventloop		better json serialization					std.benchmark						JSON		std.bigint			std.complex				std.csv				std.encoding		stdx.allocator	stdx.checkedint							std.meta	std.outbuffer						std.signals	std.socket	std.stdint						std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	std.stdio is a silly name, should be std.io std.json sucks, it should be replaced with vibe-d's json module Modules from std.experimental should either move to std or die.	Yes	4	It takes forever for somebody to review my PRs										Nothing										Nothing			Poor compiler error messages			Nothing												Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language		Little marketing / no evangelists									Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level			Developers care too much about breaking changes. Also, I'd like to see dmd's backend in pure D. 			Because it is an awesome language	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance		Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays			Contracts				Multi-paradigm			static foreach		DMD as a DUB library			-betterC										Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8		DCompute	Cross-compilation with LDC	newCTFE		I just like it and I think I can make it better	Ranges	Maybe, I'm still a student	Subscribe to dolan dark	Tabs	2018-03-01 14:42:45	2018-03-01 14:57:16	ec4c295c37
37aed7b41d67cae08d58c2a097324936	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		4	Almost functional idiomatic D coding approach and sometimes very terse and hard to grasp metaprogramming snippets that one can see in forums.	4	I lack more complex examples. Though I understand that this gap is filled by a number of D books. 	0	3	3	code.dlang.org could really use some work to make it more easily usable, e.g., hierarchical categories, package ranking, etc. Other that that, I really do not use the webpage at all, so it is hard for me to say.	1	5		1	Mostly great content	It would be great if there were more articles :)	5	D Forum							5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications			Security						Science/Research		Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows							dmd		dub						Yes, I work with D part time	vim / neovim		4	0			Haven't find yet one that was not already filled by someone else.	4	Better memory management for DMD.	It's awesome, but I miss a few features	Sometimes I feel that the bar for syntactic sugar is set too high and the steady push for library solutions sometimes ends with not very pleasant syntax.	tuples		in-place struct initialization				multiple alias this				writing files at compile-time					No	3		Yes	2	4	4					Old modules like std.outbuffer or std.socket		Fear to do breaking changes				DIP1000			More/better container classes																		std.bigint	std.bitmanip	std.compiler	std.complex				std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint		std.functional		std.json		std.mathspecial		std.outbuffer							std.socket						std.uni						std.xml	std.zlib	std.zip	1000 willing PR reviewers, so that library is faster in embracing changes.	No, but I want to to			Finding good issues to get started	Time is my only enemy	Personal laziness							Nothing										Nothing						Nothing								Nothing								Nothing																		I thinks that the previous questions map the D problems quite nicely. It would be great if the same terminology was used in the vision document.	pleasant pragmatic capable	I was looking for something better than C++	After a short while, I realized that I could shrink my codebase a lot, remove much boilerplate and make it much safer by default.				CTFE (static if, static foreach)					Readable syntax	UFCS		Closeness to C/C++		Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection					std.concurrency & std.process	Multi-paradigm			static foreach	opt-in GC and runtime	DMD as a DUB library								Back referencing of mangled symbols							Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8		DCompute		newCTFE		It is less of a struggle than other options.		Maybe, I miss accountability at the moment	It would be great, if Andrei made it more clear what he's working on and how it relates to the big picture. With his partial withdrawal from forum's discussion and Walter's usual I-am-doing-stuff-in-the-background attitude, I do miss updates from D leaders.	Spaces	2018-03-01 14:10:23	2018-03-01 14:56:37	cae3a1727d
f53ced6f563f898afafa7780689b851f	Yes	5					Language specification										3	lack of practical examples and libs	4	i need something like cross-ref popup of function symbol	5	5	3	MORE D-MAN!	0			1	Always great content		3							twitter	5	I don't care.	no	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly		Desktop applications											Official Windows .exe installer							Arch Linux						I compiled D from source			2.078.3 (latest)													DMD			Windows								rdmd	dub						Not applicable	Visual Studio Code		3	1	5			4	less memory usage or no memory limits on compiling	It's ok		tuples															Yes, my project depends on it	4		Yes	3	4	5	Nothing - Phobos (Standard Library) is great											Performance									std.graph		std.i18n											std.compiler					std.csv		std.demangle		std.encoding		stdx.allocator	stdx.checkedint				std.json				std.outbuffer						std.signals	std.socket	std.stdint								std.uuid	std.variant		std.xml	std.zlib	std.zip		Yes	2														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)			Performance problems					Poor Phobos (Standard Library) documentation								dub					Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects							Nothing.									some bbs	I wanted to switch from poor lightweight languages to cool and powerful one, but that is not c++, c# or java		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits				UFCS				Templates		Built-in unittests			Garbage collection				import("myfile")		Multi-paradigm	Functional programming paradigm																										newCTFE		less codes make more features		Yes, just tell me how		Spaces	2018-03-01 13:29:39	2018-03-01 14:54:25	6d4d2d87e9
ddb81b08c7c69aadf9784143ba32b423	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								4	many old code (libraries, examples) not working	4	no documentation about using in @safe, @nogc or betterC 	0	2	4	different parts have different style (not uniform design)	0			1	Mostly great content		4	D Forum						russian dlang telegram channel 	4	Yes, I like StackOverflow.	themes, keywords for quickly and easy finding answers for resolved questions	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications	IoT					Embedded Systems			Science/Research		Official Windows .exe installer		Official .rpm packages	Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows				WebAssembly	Embedded				dub	make					Yes, I work with D part time	Visual Studio Code		4	1	3	github is better		4	compiler as a library for better language support in tools as dscanner, DCD etc 	It's awesome, but I miss a few features	not uniform attribute logic	tuples				assert diagnostics		multiple alias this			static break	writing files at compile-time		Static inheritance			Yes, but only for experimenting/testing/debugging	5		Yes	2	2	3				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc	DIP1000	Performance	More -betterC support				std.eventloop	@nogc containers	better json serialization	better xml serialization										datetime											std.demangle											std.mathspecial		std.outbuffer	std.parallelism					std.signals										std.uuid						flat structure -- don't understand where i need find functions for something (std.string, std.utf, std.ascii etc, std.stdio, std.file, std.path etc)	No, but to other D repositories			Finding good issues to get started			No roadmap		High barrier to entry							Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)						infrastructure of language: compiler integration to tools (DCD), no needs libraries, difficult using on windows (need visual studio), no cross-compilation (linux->win, linux->osx)			Compiler regressions		Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging	dub	DLL support on Windows						Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects											Lack of focus at the management level	Wrong decisions at the management level		no stable points: start feature X then not completely finish feature Y. 	convenient, fast, clean	big russian it resource (habrahabr) in comments	interest and C++ is a stone across the throat for me	std	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests							import("myfile")					static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking	-betterC									Automatic compilation of imports (dmd -i)				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)			DCompute	Cross-compilation with LDC	newCTFE		it's my favorite language	bugs as is	Yes, just tell me how	I think compiler developers must help develop tools as DCD and don't shift full responsibility to community. D infrastructure is part of D and one without other can't be exists.	Spaces	2018-03-01 13:26:11	2018-03-01 14:31:46	f5d24fbac1
d27f40974444365aea2179e43ea2c667	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		2	lack of resources, no longer an issue, that was years ago	3		0	4	4	nothing, I hardly ever use it	0			1	Always great content		3		#d on IRC				I don't need help		4	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications					Big Data						Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows									dub						No	emacs		4	0			unsure if it's a bug	3	Faster CTFE	It's ok	too many attributes (pure, @nogc, @safe, etc.)				named arguments							writing files at compile-time					No	4		Yes	2	3	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket		Fear to do breaking changes							More/better container classes					better json serialization	better xml serialization										std.traits, std.meta																								std.outbuffer																						more/better containers, std.xml, std.database	No, but I want to to				Time is my only enemy												Non-perfect C++ integration								Compiler regressions	Poor compiler error messages					Poor debugging							Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)				Nothing														Lack of progress on DIPs				Useless feedback when templates don't match	flexible costless abstractions	Three Cool Things About D (2010)	it seemed the perfect language	vibe.d	Ranges & std.algorithm					Performance		Readable syntax							Built-in unittests																																				newCTFE		it's fun to use		Yes, just tell me how	good survey	Meh, I don't care.	2018-03-01 13:26:50	2018-03-01 14:30:07	9ad4f1e39f
8c3fb180d45d3bcaa04cd8d75439395f	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							4	Readability of the spec. Good examples missing. 	2	Readability is bad for one who comes from an other programming language. Idioms and usage-pattern are not well descripted. Examples missing.	0	3	4		1	4		1	Huge variance in quality		4			#d on StackOverflow					4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development			DevOps									Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu											2.077.1 (latest LDC)		2.075.1 (removed built-in .sort)										DMD	Linux		Windows									dub						Yes, I work with D part time	Visual Studio Code		3	0				4		It's awesome, but I miss a few features					named arguments									Static inheritance			No	3		Yes	3	2	2				Poor naming choices					@safe for all modules			Performance							better json serialization		std.graph	std.database											std.bitmanip						std.csv		std.demangle					stdx.checkedint								std.outbuffer																	std.variant	std.windows					No, and I don't plan to				Time is my only enemy								Nothing										Nothing								Poor debugging						Nothing												Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials					Too much low-level focus (C/C++)											Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance			UFCS			Simple, but powerful module system	Templates		Built-in unittests			Garbage collection									static foreach								toString with output ranges												vibe.d 0.8								Yes, but only for a specific project		Meh, I don't care.	2018-03-01 14:10:38	2018-03-01 14:27:05	3c3a5a9b06
1796cdfa88d74a92874574fcad59eb6b	Yes	4					Language specification			"Programming in D" by Ali Çehreli					d-idioms		5	Stopping to write C++-style code	4	Sometimes there's too few examples	0	4	5	Large submenus at the top bar, so you have to click twice to get to eg. the specification or phobos docs (this is a minor complaint)	0			1	Mostly great content	Not enough posts :)	5	D Forum	#d on IRC						5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development		Embedded Systems		Kernel Development	Science/Research		Official Windows .exe installer					Official dlang.org/install.sh script		Arch Linux						I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows		Android		WebAssembly			dmd		dub		cmake	meson			Not applicable	Visual Studio Code		5	0			No new issues encountered	4	Makefile-style dependency generation for various build systems	It's awesome - keep it as is																				Yes	3	5	5			Auto-decoding isn't nothrow	Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc	DIP1000	Performance		More/better container classes				@nogc containers			std.graph				std.decimal	std.color					std.base64						std.container									stdx.checkedint														std.signals	std.socket												std.xml	std.zlib	std.zip		Yes	3	Still no response to my pull request after fixing it 2 weeks after the initial feedback (more than a few months of waiting now)															Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000						Poor GC implementation / performance						DLL support on Windows									C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages												Lack of progress on DIPs	Lack of focus at the management level				Expressive all-level language	A reference to the dmc compiler in a book brought me to the digitalmars webpage, where I found out about D (it was D1 then)	Seemed like a nicer language than C++ and I had a lot of spare time	mir	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system							Inline assembler					Multi-paradigm			static foreach	opt-in GC and runtime		Templated vector operations										DMD support for AVX2				Deprecation of the comma operator					DCompute	Cross-compilation with LDC	newCTFE		My love for the language	You can't tell if Abc is a value/reference type without looking whether it's a class or a struct, I'd prefer explicit star/ref notation	Maybe, I'm still a student		Tabs	2018-03-01 14:04:01	2018-03-01 14:20:32	30cab77030
3efe4b3a8c363a3b11895eb0a55f6d09	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		5	bad debuggers support on windows. 	4		1	5	5		1	5		1	Always great content		5	D Forum		#d on StackOverflow					5	I don't care.	I mostly used D.Learn but SO also is fine for me. But some of questions that are OK in D.Learn are not possible to ask on SO (it will be closed/deleted if ask them because of SO rules)	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications				Game Development							Official Windows .exe installer																2.078.3 (latest)													DMD			Windows		Android	iOS						dub						Yes, I work with D part time	Visual Studio Code		4	1	4			5		It's awesome, but I miss a few features		tuples	string interpolation		named arguments												No	5		Yes	3	5	5							Fear to do breaking changes				DIP1000			More/better container classes					better json serialization	better xml serialization		std.database	std.i18n				std.image	std.drawing (2D)						std.compiler	std.complex	std.concurrency					std.demangle				stdx.allocator	stdx.checkedint	stdx.logger	std.functional				std.mathspecial	std.meta	std.outbuffer	std.parallelism				std.regex		std.socket	std.stdint		std.system			std.uni	std.uri		std.uuid		std.windows					No, but to other D repositories										I am just starting to learn D		Nothing										Nothing							Non-enterprise IDE support	Poor debugging		DLL support on Windows				Nothing								Nothing											Nothing.								fast, flexible, powerful	habrahabr.ru (big Russian IT-site)	Because D is almost perfect for me (syntax, design, etc), I really like it.	dsfml	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays	Garbage collection			Debug attribute			Multi-paradigm			static foreach	opt-in GC and runtime				-betterC		New range functionality (substitute, slide)	toString with output ranges									Deprecation of the comma operator						Cross-compilation with LDC	newCTFE		I really like it		Maybe, I miss accountability at the moment	Huge thank you for dlang	Meh, I don't care.	2018-03-01 05:08:04	2018-03-01 14:19:47	f9f85d7896
0f85932dc04633606f0b702751bca90f	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn						d-idioms		3	lack of documentation	1			4	2	lack of roadmap	0			0			4	D Forum							5	I don't care.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly						Game Development								Official tarballs																2.077.1 (latest LDC)												LDC		macOS	Windows		Android	iOS				dmd		dub		cmake				No	vim / neovim		3	1	5			3	more accurate error message	It's awesome - keep it as is																				Yes	2	1	2				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc				More/better container classes				@nogc containers	better json serialization	better xml serialization															std.complex				std.csv															std.outbuffer																							No, but to other D repositories					Personal laziness	No roadmap		High barrier to entry								Non-perfect C++ integration							Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance							Missing support for platform X	D's dependence on a large and bulky runtime				Attribute bloat				Ugly bits of the standard library			Fewer third-party libraries than other language													Lack of progress on DIPs	Lack of focus at the management level				awesome beautiful powerful		out of personal interests	dlib	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits		Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests						Debug attribute	import("myfile")						opt-in GC and runtime				-betterC																		Cross-compilation with LDC			interests		Maybe, I miss accountability at the moment		Spaces	2018-03-01 12:53:29	2018-03-01 14:07:50	4ca7ee46a1
91bc37c4c0996fc3fbd8495e1fcb01f3	Yes	5								"Programming in D" by Ali Çehreli							2	Lack of documentation	2	Not enough examples	0	3	2	Needs more examples and better documentation/tutorials	0			0			4	D Forum							3	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development			DevOps					Machine Learning		Science/Research								d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux									dmd								Yes, I work with D full time	Visual Studio Code		2	0				2	Better error traces and help similar to what the Rust compiler has	It's awesome - keep it as is																				Yes	6	4	4						Reliance on the GC			@safe for all modules	@nogc		Performance						@nogc containers			std.graph	std.database		std.benchmark			std.image																		stdx.allocator	stdx.checkedint	stdx.logger																														No, and I don't plan to													Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000			Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support					D's dependence on a large and bulky runtime						Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)								Little info on StackOverflow		Lack of good examples / tutorials		Few transition guides from programming language Y		Nothing.								Compiled, static typed, fast	Work colleagues	Work	Phobos	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C				Closeness to C/C++					In, out, ref parameters	@safe strings + arrays	Garbage collection		Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach				Compile-time format string checking										Automatic compilation of imports (dmd -i)						vibe.d 0.8		DCompute		newCTFE		Performance and compilation\		Maybe, I miss accountability at the moment		Tabs	2018-03-01 13:33:23	2018-03-01 13:41:31	5abac22585
954a9a39ef4f6ceff541095db436be34	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke				5	Understand templates and the differences to C/C++. Toolchain setup (easier now with DUB).	4	More examples, but it's quite good.	3	4	4		1	4		0			5	D Forum							4	No, the D.Learn forum is fine.	StackOverflow is also good d.learn is also fine.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly				DevOps			Big Data											Official dlang.org/install.sh script													2.076.1 (static foreach)											DMD	Linux		Windows														b2	No	vim / neovim		4	1	5	Too many open issues		5		It's awesome, but I miss a few features	The way C declares functions/variable was never that great (wish D cleaned it up).  Using 'enum' instead of 'def' seems odd. Maybe parameters should be const by default and use 'var' to make them mutable.				named arguments										Nothing - D is already awesome		No	5	No, I can understand most of it.	Yes	2	5	5				Poor naming choices		Reliance on the GC	Fear to do breaking changes							More/better container classes			std.eventloop	@nogc containers	better json serialization			std.database			std.decimal																											std.mathspecial	std.meta	std.outbuffer							std.socket					std.typecons											No, and I don't plan to			Finding good issues to get started		Personal laziness																Intel releasing a D compiler would be nice.	Nothing						Nothing															Legacy of using C++		Fewer third-party libraries than other language		Little marketing / no evangelists				Lack of good examples / tutorials					Too much low-level focus (C/C++)						Toolchain seems weaker than C++	Great language	Googling C++ alternative	Interest in computer languages	std.algorithm	Ranges & std.algorithm					Performance	Native interoperability with C		UFCS		Closeness to C/C++		Templates		Built-in unittests									Multi-paradigm	Functional programming paradigm						Compile-time format string checking	-betterC										Runnable examples on dlang.org					vibe.d 0.8			Cross-compilation with LDC			Looking for an alternative to C++		No, I'm already donating my free time	D is a great language, using C++ is so much more painful.	Spaces	2018-03-01 10:17:55	2018-03-01 13:36:55	47bebd7d3f
543056e24857f111daaddd3fcdd5748c	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	To do something useful, you need probably some additional libs, and often you are informed by dub at the end during linking, that something is missing.	3	Sometimes missing simple examples,  or the example is to simple not using more than one the optinal parameters. When you want to give a hint for improvement you need logins to Bugzilla or Github.	0	4	4	There are some special articles, sometimes mentioned in the forum, about general concepts they are not so easy to find. Example: https://dlang.org/articles/d-array-article.html	1	5	Some Examples can not be cut n. pasted to be used, because additional libs mus t be installed. 	1	Mostly great content	More overall visions about the future of D and the community. Highlighting of achievements in this process by the core team. Maybe just do quarterly an interview with the core team saying where is the focus of the D Foundation.	5	D Forum			dlang.slack.com				4	Yes, I like StackOverflow.	On Stack Exchange in general there are many Forums like for Ubuntu etc. Maybe what about doing an own D Exchange with the known system of Stackoverflow but a little more D centric. The UP and down voting mechanisms and the possibility to search and comment are way better. 	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development										Science/Research					Official .deb packages		Official dlang.org/install.sh script	d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows		Android							dub						Yes, I work with D part time	emacs		3	1	2	There should be - maybe with lower priority a way to make anonymous reports. 		4	be part of the debian / ubuntu distribution without any additional d-apt...	It needs serious work	we have the beautiful UFCS but with ! template parameters a!(b!c))(d)  it may get hard to read. And difficult for people coming from languages without any templateing.		string interpolation		named arguments							writing files at compile-time					No			Yes	3	2	1				Poor naming choices													std.eventloop					std.database			std.decimal	std.color	std.image	std.drawing (2D)													std.demangle	std.digest																																		Many simple string manipulations need a bunch of .std, hard to learn which. 	No, but I want to to			Finding good issues to get started					High barrier to entry													To use it for web development the edit complie cycle time  increase by using of CTFE regex (vibe.d) makes using things like .php or rails still more convenient to me	Nothing						Nothing										Attribute bloat			C behavior without warning (e.g. signed to unsigned comparisons)						Little marketing / no evangelists				Lack of good examples / tutorials		Few transition guides from programming language Y						Lack of focus at the management level			The D Foundation has to find a way to grow, in manpower, in public awarenes, in funding etc. this can not be done only by making a better compiler	The _one_ general purpose language. Or what BASIC means as an acronym but replacing the word beginner 's by expert's.	Heise Newsticker announcement, that D compiles D.	The first description contained the words: C/C++ and ruby.  Doing high abstraction coding resulting in machinecode.  Compiled language with benefits of traditional scripting languages. 	vibe.d		Mixin			std.traits		Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++							Garbage collection						Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library		Compile-time format string checking											Runnable examples on dlang.org		Deprecation of the comma operator		New third-party applications (e.g. Tilix)	vibe.d 0.8						Writing small programs compiled to native code.   	Sometime increase of compilation times (using regex)	Yes, I'm already doing so	The D Foundation and the team around them  has been able to improve the D environment a lot the last 2 1/2 years so I am positive about the future. The main focus should be for usability of D.  Easy installation, easy editing, good documentation of the existing.  	Meh, I don't care.	2018-03-01 12:27:37	2018-03-01 13:30:51	085121c8b2
d3d89adcabc0683025fe2f2c56f5f1d6	Yes	5			"The D Programming Language" by Andrei Alexandrescu									"D Cookbook" by Adam D. Ruppe			3		4		0	5	5		0			0			3	D Forum				My colleagues			3	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily	Web development	Desktop applications					Big Data							Official tarballs			Official OSX dmg installer												2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd								Yes, I work with D full time		ide5  and  notepad++	5	1	4			5		It's ok																	Yes, but only for experimenting/testing/debugging	5		Yes	5	3	5	Nothing - Phobos (Standard Library) is great											Performance																																																																	Yes	4											Nothing												Compiler regressions											no support Qt == Lazarus																				Nothing.		Frequent breaking changes						it's a great language for smart people	internet	c++ is very difficult	QtE5		Mixin				Performance				-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection	Inline assembler		Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm							-betterC			toString with output ranges					DMD support for AVX2											newCTFE		Development speed is 3-5 times higher than in C++		Yes, I'm already doing so		Tabs	2018-03-01 12:26:17	2018-03-01 13:17:57	e421c48778
2d3b66602693659162aaa91b15f50349	Yes	5														The Documentation	4	Nothing really, just a matter of how much time I spend on it	4	Nothing	0	5	5	Nothing	1	5	When I got to the first 4/4, I thought, "Is that all there is?" until it realised that there was more to the right.  Perhaps that needs to be highlighted more.	1	Always great content	Nothing	5						I don't need help		3	I don't care.	No comment	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development			DevOps									Official Windows .exe installer			Official .deb packages																										DMD	Linux	macOS	Windows	BSD-variant	Android	iOS		Embedded				dub						No	Visual Studio Code		5	0			N/A	5		It's awesome - keep it as is																				Yes	3	3	3	Nothing - Phobos (Standard Library) is great																std.eventloop				std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)		No comment																																														repl - an interactive d shell	No, and I don't plan to				Time is my only enemy								Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							Not sure	A better C++	Can't remember	Because it has performance + elegance							Performance		Readable syntax																		Built-in string and array handling	static foreach	opt-in GC and runtime																									High performance but easy to use.  vibe.d				Tabs	2018-03-01 12:13:58	2018-03-01 12:59:02	15fc97a472
399909e5a853bdbf86bd70d70d9c80c8	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							4	tooling, diff between tdlp and implementation	3	I find it terse. More example or possible gotchas would be welcome. 	1	4	4	It's hard to tell since I am well accustomed to it by now.	0			1	Always great content		3	D Forum										No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications						Embedded Systems			Science/Research					Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows		Android							dub						No	vim / neovim		3	1	2			3		It's awesome, but I miss a few features	The need for Rebindable is a shame. Shared is broken.							multiple alias this									No	2		Yes	4	2	2									@safe for all modules	@nogc	DIP1000			More/better container classes			std.eventloop	@nogc containers												Containers									std.csv		std.demangle		std.encoding									std.mathspecial								std.signals														std.zlib	std.zip	Better containers, safe by default  	Yes	4												Language complexity (e.g. inout, abuse of mixin)						Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation						Non-enterprise IDE support	Poor debugging								Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)			Nothing														Lack of progress on DIPs					productive system language.	On the web	Because looked like C++ as easy as Java.		Ranges & std.algorithm						Native interoperability with C		UFCS		Closeness to C/C++	Simple, but powerful module system					@safe strings + arrays							Multi-paradigm								-betterC																						Rebindable and Shared	Maybe, I miss accountability at the moment		Spaces	2018-03-01 10:42:30	2018-03-01 12:50:01	81dea59eb5
5db6bcb0758dace4d87015ceea67585e	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org			D Forum: Learn	"Programming in D" by Ali Çehreli							4	dmd 2.078.3 on Windows doesn't show syntactic errors messages	4	Every function/method should be accompanied with short working example	1	5	5	D gems list should be 10 times bigger. Short working examples on (almost) every case. Again.	1	4	Some examples doesn't work.	1	Mostly great content	-	4	D Forum		#d on StackOverflow					4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly											Science/Research		Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows							dmd		dub						Yes, I work with D part time	vim / neovim		3	0				4	Cilk+ extension (cilk_spawn/cilk_sync)	It's ok		tuples															Yes, but only for experimenting/testing/debugging	4		Yes	3	3	3	Nothing - Phobos (Standard Library) is great											Performance					std.eventloop				std.graph	std.database						std.drawing (2D)																																																																																																																																																																												Tabs	2018-03-01 12:28:31	2018-03-01 12:43:07	b0be5abdae
a57536cf6d5426dcf4a18fec73e3d71d	Yes	4					Language specification		D Forum: Learn								5		3		0	4	5		0			1	Mostly great content		5	D Forum							5	I don't care.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development					Game Development		Embedded Systems							Official .rpm packages														2.078.3 (latest)													DMD	Linux							Embedded		dmd	rdmd	dub	make					Yes, I work with D part time	Sublime		4	1	3			4		It's awesome - keep it as is																				Yes	2	4	6					Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc	DIP1000			More/better container classes				@nogc containers																			std.container		std.csv							stdx.checkedint				std.json		std.mathspecial		std.outbuffer						std.signals													std.xml				Yes	4													Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance		Nothing										Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)			Nothing														Lack of progress on DIPs								vibe. d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)					Readable syntax					Templates					Garbage collection										opt-in GC and runtime																											Yes, I'm already doing so		Meh, I don't care.	2018-03-01 12:03:50	2018-03-01 12:35:12	64bb1c4f49
7d24d8048686208a2056a314305236a3	Yes	4								"Programming in D" by Ali Çehreli							5		5		3	4	4		0			1	Mostly great content	To much focus on getting C/C++ Programmers on board.	5	D Forum							5	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely					Security			Embedded Systems				Signal Processing	Official Windows .exe installer	Official tarballs															2.078.3 (latest)													LDC	Linux		Windows							dmd								No	Eclipse		3	0				2	Clearer Error messages	It's ok	to many special symbols. template code is ugly.	tuples				assert diagnostics										Introspection for contracts!	No	3	it is incomplete	Yes	5	4	3		Auto-decoding for strings					Fear to do breaking changes		@safe for all modules					More/better container classes															a proper test library		std.base64										std.demangle	std.digest	std.encoding				stdx.logger					std.mathspecial				std.path		std.random		std.signals		std.stdint					std.uni	std.uri				std.windows					No, and I don't plan to										I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)									Nothing								Poor debugging				D's dependence on a large and bulky runtime						Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)			Nothing															Lack of focus at the management level			tooling, tooling and tooling	its 80% there		It has metaprogramming and contracts		Ranges & std.algorithm		CTFE (static if, static foreach)						UFCS					Built-in documentation (Ddoc)	Built-in unittests					Contracts																																					Spaces	2018-03-01 11:47:08	2018-03-01 12:32:06	30361c3cb4
d2c0f9638741723dcc8776cda7fcb496																																																																																																																																																																																																																																																																																																																																																		2018-03-01 12:29:00	2018-03-01 12:29:22	d0b63728df
6aa3a84eba58d9d97a25bc322ed08623	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org			D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			3	Lack of real-world examples. Going from theoretical parts of understanding D concepts to actually implement it in various algorithms that already implemented in other languages (C, C++, Java, etc). Always a question comes up: How do I do this in D? More real-world examples would help. 	4	No idea actually, I am new to D as a whole. So haven't done any rigorous check about Phobos.  	1	3	3	The 'forum' is not a forum. 	1	4	Problems/exercises given there do not have solutions. And some more examples will be very helpful.	1	Mostly great content	I don't know. I do not read the DBlog that often	4	D Forum		#d on StackOverflow	dlang.slack.com				4	Yes, I like StackOverflow.	Even though StackOverflow is a right place to improve. But the forums.dlang.org aslo needs to improve, or be disabled altogether.  It is currently not a forum, and giving a failed expectation of what one can do with a forum.		Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly		Desktop applications					Big Data		Machine Learning		Science/Research							Official dlang.org/install.sh script	d-apt Debian/Ubuntu			Gentoo				I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows		Android	iOS	WebAssembly	Embedded		dmd	rdmd	dub						Yes, I work with D part time	emacs		4	0			Still struggling with learning process, haven't identified any bugs.	4	Give exact line of code that is failing, and suggestion to fix	It's awesome - keep it as is																				Yes	3	3	2								'stream' disappeared and reappeared in 'undead'. And I don't know how not to use 'undead'.	@safe for all modules			Performance	More -betterC support						better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)													std.demangle				stdx.allocator									std.outbuffer												std.typecons					std.variant						No, but I want to to										I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)			Non-perfect C++ integration									Poor compiler error messages				Non-enterprise IDE support							Nothing									Fewer third-party libraries than other language														Lack of focus at the management level		Lack of effort to promote D via education	Despite being a general programming language, D still need to prioritize some areas of applications to support it well before moving to others. In this sense, D lacks a good high-level strategies	elegant, C-alternative, under-utilized	Online Forum	See it as a good alternative to C/C++	None	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax		-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters			Inline assembler		Debug attribute		std.concurrency & std.process	Multi-paradigm																													To develop rich applications fast, safe, while having performance of C.	None till now. 	Yes, just tell me how	Even though it may not be number 1 priority, please make it clearER that C/C++ programmers can easily switch to D and benefits whole bunch of features while not losing C/C++ investment. D should ride on the shoulders of C/C++ old-pioneering giants and get more popular.	Meh, I don't care.	2018-03-01 10:18:57	2018-03-01 12:19:53	20def82a6d
52e8890b24183c7ac95c9236382644d7	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli					d-idioms		4	Range idioms	4	Sometimes there are no good examples	1	3	5	Everything is pretty good.	1	5		1	Mostly great content		5	D Forum		#d on StackOverflow					4	Yes, I like StackOverflow.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development	Desktop applications												Official tarballs					d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows		Android		WebAssembly	Embedded				dub						Yes, I work with D part time	Visual Studio Code		4	0				3	Native x86-64 Windows support	It's awesome - keep it as is																				Yes	2	3	4					Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc			More -betterC support				std.eventloop	@nogc containers		better xml serialization		std.database																																																							No, but I want to to					Personal laziness			High barrier to entry							Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance																				Less corporate support (including jobs) than other languages																	Very pleasant language	https://habrahabr.ru	I like D's syntax				CTFE (static if, static foreach)				Native interoperability with C		UFCS	-betterC		Simple, but powerful module system			Built-in unittests									Multi-paradigm								-betterC														New third-party applications (e.g. Tilix)		Colorized error messages							Yes, just tell me how		Tabs	2018-03-01 11:56:18	2018-03-01 12:18:47	de16d1930a
4f4e4dac5f8d4f82fbcd29b0b869c0d0	Yes	3			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn							Chat in telegram messenger	3	Small amount of examples	4	Need more examples	2	4	4		1	5		1	Mostly great content		5							Telegram chat	5	Yes, I like StackOverflow.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development			DevOps												Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux											dub						No	Visual Studio Code		2	0				4		It's awesome, but I miss a few features			string interpolation			assert diagnostics											Yes, but only for experimenting/testing/debugging	5		Yes	3	4	4			Auto-decoding isn't nothrow			Reliance on the GC			@safe for all modules	@nogc				More/better container classes			std.eventloop	@nogc containers				std.database		std.benchmark															std.csv							stdx.checkedint						std.mathspecial	std.meta	std.outbuffer								std.stdint										std.windows		std.zlib			No, but to other D repositories			Finding good issues to get started	Time is my only enemy	Personal laziness			High barrier to entry					Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems								Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging				D's dependence on a large and bulky runtime					Virtual by default						Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials				Nothing.								Elegant, fast, rare	habrahabr.ru	It is more high-level and elegant than C++	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits			Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests					Contracts	Debug attribute		std.concurrency & std.process		Functional programming paradigm			opt-in GC and runtime						New range functionality (substitute, slide)	toString with output ranges							Runnable examples on dlang.org				New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages					Great language	UFCS feature	Maybe, I miss accountability at the moment		Spaces	2018-03-01 11:43:28	2018-03-01 12:05:58	cc92a451a6
0deccc720454fd7a57752ddb8847b70b	Yes	2															1				3	4	3		0			0			2					My colleagues			4	I don't care.		Yes, but it was a simple fix.	Please don't ever break code.	Rarely												passenger information												Docker									2.074.1 (compile-time format checking)									DMD	Linux																rake	Yes, I work with D part time	emacs		3	0				3		I have a very hard time with D's syntax																	No	3		Yes, but only for some projects	3	3	3																																																																													No, and I don't plan to													Language complexity (e.g. inout, abuse of mixin)			Non-perfect C++ integration														Poor debugging																				Missing tutorials / documentation in spoken language X							Frequent breaking changes																				Closeness to C/C++														Functional programming paradigm																																Spaces	2018-03-01 11:35:13	2018-03-01 12:05:47	144f71dfdb
feed78fb278f106e95681b824ff6ce7e	Yes	3			"The D Programming Language" by Andrei Alexandrescu									"D Cookbook" by Adam D. Ruppe			5	Andreis book is excellent, but out of date in some parts and never reflected the implementation (synchronized) in other parts.	5	No idea. I generally find the documentation very good.	0	4	4	Aesthetics maybe. It looks very busy.	0			1	Mostly great content	I don't dislike anything particular so far.	3						I don't need help		5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development	Desktop applications				Game Development							Official Windows .exe installer							Arch Linux							Freebsd package			2.077.1 (latest LDC)											whatever is in the repos	DMD	Linux		Windows	BSD-variant					OpenBSD is a currently missing important os for me			dub						Yes, I work with D part time	emacs		1	0				4	Better portability (OpenBSD for DMD) and more recent ports/packages in the repos	It's ok	Some parts have grown quite ugly (inout, attributes with or without @). I generally like the syntax very much, but it has some untidy edges.	tuples						multiple alias this									No	3	Not sure, I don't need to look in the specification usually.	Yes	2	3	2		Auto-decoding for strings			Old modules like std.outbuffer or std.socket			Missing batteries (xml has been deprecated for a very long time now) - maybe look into Go for ideas							See last question: More batteries, like Go has in it's library			@nogc containers		better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal		std.image	std.drawing (2D)													std.demangle												std.meta													std.typecons										More modules for common tasks (I really love the net/http packages from Go, e.g.)	No, but to other D repositories				Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration					Missing libraries in the eco system. I wanted to use D recently for a cli tool, but could not find a module for password prompting (without echo).	Nothing							Non-enterprise IDE support			DLL support on Windows	Missing support for platform X				Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library			Fewer third-party libraries than other language		Little marketing / no evangelists												Lack of focus at the management level	Wrong decisions at the management level	Lack of transparency. I have no idea what Walter and Andrei are working on.		Pragmatic, nearly perfect language (okay, that are four words ... wait, it is getting worse!)	Reddit	It seems to be a perfect mix from most paradigms.	dlangui	Ranges & std.algorithm					Performance		Readable syntax					Templates		Built-in unittests			Garbage collection		Contracts			std.concurrency & std.process		Functional programming paradigm									New range functionality (substitute, slide)													vibe.d 0.8	Colorized error messages		Cross-compilation with LDC			It seems to be the perfect language that does not get in my way. It is sad that it isn't used more, which is (vicious circle-like) part of the reason I can't use it more.	inout maybe?	Yes, but only for a specific project	Quite a long survey you have here ...	Spaces	2018-03-01 11:35:11	2018-03-01 12:04:35	36ac268355
e37f67fbd981374d36f8a3da1866950b	Yes																																																																																																																																																																																																																																																																																																																																																	2018-03-01 12:00:31	2018-03-01 12:01:23	00f4a824ee
3b991b5d78c1848ff14eba2c827b829e	Yes	4				tour.dlang.org			D Forum: Learn						d-idioms		2	Const/Immutable, error messages no help, trying to just use strings as ascii strings with range algorithms.	4	It's quite "jargon" filled and assumes specialist knowledge.		4	4		1	3	The interactivity of it I like. The non-mentioning of D-warts I no like.	1	Mostly great content		4	D Forum							4	No, improve DFeed.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development							Embedded Systems													Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS						Embedded				dub						No	Visual Studio Code		4	1	3	That it's not in github.		4	Error message fixes up the wazoo!	It's awesome, but I miss a few features	"is" is black magic. no way for implicit casting if you really really want to, unless it's assignment, which is just weird.	tuples	string interpolation	in-place struct initialization	named arguments	assert diagnostics					static break		UFCS for local symbols	Static inheritance		optional binding syntax	No	4		Yes	1	5	1		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000			More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database	std.i18n					std.drawing (2D)		ranges when mixed with const		std.bigint	std.bitmanip	std.compiler	std.complex				std.csv		std.demangle		std.encoding		stdx.allocator		stdx.logger			std.json				std.outbuffer		std.path				std.signals	std.socket	std.stdint										std.windows	std.xml	std.zlib	std.zip	No auto decoding. Latin1String type, http/https library	Yes	4	Just takes time, nothing technical/cultural.												Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing							Non-enterprise IDE support	Poor debugging							Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language										Nothing.							No custom string operator overloading. Not enough libraries to get stuff done. Feels like there're a lot of minor holes, edge cases.	Fun, powerful, expressive.	Colleague	For fun	range	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance			UFCS			Simple, but powerful module system	Templates		Built-in unittests								std.concurrency & std.process	Multi-paradigm			static foreach	opt-in GC and runtime																							newCTFE		It's compile time features and javascript like expressivity	auto decoding	Maybe, I miss accountability at the moment		Spaces	2018-03-01 11:12:18	2018-03-01 11:45:50	c65adcbd40
6e547e607f8e53e2afb24a8dd80e6735	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										5		4		0	4			0			1	Mostly great content		5	D Forum					I don't need help			I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications									Science/Research					Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows		Android		WebAssembly			dmd	rdmd	dub						Yes, I work with D part time	Visual Studio Code		3	1	4			4	Clear rich cross-platform SIMD instrinsics story	It's awesome - keep it as is																				Yes	6	6	6	Nothing - Phobos (Standard Library) is great											Performance	More -betterC support	More/better container classes			std.eventloop	@nogc containers															std.bitmanip	std.compiler	std.complex						std.demangle					stdx.checkedint	stdx.logger							std.outbuffer																							No, but I want to to				Time is my only enemy	Personal laziness			High barrier to entry				Nothing												Compiler regressions		Poor GC implementation / performance			Non-enterprise IDE support		dub	DLL support on Windows				Nothing											Little marketing / no evangelists	Few showcases / flagship projects											Lack of focus at the management level				powerful, flexible, generic	rsdn.ru forum probably	curiosity, excellent Andrei's book	Pegged	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance		Readable syntax	UFCS				Templates					Garbage collection					std.concurrency & std.process	Multi-paradigm																													Templates, static introspection, native code, ease of expression of thought.				Spaces	2018-03-01 11:03:51	2018-03-01 11:38:58	3e2f320940
2517555347e033471acd2e1e936175ed	Yes																																																																																																																																																																																																																																																																																																																																																	2018-03-01 11:25:10	2018-03-01 11:25:30	7f6f562515
11f3f58b6729a2f4fcf1713101e357f6	Yes	3					Language specification										3	Obscure code examples in spec didn't align with my aims	3	Function descriptions can be overly technical (especially in std.algorithm) Some functions have no examples	0	2	4	Unattractive, dated design ad-hoc structure small search box	0			1	Mostly great content	Tone is too formal Is often a series of quotes rather than a fully fledged article Could add a series of shorter how-to style articles, tips, as formerly featured in The Week in D Make the blog a global menu item on dlang.org	3	D Forum							4	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications												Official tarballs												I compiled D from source			2.078.3 (latest)													DMD			Windows		Android					dmd			make					Yes, I work with D part time		Visual Studio Community	2	1	1	Can never locate my own bug reports Search often doesn't return relevant bugs Bugs never get addressed		4	Options for outputting documentation adhering to my project structure but in a different location	It's awesome, but I miss a few features	Can be verbose Operator overloads use words instead of the symbol AA initializers Somewhat staid, unwilling to keep up with C#, Kotlin Property syntax - why do I have to declare type for both getter & setter? Still don't really like quirky template syntax	tuples	string interpolation	in-place struct initialization	named arguments			multiple alias this	UDAs for attributes							Pattern matching, C#-style expression bodied members, nullable syntax, null conditional/coalescing operators, async/await	No	4	Sometimes does not match state of language implementation	Yes	3	3	4		Auto-decoding for strings		Poor naming choices			Fear to do breaking changes	Over-reliant on templates				Performance		More/better container classes					better json serialization	better xml serialization		std.database	std.i18n		std.decimal				std.net (http + smtp + URI parsing)	Containers (weird names, generally hard to use), std.xml (horrible design), Nullable (can't compare to/assign null)		std.bigint			std.complex	std.concurrency			std.csv						stdx.allocator	stdx.checkedint								std.outbuffer						std.signals								std.uri		std.uuid			std.xml	std.zlib		Needs restructuring Async support	Yes	2	Change never merged												Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing							Non-enterprise IDE support			DLL support on Windows				Nothing															Lack of good examples / tutorials							Lack of progress on DIPs				GC performance needs improvement, no struct inheritance, limited reflection, no proper typedef	Fast, safe, practical	Google search for a native C#-like language	To write Windows apps	std.algorithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates			In, out, ref parameters		Garbage collection						Multi-paradigm		opDispatch	static foreach																	Deprecation of the comma operator									Fast compilation, nice syntax, expressiveness	Const (although I can mostly ignore it)	No, I'm already donating my free time		Spaces	2018-03-01 09:31:44	2018-03-01 11:22:19	4e871dbc7e
3a702cca34246690202561fa7e534eb3	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification									#d IRC on OFTC	3	Setting up the environment.	4	It should be available in different formats.	2	4	4	Nothing, I like it.	1	4	Nothing, it is fine.	1	Mostly great content	Can't think of anything.	4	D Forum	#d on IRC	#d on StackOverflow					5	No, improve DFeed.	No.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications					Big Data		Machine Learning						Official .rpm packages			Official dlang.org/install.sh script								I compiled D from source	My own install.sh		2.078.3 (latest)													SDC	Linux				Android		WebAssembly	Embedded					make				waf	Yes, I work with D part time	DlangIDE		2	1	3	I do not like bugzilla... 		5		It's ok	Make semicolon optional (as statement separator) - do not be slaves to the C/C++ syntax!														Nothing - D is already awesome		Yes, but only for experimenting/testing/debugging	4	It should be available in the ePub format.	Yes	5	3	4				Poor naming choices				It is missing the important APIs: stream, asyncio (preferably similar to Boost Asio), tls, http (1 and 2)							More standard APIs that are expected to be found there (stream, asyncio, tls, http 1/2)		std.eventloop		better json serialization	better xml serialization		std.database		std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)	std.crypto	Can't think of anything.																						std.mathspecial	std.meta																			std.windows				The core (minimal) library should be separated (libd.so perhaps, or libdruntime.so), and the rest should go to libphobos.so)	Yes	3	Process is too long.												Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)		Code is becoming hard to read/understand due to abuse of UFCS, mixins, etc	Nothing							Non-enterprise IDE support	Poor debugging								Attribute bloat				Ugly bits of the standard library			Fewer third-party libraries than other language			Few showcases / flagship projects													Yes, we do have DIPs, but please look at Java JSRs and how they do things...	As a language - no.	Pragmatic programming language.	1999	Few things made me learn it - contracts, modules and packages, unittest blocks, immutable strings, unicode strings, neat syntax	dlangui	Ranges & std.algorithm						Native interoperability with C	Readable syntax				Simple, but powerful module system	Templates		Built-in unittests					Contracts		import("myfile")	std.concurrency & std.process	Multi-paradigm			static foreach				Compile-time format string checking	-betterC																			newCTFE		It is the best of all C-family languages so far.	I cannot easily run specific unittest (unittests are too simple, the testing system needs to be refactored)	Maybe, I miss accountability at the moment	Keep up with the good work!	Spaces	2018-03-01 10:38:19	2018-03-01 11:09:58	0803b90867
5ee1bfd8cc2d9f59297cf5a0fe7dc7a0	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	Compiler errors	4	Navigation Documentation sometimes looks like specification	0	5	4		1	4		1	Always great content			D Forum						Google	3	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly				DevOps								Mobile app development	Official Windows .exe installer														Official zip		2.078.3 (latest)													DMD	Linux		Windows		Android	iOS						dub						Yes, I work with D part time		Notepad++	5	1	3			4	Better error messages	It's awesome, but I miss a few features		tuples		in-place struct initialization			language binding to X								Nothing - D is already awesome		No	3		Yes	2	3	4					Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance				I'm happy as is.		@nogc containers	better json serialization			std.database							std.build (dub as a library)	std.datetime and friends				std.compiler	std.complex		std.container		std.csv		std.demangle				stdx.allocator	stdx.checkedint	stdx.logger	std.functional					std.meta	std.outbuffer		std.path	std.process			std.signals	std.socket	std.stdint						std.uri		std.uuid		std.windows		std.zlib	std.zip		No, but to other D repositories					Personal laziness																Lack of C# interop				Poor compiler error messages					Poor debugging			Missing support for platform X					Attribute bloat		Wrong defaults (e.g. not @safe by default)						Less corporate support (including jobs) than other languages												Lack of progress on DIPs							It didn't give me any reason to stop learning	std.algorithm	Ranges & std.algorithm							Readable syntax	UFCS				Templates		Built-in unittests			Garbage collection		Contracts				Multi-paradigm																		Runnable examples on dlang.org		Deprecation of the comma operator			vibe.d 0.8		DCompute				Easily writing readable, correct and safe code		Maybe, I miss accountability at the moment		Spaces	2018-03-01 08:02:06	2018-03-01 11:05:25	a641d5e4cb
d6b0d48bcbef7604f0ab894ca5f6bbd0	Yes	2			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							3	D has very few books!! One of the authoritative book is a decade old!!  The standard library documentation is poor. 	2	Clear examples.  The language is terse and geared more towards a non beginner. 	2	3	2	simple and clear examples. The current examples are too high level and unlikely to attract  newcomers. What is D really good at? examples on interfacing with C for example. 	0			1	Mostly great content	More content. The language chief architects should contribute a little more on the progress and future work. It helps to glue the community together. I would like summaries of controversial and long topic threads from the forums. 	2	D Forum		#d on StackOverflow					3	Yes, I like StackOverflow.	Stackoverflow is better. Easy search. Global and wider reach. Has a proper voting system. I dont want to scroll though threads to find the best solution to a programming question. It has a better commenting system. Better API that allows systematic mining of data and provide better insight of the community and the language. See the latest blogs from stackoverflow. 	Yes, it was hard to find out why.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly											Science/Research						Official OSX dmg installer	Official dlang.org/install.sh script											2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows	BSD-variant									make					Yes, I work with D part time	vim / neovim		1	0				1	stability, speed. Switch to and support LDC as the main D compiler. 	It's ok	too many keywords. Confusion on when to use which. "@safe nothrow inout @property" 		string interpolation				language binding to X										No	1		Yes	0	1	1		Auto-decoding for strings				Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000		More -betterC support				std.eventloop	@nogc containers	better json serialization		std.graph	std.database		std.benchmark	std.decimal						std.base64		std.bitmanip								std.demangle																																				No, but I want to to						No roadmap		High barrier to entry		I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)						Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000				Compiler regressions	Poor compiler error messages	Poor GC implementation / performance								D's dependence on a large and bulky runtime												Less corporate support (including jobs) than other languages		Few showcases / flagship projects	Little info on StackOverflow				Few transition guides from programming language Y				Frequent breaking changes	Lack of progress on DIPs	Lack of focus at the management level				great(idea), unfocused(execution), flagmented/frustrated(community)	friend	Thought it would be a better alternative to C or Python/Ruby	std.range	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance					Closeness to C/C++	Simple, but powerful module system													Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC																			newCTFE				Yes, just tell me how		Spaces	2018-03-01 10:42:38	2018-03-01 11:02:21	aa699c6226
1ef5a686630ccef7eca4dd354765f93c	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		3	no major hurdles	4	no real issues; examples on every function would be good, even if it means repeating some example code.	3	3	3	Twitter feed just adds visual noise	0			1	Mostly great content	Nothing, it is a blog.	4						I don't need help		3	No, the D.Learn forum is fine.	no 	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications						Embedded Systems			Science/Research			Official tarballs															2.078.3 (latest)													DMD	Linux		Windows	BSD-variant								dub		cmake				Yes, I work with D part time	vim / neovim		4	1	3	nothing, it is an issue tracker and it works		4	better error messages for template code	It's awesome - keep it as is																				Yes	3	4	4							Fear to do breaking changes				DIP1000			More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database		std.benchmark	std.decimal				std.stream, std.peg (i.e. Pegged in phobos)	none, it is all pretty simple				std.compiler	std.complex		std.container																								std.socket											std.windows	std.xml			std.json std.xml std.streams (over ranges)	Yes	3	Nothing																	Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000		Nothing						Nothing										Attribute bloat		Wrong defaults (e.g. not @safe by default)				Nothing														Lack of progress on DIPs				D roadmap and progress is lacking a bit behind other languages	Python C++ lovechild	Internet (searching for C++0x feature list)	Wanted a C++ replacement and was sick of binding Python & Java to C++ because C++ was too slow to develop in for business logic and Python/Java were too slow for compute.	Phobos, Pegged and GtkD (I cannot count!)	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++		Templates		Built-in unittests		@safe strings + arrays	Garbage collection							Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations				New range functionality (substitute, slide)	toString with output ranges					DMD support for AVX2					New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages		Cross-compilation with LDC	newCTFE		It hits the sweet spot like Python but with native C/C++ performance.	error messages from template code	Maybe, I'm still a student		Meh, I don't care.	2018-03-01 10:23:35	2018-03-01 11:01:44	0b2b290832
d77bb4207a85dc125ffe25cedbb6ed6f	Yes	4					Language specification			"Programming in D" by Ali Çehreli					d-idioms	Example code in dub repos	4	Finding good, complete examples addressing common web patterns.	4	General search still isn't great.  Certain functions are sort of hidden, e.g. split from std.string	5	4	4	Many useful links are buried under dropdown menus.  We should examine if we're properly surfacing the most popular options.	1	3	It feels awkward to use.  I may need to revisit it since recent changes.	1	Huge variance in quality	Some of the content is pretty dry to someone not deeply entrenched in the D language.  That doesn't necessarily help to draw in outsiders.	4	D Forum			dlang.slack.com				3	Yes, I like StackOverflow.	Opening up the slack channel to more people might also be a good route, though I understand it can be expensive.  StackOverflow is a good standard and recognized way for devs to discover answers.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development		IoT	DevOps		Game Development	Big Data	Embedded Systems			Science/Research				Official .rpm packages											I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux						WebAssembly	Embedded				dub		cmake				Yes, I work with D part time	vim / neovim		3	1	2	It's harder to get to issues and things tend to be forgotten and ignored.  It's not common for modern languages and makes me less likely to report bugs because it's a pain.		4	Better error reporting.  Make the template/function/class more succinct and the actual error more descriptive.  If you can point out exactly where in a line the error occurred, as rustc does.	It's ok	We have a lot of extra attributes that seem to be confused or lacking complete implementation and documentation, e.g. shared and "auto ref return".	tuples			named arguments							writing files at compile-time				Inherited templates.  For example, apply a serialization mixin at the base level of a hierarchy.	No	4		Yes	4	3	4								We lack a standard set of interfaces for async and network operations that would allow us to projects like hunt, tanya, and vibe.d						More/better container classes			std.eventloop		better json serialization		std.graph	std.database								std.ascii vs std.utf vs std.uni.  All the various types under std.datetime / core.time.																						std.mathspecial								std.signals						std.typecons	std.uni		std.utf							Replace built-in curl with native D.  Simplify text (ascii, utf, uni) libraries.	Yes	4												Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)						Poor compiler error messages													Attribute bloat							Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects								Too much low-level focus (C/C++)							growing, immature, fun	A forum talking about new programming languages.  I don't remember which one.	I hadn't learned a new language in a while, and the templating features looked really interesting without being as heavy as C++	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance		Readable syntax	UFCS		Closeness to C/C++		Templates		Built-in unittests									Multi-paradigm							Compile-time format string checking									DMD support for AVX2					New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		Low level, rational, fast	Shared.  It makes working with multiple threads painful or impossible.  I've abandoned multiple projects at inception for that alone.	Yes, just tell me how	Really, really need a std.eventloop so I don't need to manually manage threads and pools between libraries in different ways.	Spaces	2018-03-01 09:43:20	2018-03-01 10:46:41	702b3f3612
0c747644dee3bcd7a406851afeb079e8	Yes	4														Learned before the above was there. So mostly forums and specs.	4		3		0	3			0			1	Mostly great content		4	D Forum							4	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications											Official Windows .exe installer			Official .deb packages	Official OSX dmg installer	Official dlang.org/install.sh script											2.078.3 (latest)													DMD	Linux	macOS	Windows		Android	iOS	WebAssembly	Embedded		dmd	rdmd	dub						No	Visual Studio + VisualD		4	1	3			4	CTFE/template debugger	It's ok	Homonym template magic is cool, but weird syntax.	tuples	string interpolation		named arguments	assert diagnostics										Async/await. Decorators to enable compile time changing/wrapping existing code. Macros.	No	4		Yes	2	3	2						Reliance on the GC	Fear to do breaking changes	Missing support for basic stuff like serialization, runtime reflektion, better static reflection or basic http server etc.		@nogc	DIP1000		More -betterC support		Common event loop and async/await/futures. Add reactive versions of all range functions (ie. push instead of pull).		std.eventloop	@nogc containers	better json serialization		std.graph	std.database		std.benchmark		std.color	std.image	std.drawing (2D)	std.net.httpserver - std.d.compiler - std.reactive/rx/observable	traits/reflection related APIs. JSON. 																																														Make it much easier to get to a std.experimental.X module. Even just as a development arena starting without docs/tests just to get stuff introduced/reviewed and API feedback early on. Then be harsher wrt. throwing things out from std.experimental.X again if it seems dead/failing or maintainer loosing interest.	Yes	4	There was a significant delay in response to the Pull Request. I have a feeling that this has improved recently though.											Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)		Phobos not moving fast enough.	Nothing								Poor debugging		DLL support on Windows		D's dependence on a large and bulky runtime				Attribute bloat				Ugly bits of the standard library				Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs			Roadmap missing for 2018. Need a vision for Phobos and a list of "pre-approved" modules to be added or "pre-approved" refactorings on existing modules. Volunteering your resources you really want to be somewhat confident that there is a good chance your work will be accepted.	Missing the confidence (and man power?) of having a big cooporate backer behind it.	Multi-paradigm, system level, flexible.	I think it was an article by Walter back in the D1 days.	Read a feature short doc for D on the digital mars site. And using C++ in my day job it there was some very attractive things in D compared. So basically to work with an as powerfull language and become better - then just hope/work-for that D would become popular enough that it could replace C++.	std.algorithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system																opt-in GC and runtime	DMD as a DUB library	Templated vector operations		-betterC		New range functionality (substitute, slide)	toString with output ranges		Back referencing of mangled symbols	Reproducible builds															Community, progress on nogc/betterC, powerfull meta programming support	"shared" not being a fully baked thing yet.	Yes, I'm already doing so	Thanks for taking feedback! It also has the side effect of getting you to think of what actually matters for you and maybe what you could contribute with to get there. Keep up the good work.	Spaces	2018-03-01 09:00:47	2018-03-01 10:20:02	521cb7715b
982cc3e718589e049ad2513ffd104dbd	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification										5		5		0	5	5		0			1	Mostly great content		5						I don't need help			I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily						Game Development								Official tarballs																	2.076.1 (static foreach)											LDC	Linux		Windows				WebAssembly					dub						No		Programmer's Notepad	5	0				5		It's awesome - keep it as is																				Yes	3	6	6					Old modules like std.outbuffer or std.socket	Reliance on the GC												@nogc containers		better xml serialization																			std.csv			std.digest											std.meta	std.outbuffer						std.signals																	No, but to other D repositories			Finding good issues to get started														Dependence of some language features + Phobos (Standard Library) on the GC					Nothing									dub											Ugly bits of the standard library						Few showcases / flagship projects							Nothing.								Beautiful, expressive, rich	Wikipedia article	It seemed a modern C++ replacement for me	dlib	Ranges & std.algorithm		CTFE (static if, static foreach)						UFCS				Templates											Multi-paradigm			static foreach					-betterC																					Promoting the language with my projects		Maybe, I miss accountability at the moment		Spaces	2018-03-01 09:20:55	2018-03-01 10:04:46	f6f07c06a2
a292f74bbb81abfecd3ee7b868dadd78	Yes	5				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli						dlangui	4	how to make GUI	5		4	4	3	gui libraries	1	3	nothing about how to make gui app	1	Always great content		5	D Forum							5	No, improve DFeed.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily		Desktop applications											Official Windows .exe installer			Official .deb packages														2.077.1 (latest LDC)												DMD	Linux	macOS	Windows		Android	iOS						dub						Yes, I work with D part time	DlangIDE		4	0			go to github, bugzilla is compliacated	5		It's awesome - keep it as is																				Yes	5	5	5	Nothing - Phobos (Standard Library) is great											Performance								better xml serialization										xml		std.bigint	std.bitmanip		std.complex						std.demangle				stdx.allocator		stdx.logger	std.functional				std.mathspecial	std.meta	std.outbuffer																						more crypto like bluefish, RSA	No, but to other D repositories				Time is my only enemy								Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							stronger emphasis on GUI Apps	object pascal killer	Accidentally I found DlangUI.	Need something like pascal without circular reference	DlangUI								Readable syntax				Simple, but powerful module system		Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters						import("myfile")		Multi-paradigm		nice string encodings																		Deprecation of the comma operator							newCTFE		nice reading syntax	readability and fast compilations	Maybe, I miss accountability at the moment	I think D can take Delphi place on market . Just more work for UI is needed.	Spaces	2018-03-01 09:00:20	2018-03-01 09:31:41	179a344f43
e2acff813702a1d18294b9a31fa623c0	Yes	4					Language specification		D Forum: Learn				"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			3	Missing well-commented examples and projects to learn from. Not only examples per language feature.	3	Missing design-decisions, context when to use, idioms, implementation background from which I could learn for my own code.	0	4	4	searching: it opens way too many windows. Instant, in-site search would be better. 	0			1	Always great content		5							digitalmars newsserver	5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely		Desktop applications					Big Data		Machine Learning		Science/Research		Official Windows .exe installer				Official OSX dmg installer											2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd	rdmd	dub						Yes, I work with D part time	Visual Studio + VisualD		5	0			I'm not knowledgeable enough to identify it as an issue nor to bring it down to a small reproducable case.	4	Better error messages WRT template problems.	It's ok	It's ancestor is C... but that's a big plus, so it's OK.	tuples		in-place struct initialization	named arguments							writing files at compile-time				convinient DSL support - where I don't have to use strings but a just a block of code that's handled by a parser.	Yes, but only for experimenting/testing/debugging	5	Hard to read, get into it.	Yes	1	4	4					Old modules like std.outbuffer or std.socket							Performance	More -betterC support				std.eventloop		better json serialization		std.graph		std.i18n		std.decimal																std.demangle	std.digest											std.meta	std.outbuffer													std.uni	std.uri			std.variant					Constant refactoring to keep pace with the language.	No, and I don't plan to				Time is my only enemy				High barrier to entry					Language complexity (e.g. inout, abuse of mixin)			Non-perfect C++ integration						Nothing										DLL support on Windows		D's dependence on a large and bulky runtime		Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects			Lack of good examples / tutorials				Nothing.							There is so much in D but the world needs to know about it...	smarter better (faster)	Can't remember, too long ago.	It's the logical step for a C/C++ user.	phobos	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits		Native interoperability with C		UFCS	-betterC	Closeness to C/C++		Templates		Built-in unittests			Garbage collection	Inline assembler	Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC								DMD support for AVX2	Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org					vibe.d 0.8				newCTFE		The natural evolution from C into modern times.		Yes, but only for a specific project	Keep up the good work, it's a long haul 	Spaces	2018-03-01 08:47:11	2018-03-01 09:23:33	6badba79c3
a56be780f3861484aeade6e20342453b	Yes	4					Language specification									Inspecting the compiler source code	3	Inconsistency between compiler and spec. Toolchain barely usable	4	Empty pages (eg std.digest.digest)	0	5	4		0			1	Mostly great content		5						I don't need help			I don't care.		Yes, it was a regression.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily							Big Data									Official .deb packages			d-apt Debian/Ubuntu							I compiled D from source											2.070.2 (alias as a function literal)			D1		DMD	Linux		Windows								rdmd		make					Yes, I work with D full time	Sublime		4	1	3			2	More focus on stability, less focus on implementing new poorly-thought out features (shared, scope,  const)	It needs serious work	As time goes on, it gets more and more ugly and cluttered. 															The exact opposite. The problem is too many features, not too few.	No	2	It is far too vague.  Many of D's worst mistakes are because the spec wasn't precise enough, so that compiler bugs were treated as language features	Yes, but only for some projects	0	1	2		Auto-decoding for strings			Old modules like std.outbuffer or std.socket		Fear to do breaking changes	Horrifically slow compile times				Performance			Improved compilation time, reduced executable size																std.base64			std.compiler					std.csv			std.digest			stdx.allocator	stdx.checkedint	stdx.logger	std.functional		std.json										std.signals	std.socket	std.stdint					std.uni	std.uri		std.uuid	std.variant		std.xml	std.zlib	std.zip	* Remove the interdependencies, so that it's possible to use a couple of functions from a module without importing the rest of Phobos. * Move as much as possible out of Phobos and into third-party libraries. If there's any doubt about which design is the best, it shouldn't be in the standard library. (I think the way C++ has std and boost, is vastly superior)	Yes	4	Andrei Alexandrescu had way too much influence in areas outside his core competency, too many bad decisions made for religious/philosphical reasons relying on the "sufficently powerful compiler" fallacy and appeal to authority											Language complexity (e.g. inout, abuse of mixin)														A plethora of bad language decisions in the past few years							D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat	Virtual by default					Nothing																Wrong decisions at the management level		The biggest problems are (a) Walter's inability to say no to Andrei (b)  fear of breaking existing code (as an argument for not fixing obviously broken things) yet a willingness to break existing code for the sake of sexy new features that don't actually work	A better C++	Digitalmars website	There were appealing features in the spec. 		Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax			Closeness to C/C++		Templates		Built-in unittests				Inline assembler					Multi-paradigm	Functional programming paradigm	CTFE but NOT static foreach		opt-in GC and runtime												DMD support for AVX2				Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)						newCTFE	I think most of the language and runtime things on the list above are DISASTERS and should be rolled back		The zoo of type qualifiers			Spaces	2018-03-01 07:53:53	2018-03-01 09:16:23	7f6f562515
95889481c663e0a7a6228c06a93670f5	Yes	4					Language specification	#d IRC on freenode									4		4		0	4			0			0			5		#d on IRC			My colleagues			4	I don't care.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily												Backend		Official tarballs										Docker					2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows									dub						Yes, I work with D full time		kwrite	4	1	2	My reported crash bugs not being fixed. ;)		3	Faster templates, less memory use	It's awesome, but I miss a few features					named arguments								UFCS for local symbols				No	4		Yes	2	5	5								alias get this in Nullable							less magic					better xml serialization												std.bigint	std.bitmanip	std.compiler	std.complex		std.container								stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer						std.signals		std.stdint		std.system								std.windows				less template bloat, less template bloat, less template bloat	Yes	3	People lost interest																Performance problems	Issues with language feature X (e.g. shared, @property)					Compiler regressions			Compiler bugs, unimplemented but advertised features, Poor template performance								dmd memory use						C behavior without warning (e.g. signed to unsigned comparisons)			Nothing																	Lack of going back and fixing features at the management level (*cough* contracts and interfaces *cough*)	The language is much bigger than it can support.	fun but trying	google	obviously better than c++		Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests			Garbage collection		Contracts				Multi-paradigm	Functional programming paradigm																Automatic compilation of imports (dmd -i)										newCTFE		It's less terrible than the alternatives.	15984. It's embarassing.		D is great, but its problems are self-inflicted.	Spaces	2018-03-01 08:45:05	2018-03-01 09:14:38	144f71dfdb
b900b60fb4cbee2bf57ca23fc761e3cd	Yes	3			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org			D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms		5	is expressions, ranges, lazyness, ecosystem	4	idioms. examples to contrieved. 	0	3	3	not always easy to find related info e.g. wiki, formum posts gh repos etc	1	4	more elaborated real-world examples besides simple (contrieved) examples	1	Mostly great content	would like to see more diverse authors using D from different perspectives	5	D Forum							4	No, the D.Learn forum is fine.	guru in shouting distance please	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications	IoT	DevOps			Big Data							Official tarballs												I compiled D from source			2.078.3 (latest)													DMD	Linux		Windows	BSD-variant	Android	iOS				dmd		dub						Yes, I work with D part time	Visual Studio + VisualD		3	0			Was allready reported	4	better error msg, suggest attributes and const / immutable	It's awesome, but I miss a few features	not as clean as possible, attributes...	tuples															No	3		Yes	3	4	4								Some idioms are named different, name aliases as 'sounds as' would help			DIP1000			More/better container classes			std.eventloop				std.graph	std.database		std.benchmark	std.decimal							std.bigint			std.complex															std.json	std.math	std.mathspecial																					std.xml			Better and more examples combining the features	No, but to other D repositories				Time is my only enemy											Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing							Non-enterprise IDE support	Poor debugging		DLL support on Windows						Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages													Lack of focus at the management level		e.g. wrong defaults, or compiler suggesting pure/const/nothrow/.. where possible	Communication! Some discisions due to strong negative voices of only a few underinformed! 	Amazing Powerfull Versatile	From Walter back somewhere end 199x	Deep gratitude and respect for Walter due to c/c++ compilers and support. And the sheer jump of joy when another deeply rescpected creative original one in person of Andrei joined! The cooperation of those two is alway going to give something fresh, thrilling, fast, mind boggling, stunning beauty.	std.algorithm dlang-requests asdf	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection			Debug attribute		std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking						Back referencing of mangled symbols	Reproducible builds			Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org								Cross-compilation with LDC			Safe defaults, best  string impl, expresiveness.	ice, garbled debugging info, incomprehensible error msg		Deep gratitude of all those who invest / invested lots of time and effort to bring us D. 	Spaces	2018-02-28 16:23:10	2018-03-01 09:12:45	6e5230c89c
1cffa6c1c862590317cd3f64b18d73ef	Yes	5					Language specification			"Programming in D" by Ali Çehreli					d-idioms		5	type qualifiers	5		0	4	5		0			1	Mostly great content		4						I don't need help		4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development													d-apt Debian/Ubuntu										2.078.3 (latest)													LDC	Linux									dmd	rdmd	dub						No		Geany	4	0				5		It's awesome, but I miss a few features		tuples	string interpolation														Yes, but only for experimenting/testing/debugging	4	traits, symbols	Yes	5	5	5		Auto-decoding for strings									DIP1000	Performance	More -betterC support								std.graph	std.database	std.i18n																				std.encoding											std.outbuffer						std.signals		std.stdint										std.windows				lock-free algorithms and data structures	No, but to other D repositories				Time is my only enemy															Issues with language feature X (e.g. shared, @property)			Nothing						Nothing										Attribute bloat									Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials							Lack of progress on DIPs				GUI, 3d graphics	familiar, convenient, expressive	wikipedia	to replace C++	vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C	Readable syntax	UFCS				Templates		Built-in unittests						Debug attribute						static foreach															Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)					Cross-compilation with LDC	newCTFE		competition	shared	Maybe, I miss accountability at the moment		Tabs	2018-03-01 07:33:55	2018-03-01 09:06:23	61b101628f
d090314987e3961e1bee55ef8783623f	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification										3	Lack of simple tutorials online. They are more my style.	4	Simple examples	2	4	4	Access to the documentation should be front and center	0			1	Mostly great content	N/A	4	D Forum							3	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely		Desktop applications											Official Windows .exe installer															2.079.0 (nightly)														DMD	Linux		Windows							dmd								No	Visual Studio Code		3	0			Not knowing enough	3	Simpler integration with Visual Studio	It's awesome - keep it as is																				Yes	3	4	4						Reliance on the GC				@nogc		Performance							better json serialization			std.database								N/A		std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container				std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt			std.mathspecial	std.meta	std.outbuffer	std.parallelism	std.path				std.signals	std.socket	std.stdint			std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant			std.zlib	std.zip	GC reliance	No, but I want to to					Personal laziness																Lack of adoption					Poor GC implementation / performance			Non-enterprise IDE support			DLL support on Windows				Nothing												Few showcases / flagship projects											Lack of focus at the management level			Small community and little support from enterprise	Hope it grows	A colleague	It seemed like a way better alternative to C/C++	Nothing really	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax			Closeness to C/C++													Multi-paradigm				opt-in GC and runtime				-betterC										Runnable examples on dlang.org											I really like its syntax, performance and general library	N/A	Maybe, I'm still a student	Keep up the good work, but remember to promote it as well, it matters	Tabs	2018-03-01 08:32:51	2018-03-01 08:54:20	5ef38f888f
d613de1a16b83ab25ea294fcd555b19d	Yes	4			"The D Programming Language" by Andrei Alexandrescu												5		4		0	4	3		0			1	Mostly great content		1	D Forum				My colleagues			5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily									Machine Learning		Science/Research	Realtime Server Application							d-apt Debian/Ubuntu	Arch Linux																				D1		LDC	Linux										rdmd	dub	make					Yes, I work with D full time		Kate	3	1	2	bad management and schedule		4	Less syntax and gramar exception; implementation of high level language concepts through well defined low level concepts	It's awesome, but I miss a few features	Non-uniformity with compiler attribute syntax												UFCS for local symbols			Remove ad hoc solution and syntax like `inout`	No	4	BN-grammar could be outdated	Yes, but only for some projects	3	4	5		Auto-decoding for strings				Reliance on the GC	Fear to do breaking changes		@safe for all modules									@nogc containers	better json serialization							std.color	std.image			core.simd; std.math and relative too depend on very specific `real` type			std.bitmanip	std.compiler		std.concurrency	std.container		std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger							std.outbuffer	std.parallelism	std.path	std.process			std.signals	std.socket			std.system			std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	Modern concepts in one modules with outdated concepts in other modules	No, but I want to to				Time is my only enemy		No roadmap	D community														Non-consitency; lack of holistic language vision			Compiler regressions										D's dependence on a large and bulky runtime				Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language											Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Not proper to current scale of comunity mangement; lack of modern development culture of some key developers (like proper git messages); evaporating of some key developers from the community	Universal, promising, almost hopeless	wikipedia (but didn't look further at this time); some articles (more less introductory) about language in some Russian IT-portal	It was implemented many of my desire how to change C++	phobos	Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax	UFCS		Closeness to C/C++		Templates		Built-in unittests	In, out, ref parameters								Multi-paradigm	Functional programming paradigm																			Deprecation of the comma operator		New third-party applications (e.g. Tilix)				Cross-compilation with LDC			Multi-paradigm and  OTOH very  practical approach what makes D universal tool	increasing inner non-consitency	Maybe, I miss accountability at the moment	I hope community and especially community leaders could rework they approach to more consistent, industrial, welcomed and organized, and with this save future of D.	Meh, I don't care.	2018-03-01 08:07:16	2018-03-01 08:52:48	7f6f562515
ace88121bd8558248088672847846e20	Yes	5				tour.dlang.org				"Programming in D" by Ali Çehreli							5	no hurdles	3	not enough examples formatting is not the greatest still pretty decent documentation	0	5	5	it is ok	1	5	needs more complex examples (advanced features are not promoted enough)	1	Always great content	promote advanced and newly added features more	0						I don't need help		3	No, the D.Learn forum is fine.	no	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily							Big Data		Machine Learning		Science/Research			Official tarballs															2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows	BSD-variant								dub			meson			Yes, I work with D full time	Visual Studio Code		1	0			the way previous issues were handled seems keeping your fingers crossed and hoping for the best is the optimal strategy at the moment	3	perfection? :P	It's awesome - keep it as is																				Yes	3	3	3				Poor naming choices					@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers			std.graph	std.database			std.decimal					none																																															No, and I don't plan to								High barrier to entry						Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)										Non-enterprise IDE support		dub					Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages												Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level			not ready for prime time		performance hope for modern c/c++ replacement		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates					Garbage collection	Inline assembler					Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime																									modern c/c++ replacement		No, I don't like the management of the DLF		Spaces	2018-03-01 07:43:00	2018-03-01 08:48:46	8db314230b
66ec9b5472f49dfd2c7f7d899eb4e39d	Yes	5					Language specification			"Programming in D" by Ali Çehreli			"D Web Development" by Kai Nacke				4	I encountered a lack of resources on converting to D, given proficiency in other languages. The resources on conversion I could find on the D language website and wiki were insufficient. I had to contend with D textbooks that assumed no prior knowledge of programming, which caused me some inefficiency. 	5	I like the concise examples and explanations, as well as the completion and location of the documentation. By using self documenting code in Phobos, all the information I need is easily available, with out having to refer to a 3lb book (I'm looking at you, C++...)	0	4	3	I mildly dislike that dlang.org is orientated towards promoting the language to potential new users, with the main technical documentation not immediately available from the main dlang.org domain. I accept this is probably necessary considering the small condition of the D community.	1	3	I dislike the length & number of pages in the tour, considering their short length. I feel slightly overwhelm by the features discussed in the tour because of the tour's length. The number of features discussed in the tour is a credit to D, but perhaps they should be presented more concisely.	1	Mostly great content	The lack of regular and varied content.	5	D Forum							5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications						Embedded Systems			Science/Research		Official Windows .exe installer		Official .rpm packages														2.078.3 (latest)													DMD	Linux		Windows					Embedded		dmd		dub						Yes, I work with D full time	Visual Studio Code		2	0				5		It's awesome - keep it as is																				Yes	3	4	5				Poor naming choices		Reliance on the GC			@safe for all modules	@nogc			More -betterC support				std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database					std.image	std.drawing (2D)			std.base64	std.bigint	std.bitmanip	std.compiler	std.complex		std.container		std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial	std.meta	std.outbuffer								std.stdint		std.system										std.zlib	std.zip	I'd like to see everything @safe and @nogc, everything coming @safe and @nogc, and higher level modules (see part g)	No, but I want to to			Finding good issues to get started	Time is my only enemy											Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing							Non-enterprise IDE support			DLL support on Windows		D's dependence on a large and bulky runtime											Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists						Few transition guides from programming language Y		Nothing.								C++, but working.	Wikipedia	Because C++ is horrible. 	Dlib		Mixin				Performance	Native interoperability with C		UFCS	-betterC	Closeness to C/C++			Built-in documentation (Ddoc)	Built-in unittests				Inline assembler	Contracts				Multi-paradigm				opt-in GC and runtime				-betterC																					Compiled, high performance, object orientated code that isn't as horrible broken as C++.		Yes, but only for a specific project		Meh, I don't care.	2018-03-01 07:47:50	2018-03-01 08:30:18	0a4a8b9e5d
26051f01bdf5480fb426d82818f6bcd3	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe	d-idioms		4	Not enough tutorials for advanced features.	3	More examples!	3	3	3	It's to busy. Example code should be center stage. There isn't even a link to the blog 	0			1	Mostly great content		3	D Forum							4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily		Desktop applications														Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows									dub						No	Visual Studio Code		4	0				4	Better error messages.	It's awesome, but I miss a few features	There are so many keywords for functions etc. @safe, pure, nothrow @trusted etc.	tuples	string interpolation		named arguments		language binding to X	multiple alias this									No	3		Yes	2	4	2				Poor naming choices		Reliance on the GC	Fear to do breaking changes		@safe for all modules					More/better container classes				@nogc containers	better json serialization											std.algorithm	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger							std.outbuffer						std.signals	std.socket	std.stdint											std.xml				No, but to other D repositories								High barrier to entry				Nothing											Poor Phobos (Standard Library) documentation		Poor compiler error messages				Non-enterprise IDE support	Poor debugging								Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language						Lack of good examples / tutorials					Too much low-level focus (C/C++)		Lack of progress on DIPs		Wrong decisions at the management level			Easy, fun, hard	Don't remember	Andrei's book	requests	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests						Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm										New range functionality (substitute, slide)											New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)		Colorized error messages						-betterC	No, I don't like the management of the DLF		Tabs	2018-03-01 04:18:25	2018-03-01 08:15:49	9a54ad257d
f975b11193ce00a1d654277b07456b15	No, I have stopped using D		I used to use D with GtkD. GtkD is fine, but Gtk+3 was not good compared to Qt.				Language specification			"Programming in D" by Ali Çehreli							4				0	5	5		0			0															Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications													Official .rpm packages	Official .deb packages		Official dlang.org/install.sh script																									Linux						WebAssembly					dub						No	Visual Studio Code		4	0																																																																																																																																																																																																																																						2018-03-01 07:54:50	2018-03-01 08:14:41	7370082058
1c6e4492f36f7a026b7a473585a6ea5f	Yes	5					Language specification			"Programming in D" by Ali Çehreli					d-idioms		5	I actually don't remember, it was somewhere around 2010.	5		2	5	5		1	5		1	Mostly great content		4	D Forum							5	Yes, I like StackOverflow.	I actually believe that both options are good. However, more questions on StackOverflow bump the language stats and may help it to get more traction.  So it's not about the quality of the option, but more about what D can gain by that. In terms of quality, the forum's advantage is a chronological list of threads.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications										Smart-city				Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows		Android				Ubuntu Touch	dmd	rdmd	dub						Yes, I work with D full time	Intellij		3	1	4			5		It's awesome, but I miss a few features	I dream of Scala-like pattern matching. Built-in tuples are also cool.  I'm sad that built-in associative array are planned to be removed in favour of a library solution. I definitely prefer value[key] myArray; over AA!(key, value) myArray. It is just simpler and I don't think there is a reasonable reason to sacrifice this.	tuples						multiple alias this			static break	writing files at compile-time	UFCS for local symbols			Scala-like pattern matching	No	5		Yes	3	6	5						Reliance on the GC			@safe for all modules	@nogc					D-way written getopt							std.database	std.i18n						std.logger out of experimental								std.container															std.mathspecial		std.outbuffer						std.signals	std.socket	std.stdint		std.system												1. getopt is written in C way - I think it should be rewritten to actually look like D. 2. I really miss @safe write/writeln.	No, and I don't plan to				Time is my only enemy	Personal laziness							Nothing										Nothing							Non-enterprise IDE support							Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages									Nothing.							IDE support. I believe that IntelliJ and Eclipse plugin develompent should be organized and supported by the core community team. These tools really need to be developed more quickly and comprehensively - not only by the single enthusiast.	Best of C and Java + many modern features.	~2009/2010	Actually not sure. Probably out of curiosity of the "new C/C++", as I thought of D when I heard of it.	vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits			Readable syntax	UFCS						Built-in unittests		@safe strings + arrays			Contracts				Multi-paradigm	Functional programming paradigm		static foreach							New range functionality (substitute, slide)													vibe.d 0.8				newCTFE		D allows me to create a good code. With the functional programming it is also fun and challenging to use. (challenging in a good way - you need to think your way out with range algorithms. It is often a good riddle and I'm satisfied seing the nicely cooked code that does big thins with just a few LoC).			1. Please don't remove associative array syntax from the language. It is really handy and I don't see a valid reason to replace it with the library template. It will never look as good. 2. More focus is needed on the IDE plugins. Eclipse plugin is unmaintained now and IntelliJ plugin is developed slowly. As D is very demanding language to create a good IDE for, the organized focus on the IDE plugins and more love for them is absolutely vital.	Tabs	2018-03-01 07:26:50	2018-03-01 08:14:30	ea50eb4648
4ded0efc40b825ae410f9a790950c2d5	No, I have never used D			Missing tools (like 'visual assist'), insufficient docs	"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			2	imperfect doc	2	layout (enums taken too much space, important things not  on important places), to less written from a users view 	0	3	4	a little bit amateurish	0			1	Mostly great content		3	D Forum							5	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications									Science/Research		Official Windows .exe installer																										2.068.2 (last C++ release)			DMD		macOS	Windows		Android	iOS				dmd								No	Visual Studio + VisualD		2	0				3		I have a very hard time with D's syntax	currently falling in love with nim instead of D:  no brackets, no semicolons, indentation...  simply better readable and writeable																No	4		No	3	3	3																				better xml serialization																																																									No, and I don't plan to									I don't use D				Language complexity (e.g. inout, abuse of mixin)										Poor Phobos (Standard Library) documentation							Poor debugging																		Few showcases / flagship projects			Lack of good examples / tutorials				Nothing.								Fresh C++ Alternative	digital mars, long ago			Ranges & std.algorithm					Performance							Templates		Built-in unittests																																						get rid of c++				Meh, I don't care.	2018-03-01 07:54:27	2018-03-01 08:14:29	57ae39edee
cb25d6fc494ef6c958bf682ff146822f	No, I have stopped using D		Dependencies I needed for my D project are broken. The language evolves quicker than library developers can keep up with. I spent more time doing pull requests for other people's projects than my own. The language should be stable. More focus on the ecosystem would be better				Language specification			"Programming in D" by Ali Çehreli			"D Web Development" by Kai Nacke				3	Working examples for using various libraries	3		3	2	3		0			0			2							I Google what I need	3	Yes, I like StackOverflow.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development	Desktop applications													Official .rpm packages						Homebrew								2.078.3 (latest)													LDC	Linux	macOS	Windows									dub						No	Visual Studio Code		4	0				3	Nicer error messages	It's awesome - keep it as is																				Yes	3	3	3	Nothing - Phobos (Standard Library) is great														Stability				better json serialization	better xml serialization		std.database	std.i18n			std.color	std.image						std.bitmanip								std.demangle																																				No, but to other D repositories											N/a										Language evolves faster than developers can keep up. 3rd party libraries are regularly broken						As previously stated. The ecosystem is foobar		Non-enterprise IDE support	Poor debugging					Unreliable dependencies in dub repo.								I tried introducing D in work. Code that compiled on my machine wouldn't necessarily compile on other machines. D is not suitable for productivity in work.		Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages					Lack of good examples / tutorials			Using a dub dependency is risky. Most of them are maintained by a single person, who could walk away at any moment		Too much low-level focus (C/C++)	Frequent breaking changes					Ecosystem! Focus on that	Language is fine, everything around it is broken	Blog post	Wanted to write some code that was similar to Java but would compile to native binary	Vibe-d	Ranges & std.algorithm					Performance																			Functional programming paradigm																	Runnable examples on dlang.org				New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages						Some compiler releases have been broken	No, I'm already donating my free time	About 3 years ago I started a small project that would've taken a few weeks in Java. Sine then I've ended up working on D tooling and contributed to 5 other projects that mine depends on. My project still can't compile as I'm waiting (over 2 months) for someone to merge a PR that will fix a dependency that I require. Stop focusing on the language, get the ecosystem right	Spaces	2018-03-01 07:20:18	2018-03-01 08:09:04	a1f6916152
8254c4e9b87e6a667565e000c8cd9ed0	Yes	4								"Programming in D" by Ali Çehreli							4	different	4	it is so good	2	4	4	Library documentation is minimal. Library informationalists should be more	0			1	Huge variance in quality	this block should be more detailed	5	D Forum		#d on StackOverflow					5	No, the D.Learn forum is fine.		Yes, it was hard to find out why.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly		Desktop applications											Official Windows .exe installer																2.078.3 (latest)													DMD			Windows							dmd								No	Visual Studio + VisualD		1	0				5		It's ok	it is very good						language binding to X										Yes, but only for experimenting/testing/debugging	4	I do not see much trouble	Yes	6	3	4					Old modules like std.outbuffer or std.socket								More -betterC support									std.database								arrays																																		std.system												nothing	No, but I want to to										I am just starting to learn D				Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing							Non-enterprise IDE support																Fewer third-party libraries than other language										Nothing.							yes library support and library documentation are very few. It is also very inadequate for windows users. Almost in the case where the D language is oriented towards Linux users	simple, fun and a very high level of iQ	http://ddili.org	i like it	GtkD						Performance		Readable syntax			Closeness to C/C++	Simple, but powerful module system												Multi-paradigm										New range functionality (substitute, slide)	toString with output ranges								docarchives.dlang.io				vibe.d 0.8		DCompute				very simple	simple module addition	Yes, but only for a specific project		Spaces	2018-03-01 06:50:14	2018-03-01 08:05:35	85ec7f4492
7a7b3100602fe25d5427a1772cbf8bbb	Yes	4			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							5	Getting a decent IDE up and running	4	More high-level module introduction information	0	5	5		0			1	Always great content		4	D Forum		#d on StackOverflow					5	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development						Big Data				Science/Research		Official Windows .exe installer																	2.077.1 (latest LDC)												LDC	Linux		Windows	BSD-variant	Android	iOS						dub						Yes, I work with D part time	Intellij		3	0				4	More sane memory usage for large projects	It's awesome, but I miss a few features					named arguments												Yes, but only for experimenting/testing/debugging	5		Yes	1	5	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000	Performance		More/better container classes				@nogc containers	better json serialization	better xml serialization		std.database	std.i18n		std.decimal																									std.json											std.socket												std.xml				No, but to other D repositories								High barrier to entry			Impression that PRs are often not merged or it takes ages				Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC								Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support								Auto-decoding of strings									Less corporate support (including jobs) than other languages		Few showcases / flagship projects	Little info on StackOverflow									Lack of progress on DIPs	Lack of focus at the management level			Tooling support is not on par with other popular languages	multi paradigm excellence		Concise syntax, great abstractions	vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C		UFCS				Templates		Built-in unittests					Contracts				Multi-paradigm			static foreach								toString with output ranges		Back referencing of mangled symbols	Reproducible builds							New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8			Cross-compilation with LDC	newCTFE		Get things done faster, easer & safer		Maybe, I miss accountability at the moment	Improve tooling support to convince my Java-IDE-loving colleagues to consider D instead	Meh, I don't care.	2018-03-01 07:23:34	2018-03-01 07:43:35	3ae072f1b4
89646fae07404caf835e27859c5a3d1e	Yes	4					Language specification										5	The language was still early in development and there wasn't much of a standard library. (At the time. Pre-v1).	4	DDOX would be an improvement: Separate pages for each symbol/function. A summary page for each struct/class. Plus DDOX's in-page JS-based search feature.					0			1	Mostly great content	Nothing	5	D Forum							5	I don't care.	Telepathy. It'd be more convenient. And cooler.  Well, as long as nobody uses it to hack my ghost.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications				Game Development																					DVM														Whatever just happens to be on my CLI at the given moment. I do a lot of work on libs, so I try to ensure things work on a wide range of versions anyway.	DMD	Linux		Windows		Android		WebAssembly	Embedded		dmd	rdmd	dub						Yes, I work with D part time		KDevelop. Not trilled with it, but Ilike it better than most. My favorite by far is Programmer's Notepad 2, but it's Windows-only and has issues under Wine.	5	1	4	Needs actual username login. I can never remember the bogus email address I use to sign in.		5		It's awesome, but I miss a few features	- Need syntax like C#'s coroutines or C's protothreads for defining input ranges. The std.concurrency.Generator is insufficient because, unlike the C# and C solutions, it introduces the overhead of fiber-based context switching. This renders it unsuitable for many purposes, such as parsers (which would greatly benefit from being written in a coroutine-like style). This is impossible to implement in D without language support.  - Needs first-class types. The current state is terribly non-orthogonal and messy.  - Syntax/support for basic ML-family style algebraics and type-based pattern matching, while technically there, is not very good at all.		string interpolation		named arguments	assert diagnostics											No	5	Nothing.	Yes	3	6	5		Auto-decoding for strings					Fear to do breaking changes		@safe for all modules	@nogc					Stop letting "perfect" be the enemy of progress.	I'm happy as is.													I don't care what's stdlib vs third-party lib, as long as there's a good package manager that, unlike dub, is fully separated from project building.			std.bigint	std.bitmanip		std.complex				std.csv		std.demangle		std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional		std.json	std.math	std.mathspecial	std.meta		std.parallelism					std.signals		std.stdint						std.uri		std.uuid		std.windows	std.xml	std.zlib	std.zip	- Stop letting "perfect" be the enemy of progress.  Minor things:  - Rename AliasSeq. Yes. Again.  - Merge std.uni and std.utf into one module. The division makes no sense to me: "Unicode vs UTF? Isn't that the same freaking thing?", and I never know which is the one I need.  - Replace the nasty mixin stuff from std.bitmanip with actual language support if there's really no better way to do that stuff in-library.	Yes	1	I'd say "The whole process was an uphill battle", but that's a huge understatement. Endless "perfect is the enemy of good".  Endless pushback and arguing on whether things should even be done at all (especially from MartinNowak - nothing personal, and no offense, but that one alone doubles the amount of arguing that needs done to get anywhere, will object to seemingly anything, and frequently just leads the debate in circles). And long periods with no response.												Missing language feature X / not moving fast enough								Nothing									dub		Missing support for platform X											Nothing														Lack of progress on DIPs		Wrong decisions at the management level		Line numbers in Linux stack traces stopped working (PIC-related?). The secret Phobos (Druntime?) function to enable stack traces for Linux segfaults shouldn't be so secret (I've wasted SO much time because I didn't know it was there). PC-police on the newsgroup (ie Walter). And in general, meritocracy often feels like it has no place in D's development or management. Also, passing non-forward ranges by value should be statically forbidden as it's semantically non-sensical. Also, the face that DDOC is purely macro-based, has zero semantic awareness, and leads to illegible doc comments.	Only. Worthwhile. Langauge.	The old digitalmars-hosted main website, and a set of slides that were posted describing the language and its highlights. (This was before v0.100.)	I was frustrated with existing languages and searched for one that combined the best aspects of C++ and Java. D fit the bill better than anything I expected to be able to find.	Vibe.d, unit-threaded, arsd-official:dom, and Phobos	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests									Multi-paradigm				opt-in GC and runtime							toString with output ranges						Automatic compilation of imports (dmd -i)			Deprecation of the comma operator							newCTFE		It's the only language I like.	No line numbers in Linux stack traces, and the Error class.		A few drinks!	Tabs	2018-03-01 05:05:48	2018-03-01 07:34:35	06b5c99312
1db553b5552babd6a5711648028ad8e2	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								2	templates	3	Examples	0	4	4		0			0			3	D Forum							4	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications																									Using repeatedly/denv		2.078.3 (latest)													DMD	Linux											dub						No	vim / neovim		4	1	2	Legacy web interface		4	Pattern matching definitely!	It's ok		tuples			named arguments			multiple alias this				writing files at compile-time	UFCS for local symbols				No	4		Yes	2	3	2					Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc	DIP1000		More -betterC support	More/better container classes				@nogc containers	better json serialization													std.bigint	std.bitmanip	std.compiler		std.concurrency			std.csv		std.demangle		std.encoding		stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer	std.parallelism					std.signals	std.socket	std.stdint		std.system			std.uni	std.uri	std.utf			std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to			Finding good issues to get started		Personal laziness			High barrier to entry						Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing						Nothing												Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language			Few showcases / flagship projects										Lack of progress on DIPs					Now it's legacy	A presentation on CTFE	It was really exciting to do something at compile time			Mixin	CTFE (static if, static foreach)						UFCS											Contracts		import("myfile")					static foreach		DMD as a DUB library		Compile-time format string checking					Deprecation of the integral promotion for unary operators												Colorized error messages			newCTFE		Its compile-time features	Huge memory consumption of CTFE	Maybe, I'm still a student		Spaces	2018-03-01 07:05:21	2018-03-01 07:34:34	154132fc41
0c925c6636152d3adac10e8b614a5656	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								5	Missing / incomplete / outdated documentation on dlang.org (or in the generated docs from source code), that necessitated reading the code directly.	4	Some modules are very well-documented and thorough, but other modules are lacking.  The quality varies a lot.  Some docs are quite useful, but for some modules, they are scanty, not sufficiently descriptive and/or missing important cases.  Some modules have thorough documentation, but in a long, rambling, hard-to-read form (e.g., std.format), which could use some refactoring so that important information is at the top or in a focused, dedicated page, instead of sprinkled piecemeal across multiple symbols that a newcomer would have trouble piecing together.  For symbols with exceptionally long docs, e.g., std.format.formattedWrite, some way of navigating / seeing an overview of the sections would help a lot in making it more accessible.	3	3	1	The latest front page of dlang.org is too busy, and too long. The important pages: download, documentation, forum, bug tracker, are all linked at the top, which is good. The code sample is nice. Everything else seems to be needless clutter. The slogan makes me cringe -- it says almost nothing about what D actually is. The commercial logos seem to be there only to justify D's existence to the naysayers. I don't even know what's on the second half of the page; pretty much never bothered to scroll down there. The news items, which is cut off on the first page in my browser, look too wordy and makes me not want to bother reading it.	0			1	Mostly great content	Only read a scant few articles, so hard to say in general. The articles I did read were mostly nice and informative. No idea about the others.	4	D Forum							4	No, the D.Learn forum is fine.	No. The forum has a nice mailing list interface that I can hook up to my local mail reader that handles threading nicely, which keeps the high volume manageable. Being forced to use a klunky inefficient web interface that requires constant network connectivity would be my definition of a nightmare.	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development					Game Development					Science/Research	Command-line utilities (shell script replacements, data processing tools, etc.)														I compiled D from source															Git master	DMD	Linux				Android					dmd						scons		No	vim / neovim		5	1	4	The fact that it takes forever for someone to respond to it, and that there's no one / no team dedicated to reviewing new issues / triaging.		4	At the very least an option for turning on sane memory management. Currently it's completely unusable on my low-memory system.	It's awesome - keep it as is																				Yes	1	4	5		Auto-decoding for strings			Old modules like std.outbuffer or std.socket		Fear to do breaking changes	Excessive template bloat and major compilation slowdowns in template-heavy code	@safe for all modules		DIP1000	Performance			Pay-as-you-go. If I don't use feature X (even if feature Y, that I do use, somehow depends on it), it should not even show up as a symbol in my executable.		std.eventloop				std.graph	std.database	std.i18n							Older modules that are heavy on classes and weak on range support. Or older, less-well-designed APIs, like std.net.curl.				std.compiler		std.concurrency			std.csv			std.digest			stdx.allocator	stdx.checkedint	stdx.logger	std.functional		std.json				std.outbuffer		std.path				std.signals	std.socket	std.stdint		std.system				std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	(1) Kill autodecoding with fire and extreme prejudice. (2) std.io. (3) `import std.format` does not add 1.5 seconds to compilation time.	Yes	4	Not enough qualified reviewers to move things along, too many PRs rotting in the queues with no end in sight.										Nothing										Nothing													Compiler too big of a memory hog, basically unusable on low-memory systems.						C behavior without warning (e.g. signed to unsigned comparisons)													dub is an all-or-nothing walled garden. Either you subscribe wholeheartedly to its philosophy, or you're left out in the cold. It's slow, difficult to configure, doesn't fit into the way I work, and requires constant network access.  It's a great package manager, but a rather poor build tool.							Lack of / too infrequent communications about what is currently being worked on, status updates, etc.. Even if it's a weekly/monthly update saying "we're stuck on project X because of issues Y and Z", that's better than the dead silence on what exactly is being worked on.	Management is too afraid of making breaking changes that improve the language, yet at the same time breakage inevitably happens anyway in the form of regressions and bugs. Why not just admit breakage is inevitable, and capitalize on that to improve the language in fundamental ways instead of adopting half-hearted solutions because of religious fear of breaking anonymous hypothetical code out there.	Powerful, clean, comfortable.	Old website.	Because I was sick of fighting with C++ and want to find something closer to my ideal of what a programming language ought to be.  TDPL made that sale.	None in particular stands out. But Adam Ruppe's arsd.terminal, arsd.sqlite, and std.range / std.algorithm are among my most frequent go-to libraries for everyday use.	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta		Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection		Contracts				Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library		Compile-time format string checking				toString with output ranges		Back referencing of mangled symbols							Deprecation of the comma operator							newCTFE		It's the only language I know so far that is this close to my ideal of what a programming language should be.  It's comfortable to write, almost like a scripting language, yet with the power of static typing and verifiability features like const, pure, etc. It lets you drop down to low-level code when performance matters, yet most of the time you can stay at the comfort of high-level constructs with minimal performance impact. It promises much better long-term maintainability for my personal projects than C/C++ have proven to be. It makes me more productive, and also more confident my code is actually correct (via built-in unittests).  It has also ruined my taste for every other language, and now I can't stand writing code in anything other than D!	The new int promotion rules.	No, I'm already donating my free time	No.	Spaces	2018-03-01 06:18:29	2018-03-01 07:33:10	8825e4925e
7c75b10df992b8b6c2f407162593caba	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										4	Insufficient documentation.	3	The documentation text provided is usually very scarce. The formatting is not too pleasant to look at. It is not always obvious where you are, and things are sometimes hard to find. The search function does not work too well.	0	4	3	The library documentation could be improved.	1	4	There is a too steep increase in difficulty.	1	Always great content		4						I don't need help		4	I don't care.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly											Science/Research		Official Windows .exe installer																2.078.3 (latest)													LDC			Windows							dmd								Yes, I work with D part time	Sublime		2	0			I never ran over an issue that was worth filing.	4	Better error messages.	It's awesome, but I miss a few features	The template parameter syntax is annoying.	tuples		in-place struct initialization	named arguments							writing files at compile-time					No	3	Much of the provided text is rather short, examples are minimal.	Yes	5	5	2		Auto-decoding for strings			Old modules like std.outbuffer or std.socket									More/better container classes							std.graph			std.benchmark	std.decimal		std.image	std.drawing (2D)			std.base64				std.complex						std.demangle	std.digest	std.encoding											std.outbuffer		std.path	std.process			std.signals				std.system			std.uni	std.uri		std.uuid		std.windows		std.zlib			No, and I don't plan to			Finding good issues to get started		Personal laziness			High barrier to entry						Missing language feature X / not moving fast enough								Nothing							Non-enterprise IDE support								Auto-decoding of strings	Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)										Lack of good examples / tutorials							Lack of progress on DIPs					My favorite language	At university.	I took a lecture on D.	Phobos.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)					Readable syntax	UFCS				Templates		Built-in unittests									Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime						New range functionality (substitute, slide)								Runnable examples on dlang.org									newCTFE		Its ease of use.	Wrong defaults.	No, I'm not interested into D		Spaces	2018-03-01 06:50:13	2018-03-01 07:32:05	1d5f21dc06
be08aa6fc82c8b0a5007faa44b1bd3e7	Yes	5			"The D Programming Language" by Andrei Alexandrescu												4	Learning to use the profiler to track down where the compiler was generating code that made lots of array temporaries.	3	I find the generic descriptions inscrutable, then I have to jump around to find examples of the particular items that I need.	5	4	4		0			1	Always great content		4					My colleagues	I don't need help		3	No, the D.Learn forum is fine.	no	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications					Big Data	Embedded Systems			Science/Research					Official .deb packages												2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux							Embedded					make					Yes, I work with D part time	emacs		4	1	4			5		It's awesome - keep it as is																				Yes	3	3	3	Nothing - Phobos (Standard Library) is great									@nogc							std.eventloop	@nogc containers										std.drawing (2D)			std.base64	std.bigint	std.bitmanip	std.compiler						std.datetime	std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional				std.mathspecial	std.meta	std.outbuffer										std.system	std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml				No, and I don't plan to											I use mercurial	Nothing										Nothing									dub					Nothing								Nothing											Nothing.								C++ done right.	Somewhere on the internet.	I had a large C++ code base and it was an opportunity to rework it.	Phobos, followed by MPI bindings.	Ranges & std.algorithm	Mixin					Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests			Garbage collection						Multi-paradigm																DMD support for AVX2						New third-party applications (e.g. Tilix)				Cross-compilation with LDC	newCTFE		It is so much nicer than C++.				Spaces	2018-03-01 06:29:37	2018-03-01 07:03:39	602c9a5efe
07405ee6bb9947c086c563c0840808bb	Yes	4					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli						Github projects	3	libraries, IDE and mssql	3		2	4	3		0			0			3							ddili.org 	4	Yes, I like StackOverflow.			Please don't ever break code.	Daily	Web development	Desktop applications														Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows		Android		WebAssembly					dub						Yes, I work with D part time	vim / neovim		3	0				4		I have a very hard time with D's syntax					named arguments	assert diagnostics											No	4		Yes	4	4	3							Fear to do breaking changes					Performance		More/better container classes					better json serialization	better xml serialization	std.graph	std.database					std.image											std.conv																																							No, but I want to to								High barrier to entry							Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)			Performance problems						Compiler regressions	Poor compiler error messages				Non-enterprise IDE support	Poor debugging																			Little info on StackOverflow		Lack of good examples / tutorials					Too much low-level focus (C/C++)									because I like it.							Performance						Simple, but powerful module system		Built-in documentation (Ddoc)	Built-in unittests									Multi-paradigm	Functional programming paradigm				DMD as a DUB library													Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages							Maybe, I miss accountability at the moment		Spaces	2018-03-01 06:35:08	2018-03-01 07:02:39	5eff690b1e
c41576b8101900ae3267c2fc98557a84																																																																																																																																																																																																																																																																																																																																																		2018-03-01 06:58:40	2018-03-01 06:58:50	3d1d574506
cb390f08b4b39969af03e4f826847a39	Yes	4				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4	Finding a good editor + plugin combo that worked well. (started with xaramin + the D plugin for that, moved to vscode and code-d)  Lack of examples.  	4	Some symbols completely lack any useful documentation. Unittests are also sometimes unhelpful	4	3	4		1	4		1	Always great content		3						I don't need help			Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications				Game Development						Toy Compiler Development		Official tarballs															2.078.3 (latest)													DMD	Linux		Windows								rdmd	dub						Not applicable	Visual Studio Code		3	0			I always get the feeling that my 'issue' is fully intended behaviour (when it comes to library/language issues)  For some other issues/improvements I feel the older members will just shoot down the idea, or that the issue's probably already been reported but I can't find it.	4	Better Error messages. *Better template error messages*	It's awesome, but I miss a few features	Pretty much the only thing at this point is there's no easy way to kind of 'lump' together a bunch of function attributes, so I have to type "@safe @nogc nothrow pure const/immutable" everywheree.		string interpolation		named arguments	assert diagnostics		multiple alias this		@mutable in immutable			UFCS for local symbols			D is awesome either way :)	No		N/A (It was 100% fine for me to learn the language from it, but I imagine there's nitty gritty techy flaws in it that I'm not able to point out)	Yes	4	4	4		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance		More/better container classes			std.eventloop	@nogc containers			std.graph			std.benchmark		std.color	std.image	std.drawing (2D)		Older modules like std.json and std.socket I completely avoid. Heavily templated modules (std.range, std.algorithm) can be awful to work with given the current state of template error messages.	std.base64	std.bigint		std.compiler	std.complex		std.container		std.csv		std.demangle	std.digest	std.encoding			stdx.checkedint		std.functional		std.json		std.mathspecial	std.meta	std.outbuffer						std.signals	std.socket	std.stdint		std.system			std.uni	std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	All modules are up-to-date with a good design and documentation, with the latest and greatest idioms and features.  That non-trivial changes to Phobos (such as adding in a new module) don't seem to be impossibly steep cliffs to climb.  That experimental modules that have just been sitting there in some kind of limbo are either worked on, or removed to remove clutter (preferably put onto dub) (also, std.experimental.logger feels like it's been there since the dawn of time T.T)	Yes	4	Nothing, my changes weren't complicated enough for anything to go wrong.																	Issues with language feature X (e.g. shared, @property)		Windows as a platformer, and users of Windows, just seem to be completely neglected (I'd love win32.mak to *actually be useful* like posix.mak is)				Poor compiler error messages				Non-enterprise IDE support	Poor debugging					I don't touch debuggers for D now, I just do old fashioned writelns and carefully going over the code, with different made up inputs			Attribute bloat		Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials	No good point for learning D				Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level	On the topic of DIPs, *there's no good way for me to easily keep track of the progress for them*	The community can either come off as friendly and welcoming, or nasty, insulting, and just has a general lack of care for new people. People higher up in the D 'food-chain' seem to be quite arrogant to the wants of people lower down (also issues like the recent fiasco of the new import syntax, which could've entirely been avoided *had anyone asked about it on the forums*)	Beautiful. Fast. Elegent.	I was looking for a new language, decided to look at the list of programming languages on wikipedia, and when I saw D I went "this seems quite nice" and never regretted it.	I wanted to try out a native language, rather then code in C# for the rest of my hobby life, and C++ was too confusing to me at the time (I was still new to programming), this prompted me to look for a new language.  After I had found D, it didn't take me very long to see it's beauty (UFCS, it's ridiculously powerful yet simple metaprogramming, an all around beautiful syntax, etc.) and I can't bring myself to leave it.	derelict-sfml2 (plus some other derelict stuff), as well as fluent-asserts.  (Side note: anytime I find a library that looks interesting, it either is abandoned, doesn't work properly on Windows, or both)	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection		Contracts	Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm	M E T A P R O G R A M M I N G	static foreach		DMD as a DUB library		Compile-time format string checking			New range functionality (substitute, slide)	toString with output ranges						Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages		Cross-compilation with LDC	newCTFE		I haven't found any other language that can be compared to it's productivity and power.  I just have to think "this is how I want my code to look and work" and poof, D let's me achieve my vision.  The language is beautiful. The features are amazing. The metaprogramming capability let's me do some really fun stuff and allows some cool designs. It's a volunteer language (for better or for worse) allowing anyone to contribute (unless you're on Windows... I've had nothing but headaches and have given up completely with anything other than documentation changes, since those don't require me to build anything)	@property. It is completely useless outside of self-documentation. I feel it's fine to let any function be called without parameters, but @property should be the only way to let a function be called like so: `writeln = "Hello World";` serving also as a prime example of why any normal function *shouldn't* be allowed to be used like that.  shared... I feel it's just never gonna be finished.  While I understand *why* and agree with why structs can't have default constructors, I still find it gets in my way sometimes (I  have to opt with a MyStruct.default_ static function)  I have been bitten *many* times by code such as "a => {blah;}" acting as a "lambda that returns a lambda that does blah" rather than "lamba that does blah".	Maybe, I'm still a student	*Please* find a way to easily track progress of DIPs, that isn't on github.  In a similar vein, there's no way for me to know the current progress of newCTFE (Which I'm very excited for, and wish I could hug Stefan for it <3)  Please review how building the dmd/druntime/phobos trio works on Windows, and provide a guide for it (the wiki one just gets me no where, and no matter how many times I've tried I just get endless issues when trying to build these projects myself).  I really like the idea of making github projects, detailing some things that could be done to improve the language. More please >:D  Similarly, make it easy to find issues that a novice can fix ;( (I'm way too scared to tackle any of the harder issues I want fixed)	Spaces	2018-03-01 06:11:07	2018-03-01 06:54:22	43c9e74d7c
8d9285ae9a078a7e78c0dd43c8a7e156	Yes	4				tour.dlang.org	Language specification		D Forum: Learn								3	Outdated documentation/examples on external websites. Some Phobos docs are still confusing (json, curl, logging, templates). Linux distros(Debian/Fedora) ship old/broken versions of compilers (gdc/ldc) 	4	1. Giant nested tree style navigation on left side is hard to navigate.  2. Search is not integrated into site. It just uses google.   3. Docs for containers, json, logging, curl, and templates need usability testing.  4. Docs are both API reference and minimal examples combined. They should be separated.  5. The style of the docs are visually noisy. Too many grey lines around sections/grey backgrounds/grey buttons/grey comments. Not enough white space. Everything is smashed into a thin column in the center of the screen. Syntax highlighting is visually displeasing, too faint, and small font. Look at MDN, and Go's docs for better styles.	2	3	3	The server is constantly going down or slow. Especially the forums and dub server. The front page is better than most langs (Ruby, Python, Go, Nodejs). But the sections in the middle are too verbose (News, Learn, Community, Documentation, Contribute, Packages). The "Fast code, fast." should be a link to a "Why choose D" page.	1	3	It is not obvious that the navigation at the top is for the tour and not the regular dlang.org website. It is not obvious what location you are at in the tour, relative to the navigation at the top. Move the language selector to the top right of the UI, like in MDN.	1	Mostly great content	Nothing.	3	D Forum		#d on StackOverflow					4	Yes, I like StackOverflow.	The main problem I have with the forums is that people will reply to something I posted a while ago, and I will not know about it. Because the forums don't email me, or have a convenient way to see posts that have been commented on.	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development	Desktop applications				Game Development							Official Windows .exe installer			Official .deb packages													2.078.3 (latest)													DMD	Linux	macOS	Windows	BSD-variant			WebAssembly			dmd		dub						No	Atom		4	1	3	Not really a problem with D. I just am sick of Bugzilla, after having to put up with it for 20 years. It is hard to search and cumbersome to use.		4	A LTS version that stays the same for 5 years. And a bleeding edge version.	It's awesome, but I miss a few features	Too many attributes. Having to put them everywhere is a pain. It would be better if we could just make a complete module as nogc, safe, trusted, et cetera.	tuples														More control of memory management	Yes, but only for experimenting/testing/debugging	4	Nothing	Yes	4	4	4					Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc	DIP1000		More -betterC support	More/better container classes		I'm happy as is.														json, containers, logging			std.bitmanip		std.complex				std.csv							stdx.checkedint	stdx.logger						std.meta	std.outbuffer						std.signals				std.system				std.uri		std.uuid						Curl should be removed and replaced with a light weight library. Vibe.d is too big for this task.	No, but to other D repositories				Time is my only enemy													Dependence of some language features + Phobos (Standard Library) on the GC				Support for WebAssembly	Nothing						Nothing								Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects							Nothing.							I'm still confused at what the overall plan is for memory management. There is focus on many different things, nogc, safe, scope, better-c, et cetera. I also don't like how GDC and LDC are promoted as well on the downloads page. I constantly have issues with them being slightly behind/broken, when compared to DMD. This gives a bad impression to new users that happen to choose LDC/GDC over DMD.	Almost perfect language	The D website	Was looking for C++ alternative in 2003	DerelictSDL2	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C		UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests			Garbage collection						Multi-paradigm			static foreach	opt-in GC and runtime				-betterC						Reproducible builds				Runnable examples on dlang.org					vibe.d 0.8				newCTFE		Less fundamental design problems than other langs.	attributes	Maybe, I'm still a student	No	Tabs	2018-03-01 04:53:48	2018-03-01 06:50:38	41a81db113
2d452bd9beb67f48128ad5d4cbc852f6	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn								3	Development environment	4	Some function's condition to compile are difficult to understand	1	4	4		1	4		1	Mostly great content		5	D Forum							5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development							Official Windows .exe installer					Official dlang.org/install.sh script		Arch Linux			Choco						2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub						No	vim / neovim		3	1	3	I prefer Github		4	I want an error message that is easy to understand like rustc.	It's awesome, but I miss a few features	Lacking of pattern matching, tuple's native support, algebraic type's native support	tuples	string interpolation		named arguments			multiple alias this	UDAs for attributes	@mutable in immutable	static break		UFCS for local symbols			pattern matching, algebraic type	No	4		Yes	3	2	4						Reliance on the GC				@nogc				More/better container classes				@nogc containers												Lacking of Maybe(Optional), forward range needs save (save cannot be @nogc)	std.base64		std.bitmanip	std.compiler	std.complex				std.csv			std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer								std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid			std.xml	std.zlib	std.zip	Please use Maybe or Optional for some function's return type	No, but I want to to			Finding good issues to get started			No roadmap		High barrier to entry								Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC								Poor compiler error messages	Poor GC implementation / performance				Poor debugging	dub													Nothing											Nothing.								Fast, Easy to write, Easy to use meta programming	A book	D is a compile language as well as C/C++, so I thought D is fast. And D's syntax is good for me.	derelict	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance			UFCS				Templates							Contracts	Debug attribute						static foreach	opt-in GC and runtime														Runnable examples on dlang.org		Deprecation of the comma operator				Colorized error messages					Easy to writing	Sometimes, implicit type conversion of a class that has alias this fails and it points wrong address	Maybe, I'm still a student	Please do your best! I expect it! 	Spaces	2018-03-01 05:57:43	2018-03-01 06:30:22	69388fb69e
bc029c852a1dee566db8f6405696557b	Yes	4					Language specification										3	Native, linkers ext.	3	adrdox rox	5	4	3		0			1	Mostly great content		5		#d on IRC						1	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily												A variety	Official Windows .exe installer																2.078.3 (latest)													LDC									All			dub						Not applicable		Mono-D	1	1	2			4		It's awesome, but I miss a few features	A few warts															Signatures	Yes, but only for experimenting/testing/debugging	1	Start again, its not worth fixing.	Yes	2	2	4															Windowing, images		std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database				std.color	std.image	std.drawing (2D)	Windowing, event loop is druntime not Phobos																		stdx.logger													std.signals										std.uuid		std.windows					Yes	1													Missing language feature X / not moving fast enough					Issues with language feature X (e.g. shared, @property)										Non-enterprise IDE support			DLL support on Windows																										Lack of progress on DIPs	Lack of focus at the management level								Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C		UFCS			Simple, but powerful module system		Built-in documentation (Ddoc)	Built-in unittests			Garbage collection							Functional programming paradigm				DMD as a DUB library																						newCTFE				No, I'm already donating my free time		Spaces	2018-03-01 06:08:54	2018-03-01 06:22:10	b13be585ee
cbc903896d54c73eb2e6e307207aa05e	No, I have stopped using D		Missing AWS SDK		"The D Programming Language" by Andrei Alexandrescu												5	To know whether a method returns a ref or object	5		0	5	4		0			1	Mostly great content		5	D Forum							5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely				DevOps															d-apt Debian/Ubuntu											2.077.1 (latest LDC)												DMD	Linux									dmd		dub	make					Not sure		geany	3	0				5		It's awesome, but I miss a few features		tuples	string interpolation	in-place struct initialization	named arguments		language binding to X										No	3		Yes	3	3	3				Poor naming choices			Fear to do breaking changes		@safe for all modules			Performance					std.eventloop	@nogc containers	better json serialization			std.database																																																		std.windows					Yes	5														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation		Poor compiler error messages								Missing support for platform X												Fewer third-party libraries than other language																		easier than C	internet search	write some tools	phobos?	Ranges & std.algorithm										Closeness to C/C++	Simple, but powerful module system	Templates					Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach																												Maybe, I miss accountability at the moment		Spaces	2018-03-01 05:40:46	2018-03-01 05:56:37	eb861dbb50
484e4a78cbc60a0c94e388b73eb0b591	No, I have stopped using D		Changed company, and I have run out of time for personal dlang projects.		"The D Programming Language" by Andrei Alexandrescu		Language specification	#d IRC on freenode									4	Compiler bugs, quality of error messages, incomplete or inconsistent std library	3	Template constraints are a big part of the API, but present poorly in the docs. Some functions are just poorly documents (ie, low quality text). Example quality is inconsistent, sometimes it's great, sometimes, not so much. Often doco fields like parameters/return value are not documented; just the summary/brief.	0	4	4	It's pretty good. Maybe it's a little bit busy, and maybe the focal priorities are a little clumsy?	0			0			4	D Forum	#d on IRC				I don't need help		3	Yes, I like StackOverflow.	I think stack-overflow content is a strong indicator of language ecosystem quality, maturity, and population. Regardless of whether I personally like it for Q/A, I think encouraging a strong SO presence will boost perception for new comers exploring D.	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications		DevOps		Game Development		Embedded Systems					Official Windows .exe installer			Official .deb packages				Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows		Android		WebAssembly	Embedded			rdmd		make				Visual Studio (MSBuild) [how is this not in the list, wtf?!!]	No	Visual Studio + VisualD		4	1	3	Bugzilla feels like it's from the 90's, I feel 'yucky' interacting with it. I also need yet another website account to access it. Please openauth; let me login with github cred k-thx!		4	Improve CTFE/template compile performance.; compile times are bad/slow despite advertising the opposite.	It's ok	No mechanism to alias attributes, paren spam, template instantiation can be a bit bloaty, template constraints are often long and very difficult to read/understand at a glance.	tuples						multiple alias this						Static inheritance		Implicit casting when calling functions or constructors!!!!!!	No	3	It feels less well specified than C++ for instance; I feel some amount of spec is implied by the DMD source, and I feel there are lots of language edges where features don't quite interact cleanly.	Yes	2	3	2				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes	More batteries included			@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark		std.color	std.image	std.drawing (2D)	std.plot	Strings/ranges/algorithms often feel both conflated, and somehow coincidentally, disjointed/disassociated.																		std.functional	std.getopt			std.mathspecial	std.meta	std.outbuffer																						**Plot library**, multimedia/image/audio, signal analysis (FFT, etc)	Yes	3	Getting things reviewed/merged is hard												Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000	Difficulty making adoption case to business/colleagues; perceived riskiness	Nothing							Non-enterprise IDE support	Poor debugging	dub	DLL support on Windows	Missing support for platform X					Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow									Lack of progress on DIPs				Community dismisses the importance of commercial use patterms (ie, Visual Studio/debugging experience/workflow tooling)	Potential, so-close-but-still-so-far, impatience	Danni Coy, 2009	I'm sooo done with C++	Perhaps D's biggest weakness...?	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C		UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests							import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC			toString with output ranges						Automatic compilation of imports (dmd -i)			Deprecation of the comma operator				Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		It's more fun to write D than C++, and I can read my code after it's done!	Can't pass lvalues to ref args. Storage class distinct from type-constructor. No implicit conversion when calling functions/construction leads to pointless and tedious explicit conversion.	Yes, but only for a specific project	I'm losing interest due to impatience resolving issues that matter to me (10 years and waiting), and waning confidence that I'll ever convince my company to invest in D.	Tabs	2018-03-01 04:38:49	2018-03-01 05:41:33	192e6568f2
7b3ef69c3c2ec4670b4e04d61c53dbaa	Yes	3					Language specification										5	nothing	5	nothing	5	5	5	nothing	1	4	too poor	1	Mostly great content	few posts	5	D Forum							5	No, improve DFeed.	no	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily						Game Development							Official Windows .exe installer																2.078.3 (latest)													DMD	Linux	macOS	Windows	BSD-variant	Android	iOS	WebAssembly	Embedded				dub						No	Intellij		3	0			not found	3	dmd support for ios, android and windows store	It's awesome, but I miss a few features	variable declaration, I would like let name: type = value;			in-place struct initialization				multiple alias this	UDAs for attributes	@mutable in immutable	static break	writing files at compile-time	UFCS for local symbols	Static inheritance			Yes, but only for experimenting/testing/debugging	4	nothing	Yes, but only for some projects	1	3	1					Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)		container							std.container					std.digest				stdx.checkedint	stdx.logger		std.getopt			std.mathspecial		std.outbuffer					std.regex	std.signals				std.system						std.uuid						c++ stl is better. this is the main problem	No, and I don't plan to				Time is my only enemy										Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000					Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows	Missing support for platform X						Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X								Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		yes, I want ownership over GC	More safe and flexible than c++	Facebook	c++ was killing me	erupted		Mixin	CTFE (static if, static foreach)		std.traits		Native interoperability with C	Readable syntax		-betterC		Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays		Inline assembler		Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm			static foreach	opt-in GC and runtime	DMD as a DUB library	Templated vector operations	Compile-time format string checking	-betterC							Removed prelude assert for constructors & destructors		Automatic compilation of imports (dmd -i)			Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute	Cross-compilation with LDC			there is no good alternative	@nogc with Exceptions	Maybe, I'm still a student	Please, get rid of GC, implement ownership. In game development it really matters.	Tabs	2018-03-01 04:57:38	2018-03-01 05:27:32	2f06fe5e0f
010b4d59e37d5cf2a9bc3afd45323569	Yes	4			"The D Programming Language" by Andrei Alexandrescu											Professor Chuck Allison from UVU	4	Code examples are too few when compared to other language in sources like stack overflow.	3	Sometimes I need explicit type instead of using 'auto'. Furthermore, there could be more code examples.	5	3	3	Nothing in particular, but I don't visit the website.  Generally I rely on google search results.	0			0			2							Google	2	I don't care.	no	No.		Weekly	Web development																Official OSX dmg installer				Homebrew																					DMD	Linux	macOS	Windows							dmd	rdmd	dub						No	Visual Studio Code		4	0			na	4																																																																																																																																																																																																																																		2018-03-01 05:13:32	2018-03-01 05:25:48	1a38391941
4a577ea34c50e8610f35f45d368aefd4	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification	#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			5	Lack of time.	4	It is very dense for those not up to speed.		4	4	Not much, it is pretty good.	1	4	Not much.  It is also pretty good.	1	Mostly great content									I have not asked yet, but I shall when I get the time and courage!				No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.		Web development	Desktop applications	IoT										Official Windows .exe installer			Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows		Android					dmd		dub							vim / neovim		3	0			No real issue other than LDC installation confusion.	5		It's awesome - keep it as is																				Yes	6	5	5	Nothing - Phobos (Standard Library) is great											Performance		More/better container classes		I'm happy as is.						std.database		std.benchmark						Not everything in it is well explained.																																														More clear examples of usage would be welcome.  Many items are mentioned but are without examples.	No, but I want to to				Time is my only enemy						I am just starting to learn D		Nothing											Poor Phobos (Standard Library) documentation		Poor compiler error messages			Nothing								Nothing								Nothing							Lack of good examples / tutorials				Nothing.							For general development GUI-based programs are often necessary, but they are cumbersome in D.	"I love D" or "Thank you all!"	I don't recall.  I stumbled upon it, far later than I would have liked.	I think it is brilliant and suits me well.	Hard to say.  I have liked what I have used so far.	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates					Garbage collection	Inline assembler			import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm																						vibe.d 0.8			Cross-compilation with LDC			I love most aspects of it, and have adopted it as my primary choice for my programming.			Again, huge thanks to everyone involved with D!	Tabs	2018-03-01 04:28:55	2018-03-01 05:14:29	5c49ff06c8
0f0a903e410ede6f2aa18c0e695d8397	Yes	5					Language specification												4		0				0			1	Mostly great content		5					My colleagues	I don't need help		4	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily				DevOps			Big Data					Economics															DVM		2.078.3 (latest)													DMD	Linux											dub	make					Yes, I work with D full time	Sublime		4	1	5			4		It's awesome - keep it as is																				Yes	3	5	5	Nothing - Phobos (Standard Library) is great						Fear to do breaking changes		@safe for all modules	@nogc		Performance						@nogc containers	better json serialization													std.bigint		std.compiler	std.complex						std.demangle					stdx.checkedint														std.signals												std.windows	std.xml				Yes	4											Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.								Excellent general language	Slashdot	I didn't want to write C++.	An internal library	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS				Templates		Built-in unittests			Garbage collection	Inline assembler						Functional programming paradigm					Templated vector operations	Compile-time format string checking			New range functionality (substitute, slide)			Back referencing of mangled symbols			DMD support for AVX2				Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)						newCTFE				No, I'm already donating my free time		Spaces	2018-03-01 04:33:01	2018-03-01 04:53:11	6968bf04a1
3b4e28c1e844d44dcfe27ca6f80ec7a5	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	getting subtle templates to work	3	Hard to look things up by "purpose" rather than more specific search; necessary when coming in to D from the cold.	0	3	3	It would be greatly improved if there was the analog of a phrasebook, that had a substantial collection of ways to perform common programming tasks in a D-like way.	1	3	Too linear	1	Mostly great content	There's not nearly enough of it.	1	D Forum							2	Yes, I like StackOverflow.	D.learn is a psychologically harsh environment alleviated only by a few very positive people	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications					Big Data				Science/Research		Official Windows .exe installer	Official tarballs		Official .deb packages		Official dlang.org/install.sh script	d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows		Android					dmd		dub	make					Yes, I work with D part time			5	1	4	Bugs can remain unfixed for a very long time.		5		It's ok	The type system and how it is used with templates is needlessly complicated.	tuples	string interpolation	in-place struct initialization			language binding to X	multiple alias this	UDAs for attributes			writing files at compile-time	UFCS for local symbols				No	4	Has a very shallow hierarchy	Yes	1	4	3				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)		std.xml																																														No mechanism to get good stuff in there because it isn't perfect and perfectly general.	No, but I want to to								High barrier to entry						Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000						Poor GC implementation / performance						DLL support on Windows	Missing support for platform X	D's dependence on a large and bulky runtime						Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library									Lack of good examples / tutorials		Few transition guides from programming language Y		Nothing.							Template syntax. Using a compile time argument needs `!` but defining a compile time parameter must not use `!`, and many other syntactic foibles, especially surrounding templates	C++ done right	A colleague	Because it enabled me to do hard and fast things relatively easily.	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates			In, out, ref parameters		Garbage collection		Contracts		import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library			-betterC		New range functionality (substitute, slide)	toString with output ranges	Deprecation of the integral promotion for unary operators								Deprecation of the comma operator			vibe.d 0.8	Colorized error messages		Cross-compilation with LDC	newCTFE		Its universality, especially using functional programming in tandem with the usual stuff.	alias this teasing that it can give me what I want	Yes, I'm already doing so	structs are so anonymous yet some situations call for a constructor always called upon move; its absence blocks a lot of ingenious implementation designs	Spaces	2018-03-01 03:54:50	2018-03-01 04:51:03	32ff5e271c
86d143084dabd301f9f1995a57d738e9	No, I have stopped using D		I don't have using D projects.				Language specification										4	The D users are no many there.	5			5	5		0			1	Mostly great content		4							#dlang on Twitter	5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely		Desktop applications				Game Development							Official Windows .exe installer				Official OSX dmg installer												2.078.3 (latest)													DMD		macOS	Windows				WebAssembly	Embedded		dmd				cmake				No	Visual Studio Code		4	0				4	WebAssembly backend.	It's ok	Namespace. I want to explicitly specify not a file name.																Yes, but only for experimenting/testing/debugging	3	GC	Yes	2	3	3				Poor naming choices						@nogc			More -betterC support					@nogc containers							std.decimal							std.bigint	std.bitmanip						std.csv		std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt			std.mathspecial	std.meta												std.traits	std.typecons	std.uni				std.variant						No, and I don't plan to				Time is my only enemy													Dependence of some language features + Phobos (Standard Library) on the GC				Number of users					Poor GC implementation / performance				Poor debugging																										Too much low-level focus (C/C++)	Frequent breaking changes						Fast Strong Easy	College		When C ++ was not that good, the specification of D seems to me good.						Performance			UFCS	-betterC										Contracts				Multi-paradigm	Functional programming paradigm							-betterC																							No, I'm not interested into D		Tabs	2018-03-01 04:17:18	2018-03-01 04:47:37	46e75d30f0
66fc77abe74e245009b166e9e6c7fd0a	Yes	5					Language specification										5	Linking resulting programs with third party libraries on windows. Being forced to deal with optlink or microsoft linker while having dependencies built with mingw is pure hell.	5	Hard to say. I find myself consulting source code of standard library so often I hardly need the actual documentation.	0	5	5	It could be made to display better in lynx and links browsers.	1	5	The order of topics seemed weird in several places. It was quite a while though and I do not remember what it was. Sorry about that.	1	Always great content	-	5							Before I ask a question I do research and so far it always turned out someone else had asked similar enough question already and there is an answer (or several) available.	5	I don't care.	No strong preference here.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications																		Arch Linux						I compiled D from source			2.078.3 (latest)										2.068.2 (last C++ release)			GDC	Linux	macOS		BSD-variant	Android											scons		No	vim / neovim		5	0			My still much in development understanding of D. When I become sufficiently competent I may start opening issues myself.	5		It's awesome - keep it as is																				Yes	3	4	6			Auto-decoding isn't nothrow				Fear to do breaking changes								I am still learning and too inexperienced to have a strong opinion on this.	I'm happy as is.																									std.demangle			std.exception	stdx.allocator	stdx.checkedint	stdx.logger								std.parallelism													std.uri		std.uuid		std.windows	std.xml				No, and I don't plan to										I am just starting to learn D	I dislike GitHub itself for its policies.										Dependence on microsoft linker or optlink on windows.	Nothing										DLL support on Windows			Dependence on microsoft linker or optlink on windows.								Requiring an explicit cast very often when using data types smaller than int.	Nothing											Nothing.							Nothing compares to the mountain of problems caused by D's reliance on microsoft linker or optlink on windows. If only gdc was not so much behind.	Power overwhelming!	Read about it somewhere. It was still D1 era and I did not decide to learn it then.	I set out to learn most powerful language I could find for my next hobby project.	deimos.ncurses	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters		Garbage collection	Inline assembler	Contracts	Debug attribute			Multi-paradigm	Functional programming paradigm	High overall coolness factor.	static foreach				Compile-time format string checking					Deprecation of the integral promotion for unary operators								Deprecation of the comma operator									Its fast development.	Reliance on microsoft linker and optlink on windows.	Yes, just tell me how		Spaces	2018-03-01 03:34:06	2018-03-01 04:34:46	4313da9bc3
9d8ac08006fc1bec872a8ba276707244	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	Debugging template code.	4		0	4	4		0			1	Huge variance in quality	It lacks language articles for intermediate users a.k.a. "did you know that...".	4			#d on StackOverflow					5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development	Desktop applications				Game Development							Official Windows .exe installer																2.078.3 (latest)													DMD			Windows		Android					dmd								No	Visual Studio + VisualD		3	1	3	Issue tracker is a bit oldish.		5		It's awesome - keep it as is																				Yes	3	3	3												Performance		More/better container classes			std.eventloop	@nogc containers				std.database		std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)													std.demangle							std.functional					std.meta	std.outbuffer	std.parallelism					std.signals						std.typecons					std.variant						Yes	5											Nothing										Nothing							Non-enterprise IDE support	Poor debugging						Nothing										Less corporate support (including jobs) than other languages		Few showcases / flagship projects							Nothing.							No one uses D at large scale. C++, Java, C# everywhere.	The best language.		Andrei 's authority.			Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection	Inline assembler			import("myfile")		Multi-paradigm			static foreach	opt-in GC and runtime			Compile-time format string checking									DMD support for AVX2					New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)								It is fun.	dub	Yes, just tell me how		Tabs	2018-03-01 03:52:12	2018-03-01 04:31:46	3065939223
38ea5d9400faf741ca05dd799c600320	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	opapply, ddoc	4	link to github code in each function, class name. ddoc spec	1	3	4	ddoc functionality to create html looks like dlang.org	1	4	compiler version selection for explaining newer functionality like static foreach or std.experimental	1	Mostly great content	more frequent posts	5	D Forum							5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily											Science/Research							Official dlang.org/install.sh script											2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows									dub	make					Yes, I work with D full time	emacs		1	0			github is better	5		It's awesome, but I miss a few features	remove semicolon. remove needless parens in if, for, while, switch and maybe function apply				named arguments	assert diagnostics		multiple alias this				writing files at compile-time	UFCS for local symbols			pattern match	Yes, my project depends on it	4	standardization	Yes	3	6	3							Fear to do breaking changes	Parsing and lexing library	@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes	Parsing and lexing library			@nogc containers	better json serialization	better xml serialization	std.graph			std.benchmark					Parsing and lexing modulw	Nemerics	std.base64	std.bigint		std.compiler								std.digest	std.encoding			stdx.checkedint														std.signals	std.socket			std.system			std.uni	std.uri		std.uuid		std.windows				Numeric should be more nogc and generalized like mir	No, but I want to to				Time is my only enemy	Personal laziness	No roadmap										Non-perfect C++ integration						Nothing						Nothing								Nothing																	Few transition guides from programming language Y					Lack of progress on DIPs				Lack of pattern much, only that is it for me	the greatest alternative of c++	Twitter	Writing code in github	Mir		Mixin	CTFE (static if, static foreach)	std.meta		Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection	Inline assembler	Contracts		import("myfile")	std.concurrency & std.process	Multi-paradigm			static foreach				Compile-time format string checking	-betterC		New range functionality (substitute, slide)	toString with output ranges										New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)						Mir	Powerful templates	Stack allocated class instance	Maybe, I miss accountability at the moment		Spaces	2018-03-01 03:36:21	2018-03-01 04:15:48	8b4dba1e8f
764819ddec2c574afb64a9311cf57a0c	Yes	3				tour.dlang.org	Language specification										4	Getting used to the way modules and classes work coming from c++	5		0	5	5	Nothing	1	4	Nothing. It’s good	0			5	D Forum						Reddit	4	I don't care.	No 	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly		Desktop applications				Game Development		Embedded Systems	Machine Learning				Official Windows .exe installer							Arch Linux						I compiled D from source				2.077.1 (latest LDC)												LDC	Linux		Windows	BSD-variant				Embedded					make					No	Visual Studio + VisualD		4	0			I haven’t found issues	4	No garbage collection!	It's awesome - keep it as is																				Yes	4	5	5						Reliance on the GC				@nogc		Performance						@nogc containers												None	std.base64	std.bigint	std.bitmanip						std.csv																				std.regex						std.traits			std.uri	std.utf	std.uuid				std.zlib	std.zip	The garbage collection	No, but I want to to			Finding good issues to get started	Time is my only enemy																	GC in phobos 					Poor GC implementation / performance		Nothing								Nothing									Fewer third-party libraries than other language							No good point for learning D			Nothing.							The GC	An improved C	Googling for C alternatives	I wanted a language just as fast as c or c++ but without header files	I don’t really have one							Native interoperability with C				Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)								import("myfile")						opt-in GC and runtime				-betterC																					Trying out new things	The GC	Maybe, I'm still a student	Please remove the GC from Phobos or make it optional	Tabs	2018-03-01 03:57:26	2018-03-01 04:12:46	986882dfea
d0fe462f63803ee66759886133a4f657	Yes	4				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		3	1. Lack of examples of how to use something. 2. Having to know ranges and templates before I could use much of Phobos. 3. Some fragmentation of Phobos, like is a function I am looking for in the string module or array module.	3			3	3		1	3		1	Mostly great content		5	D Forum						gtkd forum	5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications														Official .deb packages													2.078.3 (latest)													DMD	Linux											dub						No		I am writing my own mini IDE as a learning experience utilizing gtkd and dcd as a library	5	0				5		It's awesome - keep it as is																				Yes	3	2	2				Poor naming choices				Some fragmentation of where things are located																							std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json	std.math	std.mathspecial	std.meta	std.outbuffer	std.parallelism			std.random	std.regex	std.signals	std.socket	std.stdint		std.system	std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to										I am just starting to learn D		Nothing										Nothing							Non-enterprise IDE support	Poor debugging																					Lack of good examples / tutorials	No good point for learning D											Great all purpose language	Google search.	As a personal quest to learn a native language, at my day job I have worked in a Windows shop since 1995 where I have programmed in C for 6 months, then switched to VB (the original one) and then switched to C# because I prefer the C style syntax. 							Performance		Readable syntax			Closeness to C/C++						@safe strings + arrays	Garbage collection					std.concurrency & std.process	Multi-paradigm																													I like the language as it allows me to write code that is similar to C# but it is native compiled and doesn't require .net (or mono) framework.					2018-03-01 01:55:22	2018-03-01 03:45:58	ce3ae6da0c
7feef274d5177e94948464e282927dda	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							4		4		5	5	5		1	5		1	Mostly great content		5	D Forum							4	Yes, I like StackOverflow.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development	Desktop applications											Official Windows .exe installer																2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows							dmd		dub						No	Coedit		5	0				5		It's awesome - keep it as is																				Yes	6	6	4	Nothing - Phobos (Standard Library) is great								@safe for all modules	@nogc			More -betterC support	More/better container classes			std.eventloop	@nogc containers				std.database	std.i18n				std.image																																																		No, and I don't plan to										I am just starting to learn D		Nothing										Nothing							Non-enterprise IDE support			DLL support on Windows									C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects							Nothing.								Great but with lack of corporate support	Habrahabr.ru	Because of its beautiful syntax		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)					Readable syntax	UFCS		Closeness to C/C++				Built-in unittests													opt-in GC and runtime			Compile-time format string checking																								Maybe, I miss accountability at the moment		Spaces	2018-03-01 03:15:59	2018-03-01 03:43:28	6e8ef671a1
3433623367da9c3412abd36a1ee4b300	No, I have never used D			Various factors: being busy, waiting for right time to start a new project, investigating alternatives, and biggest one: being a lurker :-)			Language specification		D Forum: Learn								4	Lack of real opportunity		Absolutely no experience with it, hence no ratings...sorry!	5	4	4	Dunno...have to look at it closely...but it does look good though	0			1	Mostly great content	Dunno...I tend to read what interests me, that's all! :-)								Just a lurker		I don't care.				Rarely	Web development	Desktop applications																							I didn't install D																		Linux												make					No		Notepad++, other lightweight editor on my Linux boxes at home		0			Obviously never have used D, so no issues to file :-)																																																																																																																																																																																																																																			2018-03-01 03:09:36	2018-03-01 03:23:26	b96deb871f
98c2f23e921092c19c1c3b7f0f68219a	Yes	4							D Forum: Learn								3	Understanding how templates and CTFE work together.	4	The search engine (it just goes to a google page, which makes finding specific symbols in modules difficult)	3	4	4	More comprehensive install info for 3rd party compilers on the download page.	1	4		1	Always great content	Not enough articles.	5	D Forum							4	No, improve DFeed.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications											Official Windows .exe installer			Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows		Android							dub						No	Sublime		3	1	3	If anything, bugzilla looks archaic and is un-intuitive		4	Better error messages	It's awesome, but I miss a few features	Inconsistent use of @ symbols in keywords	tuples						multiple alias this			static break						No	4		Yes	3	4	2				Poor naming choices		Reliance on the GC				@nogc				More/better container classes			std.eventloop		better json serialization	better xml serialization		std.database				std.color	std.image	std.drawing (2D)		Figuring out which trait-like things live in which module (meta / traits / range)				std.compiler	std.complex				std.csv		std.demangle					stdx.checkedint																std.stdint		std.system									std.xml		std.zip		No, but to other D repositories			Finding good issues to get started		Personal laziness	No roadmap									Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing	Poor Phobos (Standard Library) documentation						Non-enterprise IDE support																Fewer third-party libraries than other language										Nothing.								Fast, Sensible Python	Looking around for alternative native language	It made more sense than most other native languages	vibe.d		Mixin	CTFE (static if, static foreach)	std.meta	std.traits			Readable syntax				Simple, but powerful module system	Templates					Garbage collection				import("myfile")					static foreach		DMD as a DUB library													Runnable examples on dlang.org					vibe.d 0.8	Colorized error messages		Cross-compilation with LDC	newCTFE		It just makes more sense than any other language, and dosen't force you into a particular way of thinking.		Maybe, I'm still a student		Tabs	2018-03-01 02:37:27	2018-03-01 03:09:07	ea3e2e1caa
1f76c5ca4b51fda0a14a122a62c36072	No, I have stopped using D		Not needed in my day work (though I do have a small application in D) and don’t have enough free time to do stuff in D				Language specification									On the forums, before there was Learn	3	Can’t recall, it was many years ago	3	It’s just confusing at times. Just this morning I tried to find the module containing the Windows API headers and ended up just going to the DMD sources	1	4	3	I never go there	1	3	I’ve only clicked on a handful of pages, mainly to try to help translate	0			2						I don't need help			I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely												Custom software projects on a custom platform 													I didn't install D					2.077.1 (latest LDC)												DMD			Windows									dub						Not applicable	Visual Studio Code		3	1	4	It’s  been years since I reported one, so I’m not a single familiar with the process any more		4		It's awesome - keep it as is																				Yes	2	4	4					Old modules like std.outbuffer or std.socket		Fear to do breaking changes			@nogc			More -betterC support						better json serialization	better xml serialization		std.database								Ranges and Voldemort types. So many auto ranges mean it’s difficult to know what input is needed or what output is returned.																																														1. Define what Phobos should be: should it be like the Java Standard Library where you can find everything or should it a minimal standard library so that you have to find other libraries to work with? It seems like there’s a double personality complex at times. 2. Get rid of stuff that the community has asked for too long to get rid of. Figure out a process to determine what needs to go and throw those things away. 3. Clearer documentation	No, but to other D repositories				Time is my only enemy				High barrier to entry													More than anything, libraries. I work in a world that relies on SQL databases, REST/SOAP calls, emails, document generation, LDAP/SAML connections, etc., so D would need libraries for all of these things for me to be able to use it at work.								Non-enterprise IDE support																Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects								Too much low-level focus (C/C++)		Lack of progress on DIPs						I think I was looking for an open source compiler so that I could try to implement one myself. Stumbled into D (probably around version 0.32 or so) and stayed around, if only lurking in the recent past.								Performance		Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates					Garbage collection						Multi-paradigm																				Deprecation of the comma operator										I don’t like property syntax for function calls (eg: I don’t like foo.writeln, but I’m okay with foo.writeln()), but I don’t know if it’s necessarily my least favorite 	No, I'm not interested into D	About donations to DLF, it’s just not high enough in my priority list	Spaces	2018-03-01 02:28:35	2018-03-01 03:05:22	218025e763
1e7fcb713847c451ef5dd62661e43c3e	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification									phobos document	3	little up-to-date translated information	5	std.stdio.File should be documented without reference out of D (I'm not a C programmer, so I don't know about FILE* type and fopen function)	5	4	5		1	4	I can't find link to translated versions	1	Mostly great content		5							Twitter #DLang	5	I don't care.	Twitter: easy to ask, easy to answer (I use other resources after I don't receive helpful answer in Twitter)	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily											Science/Research		Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub						Yes, I work with D full time	Visual Studio Code		2	1	3			5		It's ok	personally I like indent-based syntax	tuples			named arguments			multiple alias this					UFCS for local symbols				No	5	(maximum guaranteed or reference implementation's own) (amortized or worst case, whichever will be ok) (without considering cache hit/miss, swaps) computational complexity of basic operations with arrays and associative arrays	Yes	2	3	5					Old modules like std.outbuffer or std.socket			ranges are not const/immutable by default											better json serialization	better xml serialization	std.graph			std.benchmark						ranges don't work in harmony with immutable and const	std.base64			std.compiler							std.demangle				stdx.allocator	stdx.checkedint								std.outbuffer						std.signals	std.socket	std.stdint						std.uri		std.uuid	std.variant			std.zlib	std.zip		Yes	5																														dub										C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages				Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials					Too much low-level focus (C/C++)							awesome, without speciality	Twitter: @repeatedly	for competitive programming first, and then do my research work	functional			CTFE (static if, static foreach)	std.meta	std.traits	Performance			UFCS				Templates		Built-in unittests			Garbage collection		Contracts							static foreach				Compile-time format string checking																						easy to do powerful hacking	the sign of the integer division remainder should be same (if not 0) as the divisor, not dividend.	Maybe, I miss accountability at the moment		Spaces	2018-03-01 02:16:40	2018-03-01 02:56:52	4e87e3776f
2745d7591a04d5d6db05418fb5312567	Yes	2			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms	reading source	3	Complicate template and poor error message	3	Template constraint and return type not clear	1	2	3	Too slow in China	0			1	Mostly great content		2	D Forum							3	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development	Desktop applications				Game Development		Embedded Systems					Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows		Android	iOS		Embedded		dmd		dub						No	Visual Studio + VisualD		2	1	2	Too slow to fix		4	Runtime UDA	It's awesome - keep it as is																				Yes	0	3	1		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes	Hard to find in the pool hierarchy	@safe for all modules	@nogc	DIP1000	Performance		More/better container classes	More feature, such as networking			@nogc containers	better json serialization	better xml serialization		std.database	std.i18n					std.drawing (2D)	Networking	Algorithm		std.bigint		std.compiler	std.complex		std.container		std.csv				std.encoding		stdx.allocator	stdx.checkedint				std.json		std.mathspecial		std.outbuffer						std.signals	std.socket							std.uri					std.xml	std.zlib	std.zip	Better hierarchy; More feature; nogc	No, but I want to to			Finding good issues to get started	Time is my only enemy				High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems	Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging	dub	DLL support on Windows	Missing support for platform X					Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow							Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Poor debugger and IDE support is the blocker	Powerful, poor ecosystem	Don't remember, long time ago	I like it	Tango		Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C					Simple, but powerful module system	Templates		Built-in unittests												static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking				toString with output ranges													Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		D can win C++ one day	Version statement don't support && || !	No, I don't like the management of the DLF	Focus on ecosystem support, and marketing	Spaces	2018-03-01 02:09:21	2018-03-01 02:53:05	dbc511e9c6
2ba5afd8fcfa3d384453b4caf1321a7b	Yes	4				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4	Oudated examples Not enough examples Some documentation for Phobos functions were poor	4	Some older modules have outdated or incomplete info. Some of the examples don't run, even on the site		5	4	The D snippets could be simpler	1	5		1	Mostly great content		4	D Forum					I don't need help		5	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications									Science/Research	Student					Official OSX dmg installer												2.078.3 (latest)													DMD	Linux	macOS		BSD-variant				Embedded			rdmd				meson	scons		Not applicable	vim / neovim		5	0			Never found an issue that wasn't already reported	3	Error messages are poor at best.	It's awesome - keep it as is																				Yes, but only for some projects	1	6	6		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers	better json serialization	better xml serialization			std.i18n																															std.outbuffer													std.uni		std.utf			std.windows					No, but I want to to										I am just starting to learn D				Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000					Poor compiler error messages								Missing support for platform X	D's dependence on a large and bulky runtime			Auto-decoding of strings		Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials							Lack of progress on DIPs	Lack of focus at the management level				Fast, performant, easy	From an acquaintance	Better C++	Phobos	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays			Contracts	Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations	Compile-time format string checking	-betterC	stdx.checkedint	New range functionality (substitute, slide)	toString with output ranges		Back referencing of mangled symbols	Reproducible builds		DMD support for AVX2	Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)				Cross-compilation with LDC	newCTFE		Better C++	C integer promotion rules without compiler warnings/errors	Maybe, I'm still a student		Tabs	2018-03-01 02:34:11	2018-03-01 02:52:06	cd8ef320b9
04e23bd42c94919de19abe170f85f821	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	Lack of "copy-paste" cookbooks for common scenarios	4	More "cookbook" examples	0	4	4	None	1	4	More ready to use examples.	1	Mostly great content	More frequent posts. Posts after point releases explaining new features.	3	D Forum							4	No, improve DFeed.	More active posting and answering questions on Reddit	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development				Security		Big Data									Official .deb packages	Official OSX dmg installer												2.078.3 (latest)													DMD	Linux	macOS								dmd		dub	make					No	Sublime		3	0			no	4	Friendlier error messages.	It's awesome, but I miss a few features	Smarter way to handle nulls.		string interpolation		named arguments												Yes, but only for experimenting/testing/debugging	4		Yes	3	4	4						Reliance on the GC			@safe for all modules			Performance	More -betterC support	More/better container classes				@nogc containers	better json serialization	better xml serialization																																																									No, but I want to to								High barrier to entry				Nothing													Poor compiler error messages	Poor GC implementation / performance		Nothing								Nothing											Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials					Too much low-level focus (C/C++)							Familiar, suprising, powerful.	Dont remember. long time ago.	I wanted "Compiled Python"	phobos			CTFE (static if, static foreach)				Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates							Contracts				Multi-paradigm	Functional programming paradigm			opt-in GC and runtime	DMD as a DUB library			-betterC													New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)			DCompute						Maybe, I miss accountability at the moment	Please go after Python, Ruby, ... programmers and stop trying to make C++ programmers use D. They won't.	Meh, I don't care.	2018-03-01 02:33:42	2018-03-01 02:51:31	d55d6ac06a
4d106c06165ce27b7da0fff427a74766	Yes	4					Language specification			"Programming in D" by Ali Çehreli					d-idioms		4	mixins, difference between struct in C++ and D, non-threadsafe ranges, lack of RAII	3	More (relevant) examples	0	5	5		1	5		1	Huge variance in quality	The content can be more high quality, as published directly from the authors themselves instead of a "translation" from Mike	3	D Forum							1	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily									Machine Learning		Science/Research				Official .rpm packages														2.078.3 (latest)													LDC	Linux											dub						Not applicable	vim / neovim		1	1	1	Move to GitHub, please!		5		It's awesome, but I miss a few features	Many unnecessary keywords															Safe by default with no little or no runtime.	Yes, my project depends on it	4		No	0		3		Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes	Dependency on runtime				Performance	More -betterC support	More/better container classes			std.eventloop		better json serialization	better xml serialization							std.image		std.http																stdx.allocator		stdx.logger							std.outbuffer						std.signals																Lack of an interprocess library like boost.interprocess	Yes	5												Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)			Performance problems	Issues with language feature X (e.g. shared, @property)							Poor GC implementation / performance	Please get that damn runtime out of the way!				dub			D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat			C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects	Little info on StackOverflow									Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Poor marketing skills by the D community	Opened my mind	On YouTube UTV DConf	As a better C++ and as a compiled Java/Scala	Unfortunately I'm yet to find a real good library in D that I can make use of.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays	Garbage collection								std.parallelism						-betterC		New range functionality (substitute, slide)	toString with output ranges	Deprecation of the integral promotion for unary operators														Cross-compilation with LDC	newCTFE		D is like my ex. I know it's broken, but I still keep coming back to it, cus it has the potential to be the best out there. But unfortunately it doesn't have the right direction and the right people at the moment. Very talented people have already left the community. If only D could get people from C++'s Boost community (like Ion Gaztanaga, Chris Kohlhoff) interested in D, it could be in much much better shape.	Feature: Use . operator for everything like reference, pointers, modules, members, etc. Bug: Lack of real RAII	No, I'm already donating my free time	For once, please break the language (again) and give us a sane D (D3).	Spaces	2018-03-01 02:20:11	2018-03-01 02:50:29	67c06f663e
f0ad7125bffa6ff572d64f51f8ed3a7a	Yes	4					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			4	1) The quality of the documentation was inconsistent; sometimes I had to read the Phobos source itself to know how to use it.  2) Compiler errors; I would spend an hour or so trying to understand why my crazy-simple test application wasn't working to find that it was an issue with the compiler (though every time, there was either an open or merged PR so I just had to wait for the next release). 	3	Python spoiled me.  Many functions are "documented" solely by its definition, assuming that I already know how to use it. Documentation tends to be terse. It is much better than when I began though.		4	4	It looks incredibly busy, but I don't really know what could be improved.	1	2	There is too much information. Click the "Basics" link, and my first thought upon seeing the list is "not reading that." The "overview" seems to have become a book; instead of documenting every feature, there should be a series of stops.  Start with the very first example, with the sorted chained array. That introduces modules, the type system, and ranges. There's no real need to have a full page to cover each one - the next step can show another type or two and teach functions (and use another range), and later on in the tour show creating range objects, etc.  Each step can build on the previous, focusing on simplicity rather than being an exhaustive data dump. But rather than throwing all of that out, there might be content in the tour that could be moved to the module documentation in Phobos.	1	Always great content		5	D Forum							5	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications										Automation, report generation	Official Windows .exe installer						d-apt Debian/Ubuntu		Homebrew					I compiled D from source				2.077.1 (latest LDC)	2.076.1 (static foreach)												Linux	macOS	Windows	BSD-variant						dmd		dub	make				reggae	Yes, I work with D part time	vim / neovim		4	0			I have yet to find something that hasn't been previously reported.	4	Lower memory usage.	It's awesome, but I miss a few features					named arguments											UDAs for function parameters (is that what H is supposed to be?)	No			Yes	2	3	4		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket			The organization of the code sometimes seems strange.							Slow				better json serialization						std.decimal							std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle	std.digest					stdx.logger	std.functional				std.mathspecial		std.outbuffer				std.random	std.regex	std.signals		std.stdint		std.system				std.uri			std.variant		std.xml	std.zlib	std.zip		Yes	5											Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							If this is what the rest of the #14 questions are getting at, they're badly worded. I do think some of those things are weak points, but they don't discourage my use of D.	Productive, Expressive, Fun	Discovered via search engine. I think.	I was looking for a replacement to Python	That would depend on whatever project I'm working on...		Mixin	CTFE (static if, static foreach)					Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests			Garbage collection		Contracts				Multi-paradigm																													Every time I work in another language, 20-30 lines in I miss D.			i. Other: I donate to OSS projects I use in income-generating projects. If/when I have a D project generating revenue I'll be donating to the foundation.	Meh, I don't care.	2018-03-01 01:07:51	2018-03-01 02:23:18	0c41e700e8
d34ff7214f5b0456e1e2ff6884bf48bb	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker			d-idioms		4	Compiler bugs, strange behaviors from seemingly innocuous statements	3	Some modules, like std.variant are comparatively underdocumented, while others have pages of documentation.	3	3	4	The 'used by' and 'dconf' banners seem almost out of place, and incongruous with the other, more minimal elements.	0			1	Mostly great content	A consistent posting schedule, or posts that are most focused on particular parts of the language (implementation, community updates, the like) are too rare to foster consistent viewership. Navigation could also be improved to make viewing older entries less of an exercise in scrolling.	3	D Forum		#d on StackOverflow					3	Yes, I like StackOverflow.		Yes, it was a regression.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications								Kernel Development			Official Windows .exe installer																2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows					Embedded				dub						No	Visual Studio + VisualD		2	0			Disparate account management	3	Stricter error checking	It's awesome, but I miss a few features	Template semantics are sometimes mystifying, providing behaviors that do not correlate with their visual expression in code.			in-place struct initialization				multiple alias this		@mutable in immutable		writing files at compile-time	UFCS for local symbols	Static inheritance			Yes, but only for experimenting/testing/debugging	4		Yes	1	3	2		Auto-decoding for strings			Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc				More/better container classes				@nogc containers													std.base64	std.bigint		std.compiler	std.complex		std.container		std.csv		std.demangle						stdx.logger			std.json		std.mathspecial					std.process				std.socket	std.stdint		std.system									std.xml	std.zlib	std.zip	Move lesser-used modules into a dedicated repository so that they can be explicitly included in a project, but otherwise declutter and focus the attention of most library developers on the most frequently trafficked modules. Shrink the sizes of some modules, moving rarely used functionality into aforementioned external repositories.	No, but to other D repositories				Time is my only enemy	Personal laziness			High barrier to entry				Nothing												Compiler regressions	Poor compiler error messages				Non-enterprise IDE support	Poor debugging		DLL support on Windows				Nothing										Less corporate support (including jobs) than other languages		Few showcases / flagship projects							Nothing.							With the advent of Rust, D's advantages in memory security are greatly diminished. An alternative emphasis may be required to push D to the forefront.	CTFE's your friend	Google	I wanted something other than C++	Derelict		Mixin	CTFE (static if, static foreach)						UFCS																		static foreach	opt-in GC and runtime										Reproducible builds													newCTFE		Safer than C++, prettier than Rust	Dynamic array literals	Maybe, I'm still a student		Spaces	2018-03-01 01:28:32	2018-03-01 02:12:35	19547664b7
2d457483b9c8e848325a0c838008f303	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification	#d IRC on freenode		"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			3	The D specification could use some more realistic samples, and the library reference can be very difficult to grok. 	2	It's very thorough but feels like it was written for a computer to parse. Some more real-world snippets would help out, as would reorganization. 		4	4	It's not bad. 	1	4	It is a very good starting point, some areas can be fleshed out a little more, but the included links to other sources like the wiki help out there. 	1	Always great content	I love the blog! 	4		#d on IRC						5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly				DevOps	Security					Kernel Development			Official Windows .exe installer			Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows					Embedded		dmd	rdmd		make					Yes, I work with D part time	Sublime		4	0			The few times I've thought I discovered a bug, and asked about it in the forum or IRC, it turns out it was just unintuitive language behavior. 	4	Better error messages. 	It's ok	A lot of neat features have been added since the D2 split that are helpful but result in very hard-to-read code, like lambdas, and some of the range stuff (this is more of a library complaint). 													Static inheritance			Yes, my project depends on it	4	I find myself having to go to the specification for "how to do X" questions. 	Yes	3	0	1				Poor naming choices			Fear to do breaking changes		@safe for all modules	@nogc			More -betterC support	More/better container classes				@nogc containers			std.graph									Std.algorithm, anything range-related. Lots of great functionality but completely unintuitive, for me at least. 	std.base64	std.bigint		std.compiler					std.csv			std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional				std.mathspecial	std.meta	std.outbuffer													std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows		std.zlib	std.zip	1. Easy to use container classes for scripting-type stuff. Doesn't have to be super fast or efficient.  Would prefer good OO design principles. 2. Better documentation  3. Better documentation 	No, but I want to to				Time is my only enemy				High barrier to entry					Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC						Poor Phobos (Standard Library) documentation		Poor compiler error messages									D's dependence on a large and bulky runtime					Virtual by default	Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library				Less corporate support (including jobs) than other languages		Few showcases / flagship projects							Nothing.								Not perfect yet	Dr. Dobbs article on the news stand in a grocery store. Around 2003 I think. 	I was and am frustrated by other languages, D offered a cleaner more sane syntax and safer code. It's gotten safer since then but maybe the syntax is a little less sane. Still better than the alternatives.	Std.datetime						Performance		Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates			In, out, ref parameters	@safe strings + arrays	Garbage collection									static foreach	opt-in GC and runtime				-betterC														New third-party applications (e.g. Tilix)							Still better than anything else out there! 	Template bloat/error messages	Yes, just tell me how	I love D, it's fun to write, but getting hard to read. 	Tabs	2018-03-01 01:27:21	2018-03-01 02:02:11	e67f8e3cbd
2598e5fc82c4d0130f29798116ef5bcd	Yes	3															3		2	Not being able to go to source code from documentation. For each symbol. Having a goto module source code link is kind of meaningless when you have modules that are thousands of lines of code. 	3	3	3	A better forum that allows editing of posts, with syntax highlighting for code. I don't know how a programming board can exist without allowing for code snippets to be posted with syntax highlighting.	0			0			2						I don't need help		3	No, improve DFeed.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development		Embedded Systems																		I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows		Android												python script	No	Visual Studio Code		3	1	1	Is the wild west, completely unmanaged. Anyone can post anything they want on there, no matter how irrelevant it is. It shouldn't be a wishlist, but a list of things that actually need to be done. "If you care enough you'll be able to find what you need" sort of mentality just illustrates that something is wrong with the system. How the issues end up being used is someone posts an issue they have and then goes and fixes, or creates a fix for it first then posts the issue and then created the pull request for the issue. That's how it seems to be mostly used. The only other issues that actually get attention are regressions.		3	Implicit constructors for structures.	It's ok		tuples		in-place struct initialization				multiple alias this									No	4		Yes	1	3	3		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc				More/better container classes				@nogc containers													std.base64	std.bigint		std.compiler	std.complex	std.concurrency			std.csv			std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json		std.mathspecial		std.outbuffer	std.parallelism	std.path	std.process		std.regex	std.signals	std.socket	std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	1) Remove auto-decoding 2) Make sure auto-decoding is never added again 3) Make sure no one else adds auto-decoding again	Yes	2	Pull request was left alone for months with no one explaining what was wrong with it or why it wasn't merged.													Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC							Compiler regressions						Poor debugging		DLL support on Windows					Auto-decoding of strings																							Wrong decisions at the management level			ctfe fast gc	reddit	self-taught	n/a			CTFE (static if, static foreach)					Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates									import("myfile")																						Deprecation of the comma operator							newCTFE			auto-decoding	No, I don't like the management of the DLF		Spaces	2018-03-01 01:04:05	2018-03-01 01:51:14	4c5f028cb8
6e1d507a57031fdd5063fd173d0397ad	Yes	4							D Forum: Learn								3		4			4	5		1	5		1	Always great content		5	D Forum							5	No, the D.Learn forum is fine.	Easier way to search the learn forum	Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly							Big Data				Science/Research															I compiled D from source				2.077.1 (latest LDC)												LDC	Linux	macOS	Windows									dub						Yes, I work with D part time			2	1	3			4	Better error messages for thing that are only slightly wrong e.g. typos causing template error message	It's awesome - keep it as is																				Yes	2	5	5		Auto-decoding for strings	Auto-decoding isn't nothrow				Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance		More/better container classes		I'm happy as is.																		std.compiler													stdx.logger	std.functional				std.mathspecial		std.outbuffer				std.random			std.socket	std.stdint		std.system				std.uri		std.uuid			std.xml	std.zlib	std.zip		Yes	4	Some times feedback takes a while																						Compiler regressions	Poor compiler error messages												Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages																	Productive Sane Fast	Looking for C++ replacement			Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance		Readable syntax					Templates		Built-in unittests		@safe strings + arrays										static foreach			Templated vector operations							Back referencing of mangled symbols		Removed prelude assert for constructors & destructors			Runnable examples on dlang.org							DCompute	Cross-compilation with LDC	newCTFE			Auto-decodeing strings	Maybe, I'm still a student		Meh, I don't care.	2018-03-01 01:17:58	2018-03-01 01:38:34	fd467167d4
e3315208b2ea21b598b002d612ca57cd	Yes	3					Language specification										3	compiler bugs (I learned while D 2 was still in beta)	4			4			0			0			4	D Forum							4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly																Official .deb packages										I compiled D from source		2.079.0 (nightly)	2.078.3 (latest)	2.077.1 (latest LDC)									2.068.2 (last C++ release)			LDC	Linux	macOS	Windows		Android	iOS						dub							Intellij		2	1	3			3	reasonable memory and CPU use for templates and CTFE	It's ok	inappropriate default attributes, inability to explicitly negate some attributes	tuples						multiple alias this			static break									Yes	2	3	3		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000		More -betterC support	More/better container classes				@nogc containers					std.i18n		std.decimal																																																				Yes	2	It's very hard to get significant improvements to D's weakest areas accepted, because of concerns about breaking changes and/or excessive complexity of proposed solutions. As a result, broken stuff just stays broken.											Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems	Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000				Compiler regressions		Poor GC implementation / performance								D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language													Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level			work in progress	from an old game programming book	saner than C++	Phobos			CTFE (static if, static foreach)			Performance			UFCS			Simple, but powerful module system	Templates		Built-in unittests									Multi-paradigm			static foreach	opt-in GC and runtime																									it's expressive, fast, and easier to use than similar alternatives	meta-programming is three incomplete, buggy, overlapping system (templates, CTFE, and string mixins) instead of one polished, unified design		D will always be plagued with technical debt and accidental complexity unless a version 3 is designed with the focus upon consolidating the feature set in a more principled, simplified, and integrated fashion. Valuable lessons can be learned from D 2's troubles, but many can't be applied without massive breaking changes. Embrace it.	Spaces	2018-03-01 00:48:11	2018-03-01 01:30:38	753cd90546
b0ea798f4617296066bbd10f47e011b8	Yes	5					Language specification										2	dlang is not so major in Japan. There is no evangelist.	4	I want the tree of modules to be kept open. I want a list of modules and summaries. I want a reverse index for modules specific to usage such as getopt and curl.	4	4	5	I want information on the development tool more easily noticed.	1	4	I would like to create a library tutorial in the same format. More easily.	1	Mostly great content	Some contents are not interested. I like features introductions such as mir, betterC and GC. I would like a summary of what happened in forums and communities once in a few months.	4							Twitter	5	I don't care.	Personally, Twitter is good. In Japan, # dlang is often attached to ask questions. It may be good to have a dedicated tag.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications									Science/Research		Official Windows .exe installer																2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows		Android		WebAssembly					dub						No	Visual Studio Code		4	1	3	It is troublesome to look for similar issues. It is troublesome that the reproduction code is text based. As a developer, I'd like to make a repository with github, just write a key in README.md and submit a link.		5		It's awesome, but I miss a few features	immutable is too long. In the lambda expression, () => {} returns a delegate.				named arguments					@mutable in immutable							No	4		Yes	4	3	3				Poor naming choices	Old modules like std.outbuffer or std.socket						DIP1000	Performance		More/better container classes					better json serialization			std.database	std.i18n		std.decimal														std.csv																std.parallelism																						No, but to other D repositories			Finding good issues to get started		Personal laziness										Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)		Lack of advertisement				Poor compiler error messages				Non-enterprise IDE support	Poor debugging										Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects					Few transition guides from programming language Y		Nothing.								Used as a hobby since D1	Maybe 2008	I'm tired of C ++	mir gtk-d gfm derelict-X rx	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits			Readable syntax	UFCS				Templates		Built-in unittests			Garbage collection									static foreach								toString with output ranges										New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)			DCompute	Cross-compilation with LDC			Experience, Productivity	static foreach	Yes, but only for a specific project		Tabs	2018-02-28 22:26:09	2018-03-01 00:57:10	435e914409
ec5a1e84045f963b02b71fc86e4eea6f	No, I have never used D			Garbage collection, Rust.												did not learn D		never tried learning it.			1	4	4		0			0									I don't need help			I don't care.			Go ahead and break code, even for the "little things", but do so through a gradual, managed process.				IoT																						I didn't install D																				Windows		Android			Embedded										No	emacs			0																																																																																																																																																																																																																																						2018-03-01 00:32:46	2018-03-01 00:38:55	f1ba6f75be
e1acd2beded9bde78f264038e2494e4b	Yes	4			"The D Programming Language" by Andrei Alexandrescu											stackoverflow	3	googling for answers	4		4	4	3	I don't remember ever landing on the front page of dlang.org	0			1	Mostly great content		3			#d on StackOverflow					4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly						Game Development									Official .rpm packages														2.078.3 (latest)													DMD	Linux									dmd		dub						No	Intellij		4	0				5		It's awesome - keep it as is																				No	3	3	1						Reliance on the GC				@nogc			More -betterC support			I'm happy as is.															std.base64	std.bigint	std.bitmanip	std.compiler	std.complex		std.container	std.conv	std.csv	std.datetime	std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json	std.math	std.mathspecial	std.meta	std.outbuffer		std.path			std.regex	std.signals					std.traits	std.typecons	std.uni		std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to										I am just starting to learn D							Dependence of some language features + Phobos (Standard Library) on the GC					Nothing							Non-enterprise IDE support							Nothing										Less corporate support (including jobs) than other languages			Little info on StackOverflow						Nothing.								the best C		Seemed the best middle ground between Java and C									Readable syntax		-betterC	Closeness to C/C++	Simple, but powerful module system																opt-in GC and runtime				-betterC																							Yes, just tell me how		Spaces	2018-03-01 00:16:00	2018-03-01 00:35:19	4636acc7db
f4d3dd0cb1ecadc8e5a99bcf9cb47a00	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org			D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		4	Outdated/wrong documentation & difficulties with 3rd party libs 	3	Quite abstract and not a lot of docs (getting better though...)	0	3	3	A bit confusing for newbies. Prime focus seems to be on CT, not RT.	1	4	Not complete enough	1	Always great content	Nada!	5	D Forum							5	No, improve DFeed.	No	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly		Desktop applications		DevOps	Security			Embedded Systems					Official Windows .exe installer																2.078.3 (latest)	2.077.1 (latest LDC)												DMD			Windows							dmd	rdmd	dub						No	Visual Studio + VisualD		4	0			Not expert enough in D	4	DLL support for Windows 	It's awesome, but I miss a few features	Const being transitive is fine/good, and I support the lack of 'head-const' (like C++ const). But 'tail-const' (or 'head-mutable') is required for ranges. I see 'const' and 'tail-const' as 2 concepts (especially in D), and not 1 being a specialization of the other. 							multiple alias this									No	4	It is ok.		2	3	3		Auto-decoding for strings				Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance		More/better container classes	Better signal+slots or equivalents. And std containers (list, queues, etc)			@nogc containers	better json serialization	better xml serialization		std.database	std.i18n				std.image	std.drawing (2D)				std.bigint		std.compiler	std.complex						std.demangle		std.encoding			stdx.checkedint		std.functional			std.math	std.mathspecial															std.uni	std.uri		std.uuid						Lack of Containers, lack of 'tail-const' to allow better const abstraction of ranges	No, but I want to to			Finding good issues to get started		Personal laziness			High barrier to entry			I am along time lurker but want to get more into D		Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000							Used only for my own hobby projects; would LOVE to be able to use at work		Non-enterprise IDE support		dub	DLL support on Windows				Nothing															Lack of good examples / tutorials							Lack of progress on DIPs				Needs better support on the Win + IDE front. It is impossible to convince managament in your typical Win shop to take D seriously with the current level of tooling.	Won.der.full!	Stumbled across it on the web. - D1 days!	Walter's rationale for D compared to C++ (on the early D website) matched my own experiences with C/C++.	std.concurrency	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays				Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library	Templated vector operations				New range functionality (substitute, slide)	toString with output ranges			Reproducible builds				Runnable examples on dlang.org					vibe.d 0.8			Cross-compilation with LDC	newCTFE		It is C++ done right. And I have to work in C++,  so my nights on D is won.der.full!	Difficulty in debugging CT features.	Yes, but only for a specific project	The D community is won.der.full! 	Tabs	2018-02-28 23:27:01	2018-03-01 00:20:00	483d9b4ce8
3a91852e004b75f532738af15cf33ef4	Yes	4							D Forum: Learn	"Programming in D" by Ali Çehreli							3	Development tools, real world code to look at. I think development tools are in a much better state then when I started.	3	Lack of examples, use of auto makes it hard to understand return types.	4	4	4	It's fine, I rarely look at it as I just go directly to forums.	0			0			4	D Forum	#d on IRC						4	No, the D.Learn forum is fine.	None	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications																		Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux											dub	make					No	Visual Studio Code		5	0			Nothing	5		It's awesome - keep it as is																				Yes	5	4	5								Lacking features, some modules are poor in quality and need improvement							Xml, improved json, add standard logging 				better json serialization	better xml serialization		std.database	std.i18n						STD.logging		std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle	std.digest			stdx.allocator	stdx.checkedint								std.outbuffer							std.socket											std.windows				Match JDK in terms of breath of API	No, and I don't plan to				Time is my only enemy				High barrier to entry				Nothing														Poor GC implementation / performance		Nothing								Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects			Lack of good examples / tutorials					Too much low-level focus (C/C++)			Lack of focus at the management level	Wrong decisions at the management level		Stop trying to make D all things to all people. It needs a laser like focus on use cases that make sense for the language and fit direction management want to take it. Personally I wish we would focus on D as an application language like Go or Python and not a systems language like Rust. I could care less about it replacing C or C++, I do care that people use it to write apps which isn't happening IMHO.	Simple yet powerful	Internet	Good fit for app I wanted to write. 	GtkD	Ranges & std.algorithm	Mixin			std.traits							Simple, but powerful module system	Templates					Garbage collection																																		Memory safety features	Native compilation with GC	UCFS and auto because they feel ambiguous.	Maybe, I miss accountability at the moment	I really appreciate the efforts of everyone who volunteers to make D better. I may not always agree with the decisions that are made but I am confident that those decisions are being made with the best of intents.	Spaces	2018-02-28 23:36:32	2018-03-01 00:04:27	57799b9c8d
fd6a68dbb1d17d2a5c0320f2e7fb0471	Yes	4					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		5		3	lack of examples lack of human touch - seems to be autogenerated at some places	0	4	5	a proper forum instead of NNTP wrapper would be nice	0			1	Always great content		5	D Forum							5	No, improve DFeed.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development	Desktop applications				Game Development							Official Windows .exe installer					Official dlang.org/install.sh script				Gentoo							2.078.3 (latest)													DMD	Linux		Windows				WebAssembly					dub						No	vim / neovim		4	1	2	slow responses, + don't like bugzilla in general		4	better error messages	It needs serious work	long function defs const/immutable inconsistency contract syntax slightly bloated 					assert diagnostics	language binding to X										No	4		Yes	3	3	3					Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc		Performance						@nogc containers	better json serialization	better xml serialization													std.bitmanip	std.compiler	std.complex						std.demangle	std.digest				stdx.checkedint			std.getopt			std.mathspecial	std.meta	std.outbuffer													std.uni			std.uuid		std.windows		std.zlib	std.zip		No, but to other D repositories			Finding good issues to get started																				Poor Phobos (Standard Library) documentation		Poor compiler error messages													Attribute bloat							Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages										Too much low-level focus (C/C++)			Lack of focus at the management level						out of curiosity	Derelict								Readable syntax	UFCS			Simple, but powerful module system			Built-in unittests			Garbage collection										opt-in GC and runtime	DMD as a DUB library													Runnable examples on dlang.org				New third-party applications (e.g. Tilix)	vibe.d 0.8						This is the only compiled language worth learning, no viable alternative (for me)		Yes, I'm already doing so	D is awesome!	Spaces	2018-02-28 23:38:17	2018-02-28 23:56:51	646e5c4b51
fbadcb94d9ff84b1b0d840cdc8a21489	No, I have stopped using D		It is not used at work, and I have other hobby languages.		"The D Programming Language" by Andrei Alexandrescu							"Learning D" by Michael Parker					3	I still don't know it all that well. Templates were tricky (I'm used to lisp macros)	2	Not enough examples and holistic concept conveyance	4	3	3	It doesn't communicate the state of long-standing issues in the language, such as GC performance and GC involvement in phobos.	0			1	Mostly great content	Not much, its OK	3		#d on IRC	#d on StackOverflow					3	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development								Machine Learning							Official .deb packages	Official OSX dmg installer		d-apt Debian/Ubuntu																							DMD	Linux				Android	iOS	WebAssembly					dub						No	emacs		3	0				3	Better error messages	It's ok		tuples	string interpolation	in-place struct initialization	named arguments		language binding to X					writing files at compile-time					No	3		Yes	1	2	2						Reliance on the GC			@safe for all modules	@nogc		Performance	More -betterC support				std.eventloop		better json serialization			std.database						std.drawing (2D)					std.bitmanip		std.complex						std.demangle				stdx.allocator	stdx.checkedint							std.meta																								No, and I don't plan to				Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough		Non-perfect C++ integration							Poor Phobos (Standard Library) documentation						Non-enterprise IDE support																																		Getting close now	metafilter.com	C++ is too baroque, Java too restrictive							Performance	Native interoperability with C	Readable syntax										Garbage collection						Multi-paradigm	Functional programming paradigm			opt-in GC and runtime																			vibe.d 0.8						I want a fast and flexible language, something useful from embedded/kernel up to arbitrary heights of abstraction.	GC needs a rewrite	No, I'm already donating my free time	I'm interested in Haskell/Ocaml/Reason. Pattern matching and GADTs would be nice.	Meh, I don't care.	2018-02-28 13:49:02	2018-02-28 23:49:00	92e84b3d03
aaf9b56b5e75adc0a33251a209d2a944																																																																																																																																																																																																																																																																																																																																																		2018-02-28 23:23:32	2018-02-28 23:23:40	3f45dbff21
eeaddc4a8498b923b55d68221995c778	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification	#d IRC on freenode	D Forum: Learn								3	Several compilers, the supposed reference compiler being unbearably slow and buggy	3	Navigation (on each page, and cross-links) is difficult	0	4	4		0			1	Huge variance in quality	Editor's weak technical knowledge is unfortunately rather obvious (showing in inaccuracies, confusingly worded statements, etc.). This might not be important for new programmers, but definitely for attracting people experienced in other languages. (Guest posts are often better; Walter's could similarly use a pass or two by someone aware of programming language design ideas from the last twenty years.)	4	D Forum	#d on IRC	#d on StackOverflow					3	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications						Embedded Systems			Science/Research							Official dlang.org/install.sh script	d-apt Debian/Ubuntu	Arch Linux	Homebrew					I compiled D from source		2.079.0 (nightly)	2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows		Android	iOS	WebAssembly	Embedded			rdmd			cmake				Not applicable	Sublime		3	1	4			3	Caching (incremental compilation) on the template/symbol level	It's awesome, but I miss a few features		tuples	string interpolation		named arguments	assert diagnostics		multiple alias this					UFCS for local symbols				No	2	The most important points (resolution of – possibly circular – forward references, etc.) are precisely the ones not covered.	Yes, but only for some projects	1	5	5		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules			Performance		More/better container classes			std.eventloop	@nogc containers						std.benchmark																																				std.signals												std.windows		std.zlib	std.zip		Yes	4																	Performance problems	Issues with language feature X (e.g. shared, @property)		Effort being wasted on half-baked "solutions" like DIP1000/-betterC instead of pushing the language forward in a principled fashion				Poor compiler error messages			Nothing													C behavior without warning (e.g. signed to unsigned comparisons)						Little marketing / no evangelists	Few showcases / flagship projects											Lack of focus at the management level	Wrong decisions at the management level	No confidence in technical/abstract reasoning ability of part of leadership	Walter's inability to engage in deep technical discussions					Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta		Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates					Garbage collection	Inline assembler			import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach								toString with output ranges	Deprecation of the integral promotion for unary operators	Back referencing of mangled symbols	Reproducible builds						Deprecation of the comma operator					DCompute	Cross-compilation with LDC					No, I'm already donating my free time		Meh, I don't care.	2018-02-28 22:49:27	2018-02-28 23:13:12	e23b761adc
cf565ecf336c9ca2136e73226d27b786	Yes	3					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4	Finding language feature details. LangSpec is pretty scattered. Some details only in 'Articles' not in the spec. Also finding the best way to do something, since D has many tools to solve a problem.	2	Hard to understand how to exactly use the functionality. Usage of 'auto' return type in the docs. The doc generator should expand it. For example, make a type 'placeholder' for templates, auto foo(Key, Value)() in code ---> Value[Key] foo(Key, Value)() in the docs. Sometimes visually noisy presentation (D full func/template signature is pretty bloaty). 	0	4	3	Major D news and development directions could be more prominently displayed.	0			1	Mostly great content		4	D Forum							4	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly		Desktop applications				Game Development								Official tarballs															2.078.3 (latest)													DMD			Windows		Android	iOS											VisualD	No	Visual Studio + VisualD		3	1	1	The fact that you have to have yet another account that you almost never use (I already forgot/lost my accounts password). I sometimes ask about potential bugs on forums/learn and workaround them. Usually someone else then reports it after a few days of silence. Much easier this way :D.		4	Compile-time debugging/error features, e.g. output code to files with mixins expanded etc.	It's awesome, but I miss a few features	1. Usage of '__' in __traits etc. because it's an "extension". In truth you can't code half of the cool stuff without using __traits. It's not an extension. It's necessary core feature of the language. Please remove the __ bs. There's too many ways to do keywords. 2. The design of 'TraitsKeyword' in __traits(TraitsKeyword, TraitsArguments) design seems very organic an incoherent. It's a bit diffcult to work with and remember how to use each keyword. Prime candidate for a small redesign. 3. Turning off attributes and/or define attribute groups to lessen attribute bloat. 4. Template constraint bloat. We could use compile-time/static interfaces for structs. For example, maybe ranges could have just a static interface. Clean and consistent. 5. is expression is pretty horrible, I always have to keep looking docs when using those. 6. Putting function attributes in front of function which completely looks like they're attributes to the return type. 7. Compiler allows weird combinations of keywords which don't do anything.	tuples				assert diagnostics		multiple alias this						Static inheritance			No	2	Info is often scattered around. Not all the details/info is in the spec, but in 'articles' or off-site.	Yes, but only for some projects	1	2	1		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes			@nogc		Performance		More/better container classes				@nogc containers	better json serialization		std.graph			std.benchmark		std.color	std.image	std.drawing (2D)	Improvements to parallelism		std.base64			std.compiler	std.complex		std.container		std.csv		std.demangle					stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer						std.signals	std.socket			std.system				std.uri		std.uuid		std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to				Time is my only enemy	Personal laziness	No roadmap		High barrier to entry										Performance problems	Issues with language feature X (e.g. shared, @property)					Compiler regressions	Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows					Auto-decoding of strings	Attribute bloat	Virtual by default					Nothing														Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Tooling and polish on the very basics (at least on windows). Cool features are nothing if the basics don't work. D is behind C++ considerably (it's not always easy in C++ either) 1. Missing/bad debug symbols 2. No DLL support. 3. Poor scaling to big projects (parallel/incremental compilation, memory issues etc.) Sometimes using D on windows feels like C++ in the late 90s. Poor tooling is the reason I wouldn't recommend D to my coworkers.	Flexible Fun C++	From a friend a decade ago.	Just for fun.	Derelict			CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C		UFCS		Closeness to C/C++		Templates													alias this, opDispatch and the sum of all the little convenince things (which is also why all the little warts should be fixed/purged, warts lead to cancer).	static foreach	opt-in GC and runtime		Templated vector operations							Back referencing of mangled symbols		Removed prelude assert for constructors & destructors	DMD support for AVX2				Deprecation of the comma operator					DCompute	Cross-compilation with LDC	newCTFE		D is definitely more fun to code than C++, so I use it for all my home/hobby projects instead of C++.	the const system. After trying to use it for a while I felt that it's more trouble than worth. I've completely stopped using const/immutable. Somehow the pieces don't quite seem to fit together properly.	No, I'm not interested into D	I'm worried that D is turning into D++, because of all this anti- fix/redesign/polish attitude from the D leadership.	Spaces	2018-02-28 20:56:38	2018-02-28 23:06:33	c54852575c
4b6bb072ffc201f98cb85e610ebe573c	Yes	5			"The D Programming Language" by Andrei Alexandrescu												5	is()	4	needs more examples	0	4	4		0			1	Always great content		4	D Forum	#d on IRC					Discord	5	I don't care.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development								Official tarballs														2.079.0 (nightly)	2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows		Android		WebAssembly			dmd	rdmd	dub						Not applicable	Sublime		3	1	5			4		It's awesome, but I miss a few features						assert diagnostics		multiple alias this						Static inheritance			No	4		Yes	2	4	5					Old modules like std.outbuffer or std.socket		Fear to do breaking changes				DIP1000			More/better container classes			std.eventloop		better json serialization					std.benchmark							std.base64	std.bigint		std.compiler												stdx.checkedint						std.mathspecial		std.outbuffer						std.signals		std.stdint								std.uuid	std.variant						Yes	5																						Poor Phobos (Standard Library) documentation	Compiler regressions	Poor compiler error messages							DLL support on Windows									C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library				Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs	Lack of focus at the management level								Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library						toString with output ranges	Deprecation of the integral promotion for unary operators		Reproducible builds			Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org		Deprecation of the comma operator				Colorized error messages		Cross-compilation with LDC	newCTFE				Maybe, I'm still a student		Tabs	2018-02-28 22:58:47	2018-02-28 23:06:17	ed7de1ed96
cb7ee30f34e9107e635d23f4ba4a6927	Yes	4					Language specification										3	There were far fewer resources back when I learned. From what I can tell this has been addressed significantly.	3	Some functions/classes still have little documentation or no examples.	3	4	5		0			0			3	D Forum					I don't need help		4	I don't care.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily									Machine Learning		Science/Research					Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux											dub						Yes, I work with D full time	Visual Studio Code		4	0			Haven't found one! I have opened a couple of issues in the LDC github bug tracker	4	Better performing CTFE	It's awesome - keep it as is																				Yes	2	3	4					Old modules like std.outbuffer or std.socket							Performance		More/better container classes				@nogc containers			std.graph						std.image	std.drawing (2D)		std.csv	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency					std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger							std.outbuffer			std.process		std.regex	std.signals	std.socket	std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip		Yes	5														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration						Nothing							Non-enterprise IDE support													Ugly bits of the standard library			Fewer third-party libraries than other language										Nothing.									Google	I was sick of using C++	dopt	Ranges & std.algorithm																							Multi-paradigm			static foreach	opt-in GC and runtime	DMD as a DUB library	Templated vector operations										DMD support for AVX2													I'm still sick of using C++	CTFE	Maybe, I'm still a student		Tabs	2018-02-28 22:50:23	2018-02-28 23:06:10	0de549d625
952113ee37e06bba47a7c5764d063aae	Yes	4					Language specification	#d IRC on freenode									5	Weird things like AA keys as strings getting clobbered	4	Sometimes the examples are unrealistic or very obviously just unit tests and really don't help to explain how or when to use something	3	4	4	Nothing really	0			1	Always great content	Unfinished series	4		#d on IRC						5	Yes, I like StackOverflow.	I like to use IRC because it's fast and easy	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications				Game Development					Science/Research	The secret is that I don't, but I selected the things I do most	Official Windows .exe installer			Official .deb packages						Gentoo							2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows							dmd	rdmd	dub						Not applicable	Visual Studio + VisualD		3	0			Lack of time to see if my issue is something I did or if it's actually something on D's end	4	Reduced memory consumption (dmd)	It's awesome, but I miss a few features	I'm not a huge fan of the cast syntax, but I've seen worse (C++)		string interpolation				language binding to X										Yes, but only for experimenting/testing/debugging	4	Not much, I just wish compile-time stuff was a little more like the everyday runtime D code. Aliases, enums--it all gets very confusing to generate code.	Yes	3	3	5		Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices			Fear to do breaking changes	std.algorithm is the one module that to me, by far, has some of the least intuitive names. For example, what do I do if I want to filter an array by another array? I'm not even sure if there's a one-off function to do that; C# LINQ has the very intuitively named "Except", e.g a.Except(b)						More/better container classes	std.regex that doesn't bloat compile time so massively				better json serialization	better xml serialization	std.graph			std.benchmark		std.color	std.image	std.drawing (2D)	std.stream. how long has it been now???	As mentioned earlier, although I love it, std.algorithm		std.bigint			std.complex											stdx.checkedint	stdx.logger																													File streams that did type conversion for me would be really nice. Memory streams would be nice too. C# is a great example of this.	No, but I want to to			Finding good issues to get started	Time is my only enemy	Personal laziness								Language complexity (e.g. inout, abuse of mixin)								I checked language complexity because I find "inout" confusing, and generating mixin code is like a whole different language (like the C preprocessor).					Poor GC implementation / performance	In D, I hope the GC won't become a problem. In C#, the GC isn't something I ever need to think about. In C++, I manage my own memory. I have no problem with the GC being there, just that I have to be actively aware of it to make sure it isn't doing something stupid is cumbersome.			Poor debugging		DLL support on Windows			I really would like DCD's amazing functionality in VisualD		Auto-decoding of strings						Sometimes when I need to parse text, the thought of auto-decoding pushes me to use some other language. I really wish it wasn't there; I'll decide when to decode, thank you!		Fewer third-party libraries than other language			Few showcases / flagship projects			Lack of good examples / tutorials							Lack of progress on DIPs				Nope, not really.	C++ (pretend that's one) but good.	List of programming languages on Wikipedia	It seemed like the perfect middle ground between C++ and C# I had always wanted. Its compile time functionality is out of this world.	jsonizer	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler		Debug attribute		std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking	-betterC								DMD support for AVX2	Automatic compilation of imports (dmd -i)			Deprecation of the comma operator						Cross-compilation with LDC	newCTFE		Ease of use and constant improvement	Regex compile times, Windows linker shenanigans, AA string keys needing .dup to avoid stomping (has that been fixed?)	Maybe, I'm still a student	I'm only critical because I love D so much! It really is otherwise a dream come true!	Tabs	2018-02-28 22:02:46	2018-02-28 23:01:17	59fed60e33
bf564630a1cefcdac1d57787b1370c5a	Yes	5					Language specification							"D Cookbook" by Adam D. Ruppe			4	Some key "aha" moments like how GC work, or how slice capacity work, or what the runtime does.	4	More code examples would help I guess.	0	5	4	front page examples are comically complicated	0			1	Huge variance in quality	It's always about D :)	4		#d on IRC						4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications															Official OSX dmg installer										Windows zip installer						2.074.1 (compile-time format checking)									LDC	Linux	macOS	Windows			iOS						dub						Yes, I work with D full time	Sublime		4	1	5			4	Improve the basics further: faster code, compiler faster.	It's awesome - keep it as is																				Yes, but only for some projects	2	2	2				Poor naming choices								Performance								better xml serialization										std.datetime	std.base64		std.bitmanip			std.concurrency					std.demangle	std.digest				stdx.checkedint			std.getopt			std.mathspecial	std.meta	std.outbuffer						std.signals	std.socket							std.uri					std.xml			It tend to grow bigger over time, larger, build slower	Yes	4	Lots of compiler bugs too difficult for me										Nothing												Compiler regressions				Nothing								Nothing											Little marketing / no evangelists	Few showcases / flagship projects													Some of the management focus sometimes looks strange.	For the longest time people actively mocked you if you use D, and discard it without trying. Not sure why exactly.	it's liky flying	Original spec	First contact with C++, looking for a pascal replacement	derelict-util			CTFE (static if, static foreach)			Performance		Readable syntax							Built-in unittests				Inline assembler			import("myfile")						opt-in GC and runtime		Templated vector operations															New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)						newCTFE		There is no alternative	DMD backend regressions	No, I'm already donating my free time	Thank you for making this study.	Spaces	2018-02-28 22:39:16	2018-02-28 23:00:10	f6cecae4db
640c9acbaea1f352787f0237483009f0	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe			3	- language specs being inconsistent or not enforced by compiler (issues have improved considerably  over last years) - phobos specs: massive footprint of signatures and overloaded functions make it difficult to identify the very (templated) function I'd need/want and how to use it. many more usage examples are needed.	3	- massive footprint of signatures and overloaded functions make it difficult to identify the very (templated) function I'd need/want and how to use it. - many more usage examples are needed.	0	4	4		0			1	Always great content		4	D Forum							4	No, the D.Learn forum is fine.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly		Desktop applications									Science/Research																.7z package for Windows					2.075.1 (removed built-in .sort)										DMD	Linux		Windows							dmd								Not applicable		Geany	3	1	3			4	better error messages	It's awesome - keep it as is																				Yes	2	3	1		Auto-decoding for strings		Poor naming choices			Fear to do breaking changes			@nogc								@nogc containers		better xml serialization										strings: where is the function i need? std.algorithm? std.range? std.array? std.string? std.uni? std.utf? std.format? std.ascii?	std.base64			std.compiler	std.complex													std.functional		std.json												std.stdint						std.uri			std.variant					- consistent naming convention WRT eager/lazy variants - autodecoding of strings - finish allocators and logger and move from experimental to std.	No, and I don't plan to				Time is my only enemy				High barrier to entry									Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems					Poor Phobos (Standard Library) documentation		Poor compiler error messages			Nothing									Auto-decoding of strings	Attribute bloat	Virtual by default		C behavior without warning (e.g. signed to unsigned comparisons)													extremely poor quality of documentation of 3rd party libs: rather roll my own for small use cases, high threshold to use big libs like gtkd, anything mir; also: not all libs support all plattforms/windows				Lack of progress on DIPs				with the MGMT refusal of breaking changes, D is stuck at being an 'almost' great language, i.e. there is not real incentive anymore to get rid of the 'almost'		announcement of D2 on IT news website	1. because it is not C++ (great module system, no header files, sane templates, compile time reflection and code generation) 2. some task can be accomplished as easy as with python, but with better/faster code		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)							Debug attribute	import("myfile")		Multi-paradigm			static foreach	opt-in GC and runtime									Back referencing of mangled symbols				Automatic compilation of imports (dmd -i)			Deprecation of the comma operator						Cross-compilation with LDC				- C integer promotion - limitations of alias - C style switch statement (should have been replaced by something sane)	Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 21:32:21	2018-02-28 22:51:22	8d44d1b42d
2d500b171db56032dd625e9f42b556b6	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli			"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	Out of date or unmaintained libraries	4	UX	0	4	5	Comparison with go, rust	0			1	Mostly great content		2	D Forum							3	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development	Desktop applications	IoT		Security																					I compiled D from source		2.079.0 (nightly)														DMD	Linux	macOS	Windows							dmd		dub	make					Yes, I work with D part time	Visual Studio Code		3	1	1	Issue are not handled if not driven by kol		5		It's awesome, but I miss a few features	I miss strong typedef	tuples		in-place struct initialization	named arguments											Typedef	No	4		Yes	4	4	4					Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc									better json serialization	better xml serialization																																																			std.variant					Better template errors	Yes	1	Ignored PR												Missing language feature X / not moving fast enough								Nothing								Poor debugging											C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages														Wrong decisions at the management level			Early adopter, but lost interest	Forum, 2004	Looking for a better C++	Botan	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C					Simple, but powerful module system			Built-in unittests										Functional programming paradigm			opt-in GC and runtime		Templated vector operations																		Colorized error messages					I know it	259	Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 14:46:24	2018-02-28 22:49:38	7cd977abfd
5e3e600aedda2eeb05800e17570fb62c	Yes	4					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		3	weird keywords (pure nothrow @safe @system @trusted...)	4	sometime incomplete 	0	3	4	weird font,	1	4		0			4	D Forum					I don't need help		4	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications				Game Development		Embedded Systems					Official Windows .exe installer					Official dlang.org/install.sh script											2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows		Android			Embedded				dub						No	Visual Studio Code		4	1	5			4	dont use 2gb for compiling vibe lol	It's awesome, but I miss a few features	I dont differences between kewords, some have @ and some doesnt, its really weird. Also, I dont like lowercase file names						language binding to X								Nothing - D is already awesome		No	4		Yes	5	6	5	Nothing - Phobos (Standard Library) is great					Reliance on the GC	Fear to do breaking changes			@nogc		Performance					std.eventloop	@nogc containers		better xml serialization		std.database	std.i18n																																																					easy @nogc containers	No, but to other D repositories			Finding good issues to get started									Nothing														Poor GC implementation / performance				Poor debugging						Nothing											Little marketing / no evangelists								Nothing.							I hate the ugly lowercasefile.d, when u come from c# or java my eyes cant read that, at least put an_underscore.d	fast beautiful easy	google	Really liked the syntax, its like C# but compile natively 	DerelictXX	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests							import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library			-betterC													New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)				Cross-compilation with LDC	newCTFE		Walter and Andrei 	@pure @safe etc..., I use them but honestly it just make code harder to read	Yes, I'm already doing so	im gonna be a millionnaire and give a lot to D foundation	Tabs	2018-02-28 22:33:49	2018-02-28 22:49:23	ce405f1541
9dfabd23230e9ab9ee44b808cceb9792	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										5		5		0	4	4		0			1	Always great content		5						I don't need help		5	No, the D.Learn forum is fine.	No.	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily											Science/Research																DVM		2.078.3 (latest)														Linux									dmd								Not applicable	emacs		4	1	5			4	No more forward-reference errors.	It needs serious work	There are many quirks and unnecessary limitations.	tuples	string interpolation	in-place struct initialization	named arguments											Sum types, parametric polymorphism	No	4	It can be a bit informal.	Yes	3	6	6		Auto-decoding for strings					Fear to do breaking changes	Missing range functions	@safe for all modules		DIP1000			More/better container classes							std.graph					std.color	std.image	std.drawing (2D)	std.actual_containers	std.container	std.base64			std.compiler	std.complex		std.container		std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger		std.getopt					std.outbuffer						std.signals	std.socket	std.stdint		std.system				std.uri		std.uuid		std.windows	std.xml	std.zlib	std.zip	More comprehensive set of range functions. 	Yes	4	Pull request took a long time to pull.										Nothing												Compiler regressions				Nothing									Auto-decoding of strings							Nothing											Nothing.							PL theory.	fast, pragmatic, convenient	university	It seemed like a place where people who like solving practical problems meet.	Phobos	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates			In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler	Contracts	Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm	Community	static foreach			Templated vector operations	Compile-time format string checking			New range functionality (substitute, slide)	toString with output ranges		Back referencing of mangled symbols	Reproducible builds		DMD support for AVX2	Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)			DCompute	Cross-compilation with LDC	newCTFE		Lack of better options.	Forward reference errors.	Maybe, I'm still a student	Nicely-done survey! Tabs or spaces question is missing the "smart tabs" option.	Tabs	2018-02-28 22:19:34	2018-02-28 22:48:28	e5060e13b1
31d118808b3a0c22855064cfa3cfd42b	Yes	3			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			4	Due to its similarities with C, it wasn't particulary hard, but there are a few catches here and there.	4	To be honest, I avoid using the standard library as much as I possibly can.	0	5	4	The 'runnable' code snippets could be a little longer and be more diverse than it is now.	1	4	No complaints here.	0			4	D Forum							4	I don't care.	I don't see why there can not be both.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely						Game Development							Official Windows .exe installer			Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows									dub						Not applicable		Xamarin Studio	4	0			Not having a project complex enough for me to find one.	4	Improvements on the -betterC.	It's awesome, but I miss a few features	I don't understand why __gshared has to have 2 underlines, for instance.			in-place struct initialization									UFCS for local symbols				Yes, but only for experimenting/testing/debugging	5	Nothing.	Yes, but only for some projects	1	3	4				Poor naming choices		Reliance on the GC				@nogc		Performance	More -betterC support					@nogc containers												I don't really know because I avoid using it.																									std.parallelism				std.regex																	Phobos entirely not dependant on GC.	No, and I don't plan to											Not good enough for the task.						Dependence of some language features + Phobos (Standard Library) on the GC					Nothing							Non-enterprise IDE support	Poor debugging		DLL support on Windows		D's dependence on a large and bulky runtime									GC.			Less corporate support (including jobs) than other languages									Nothing.							Its toolchain.	Nice, familiar, fast.	I don't really remember.	Because it has nice features that C (or C++ as a "better C") lacks.	No opinion here.						Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system		Built-in documentation (Ddoc)					Inline assembler		Debug attribute	import("myfile")						opt-in GC and runtime				-betterC																Colorized error messages					It being familiar with C and having a great module system is what drives me to use it more.	GC :)	Maybe, I miss accountability at the moment	Keep the good job, people. D is great.	Tabs	2018-02-28 22:15:18	2018-02-28 22:36:13	91f1b9c1c6
a8bebe85afc60b7613007291a5c186ed	Yes	5					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							3	itvwas hard to understand the templates	3	it would be good to have more ehamples and a better structure. The indexes are not easy to follow	2	3	3	it would be nice if the forum  and the twitter activity wold be more visible	0			1	Mostly great content	it's good... nothing to complain	2	D Forum							3	No, the D.Learn forum is fine.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development		IoT	DevOps				Embedded Systems					Official Windows .exe installer		Official .rpm packages	Official .deb packages	Official OSX dmg installer				Homebrew							2.079.0 (nightly)	2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS			Android	iOS	WebAssembly	Embedded				dub					trial	Yes, I work with D full time	Visual Studio Code		2	0			I need an account and bugzilla  it's not that easy to find	4	better inout support	It's awesome - keep it as is																				Yes	3	3	2				Poor naming choices		Reliance on the GC	Fear to do breaking changes	lack of features	@safe for all modules	@nogc		Performance					std.eventloop	@nogc containers	better json serialization	better xml serialization						std.color	std.image							std.compiler													stdx.logger			std.json		std.mathspecial		std.outbuffer						std.signals											std.variant					seralization modules, better db libraries that can be used with vibe :p	No, but to other D repositories				Time is my only enemy			D community	High barrier to entry								Non-perfect C++ integration						Nothing								Poor debugging				D's dependence on a large and bulky runtime		Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects			Lack of good examples / tutorials					Too much low-level focus (C/C++)							productive fun familiar	my university coleagues	i wanted to have better performance than php	fluent-asserts	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax				Simple, but powerful module system			Built-in unittests			Garbage collection			Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach																				vibe.d 0.8	Colorized error messages		Cross-compilation with LDC			it's easy to be productive	code.dlang.org crashes	Maybe, I miss accountability at the moment		Spaces	2018-02-28 22:01:01	2018-02-28 22:34:31	e6cca68104
c4211446349c97f5e4b656238de59268	Yes	5				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		5	Ranges, functional style D, lambdas.	3	Xref  (comp. adrdox), sometimes expected prior knowledge is too high. 	0	5	5		1	5		1	Always great content	Posts could sometimes be longer. 	5	D Forum							5	No, the D.Learn forum is fine.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications											Official Windows .exe installer				Official OSX dmg installer												2.078.3 (latest)													DMD	Linux	macOS	Windows									dub						Yes, I work with D part time	Sublime		4	1	3	Old fashioned UI, although still functional. 		3	Faster templates	It's awesome, but I miss a few features	Alias this is reversed, inconsistent attributes (@), I keep wishing for struct constructors without arguments. 			in-place struct initialization				multiple alias this									No	4	Sometimes the specification and implementation are not in sync. 	Yes	2	3	3		Auto-decoding for strings					Fear to do breaking changes		@safe for all modules		DIP1000	Performance		More/better container classes			std.eventloop	@nogc containers			std.graph		std.i18n	std.benchmark		std.color	std.image	std.drawing (2D)			std.base64	std.bigint			std.complex				std.csv		std.demangle	std.digest				stdx.checkedint				std.json				std.outbuffer					std.regex		std.socket	std.stdint						std.uri		std.uuid			std.xml	std.zlib	std.zip	More xref and “see also” in the docs. If you work with strings, e.g., some functions are in std.string, others in std.algorithm, std.range, std.conv, std.format, std.xxx.	Yes	4	If you use “improve this page” or the like, the PR is automatically called “patch1” or the like and I am unaware how to change that										Nothing										Nothing						Nothing								Nothing								Nothing										Sometimes you would wish packages on code.dlang to become more mainstream, like phobosx to replace std.signal or reggae to get out of alpha	Nothing.							Important work stalling, like newCTFE. 	Slow steady growth.	Digitalmars.com	The ideas behind the language sounded promising. C++ done right. 	Pegged		Mixin	CTFE (static if, static foreach)		std.traits								Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection						Multi-paradigm					DMD as a DUB library						toString with output ranges		Back referencing of mangled symbols			DMD support for AVX2		Runnable examples on dlang.org							DCompute		newCTFE		Good power/complexity ratio. The feeling that nothing is impossible. Satisfaction about results. 	Incidentally, when a skilled contributor leaves the community for what appears to be social rather than technical reasons. 	No, I'm already donating my free time	I love how much time entheusiasts are investing into D	Spaces	2018-02-28 18:24:54	2018-02-28 22:33:09	02af3c7a4b
396e0174031b95b2c06505c9ee790e9c	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe	d-idioms		3	Both on higher level philosophical issues and on very specific technical detail issues there's a general lack of texts available explaining things. Often the best source would be a random forum conversation from five years ago. This generally works, kinda, but it's a bit different from C++ world :)	3	Most glaringly the structure and typography could be improved a lot, and this would make a big difference.  More generally, I keep having to read the Phobos source code in place of a spec (e.g. most recently on exact copying behaviour when sending messages between threads), and while this works fine, it means I have to know some of D's more advanced features and idioms to use Phobos, which may not be what you want.	0	3	3	It's dreadfully difficult to do more than heckle from the back seats here - working out properly how to market and present D is very difficult.   For what it's worth, D seems to me to be a secret weapon that a very highly skilled and tightly managed team or company can use to perform at a much higher level than their peers. I don't think the average developer should consider it - they're better off learning Java better, or whatever.  In this light, the primary purpose of dlang.org the landing page should probably be to prove to interested but rationally sceptical visitors that D isn't just another fun language design game a small team is playing, but a real, solid, reliable, industrial strength solution that responsible companies choose for production work. It gestures at this with the 'Industry Proven' section, but it's not clear (to the outsider) whether it's just e.g. one guy in Netflix playing with D for some automation, etc.   You could turn these logos into tight case studies that the (above) users would be able to empathise with and take seriously, and it would be much, much more compelling to them.	1	5		1	Always great content	Honestly nothing, it's brilliant. I'd love four times the volume!	2									Yes, I like StackOverflow.	I shouldn't feel this way as I'm far from a novice, but the D forums have always secretly terrified me, and I've never posted there despite reading them every day. It's the same kind of feeling I get reading the odd LKML post from Linus that reaches the outside world: if I were to wade in without being completely sure of my stuff and willing to stand up for myself, a bored regular might wander over and start tearing me apart for being incompetent, even if based on a misunderstanding. I actually don't think this happens much, but the atmosphere feels sufficiently close to that darker side of the software universe that I've instinctively kept away. Which is sad!	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications					Big Data				Science/Research		Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub	make	cmake				Yes, I work with D part time	emacs		3	0				4	I'd never say no to some more helpful error messages	It's awesome, but I miss a few features	Sorry, I'm a Lisper, I'd love me some AST macros, they'd make tons of code much clearer		string interpolation	in-place struct initialization	named arguments								UFCS for local symbols				Yes, but only for experimenting/testing/debugging	3	Sometimes it lags behind the implementation, e.g. for extern (C++) (or IIRC it did when I was working with it). It's also sometimes surprisingly difficult to navigate, though I can't quite put my finger on why.	Yes	5	5	5								Adding a second module like std.json2 beside v old ones and deprecating the old one would be best for me	@safe for all modules	@nogc	DIP1000	Performance	More -betterC support				std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database			std.decimal	std.color	std.image				std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial	std.meta	std.outbuffer						std.signals	std.socket	std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid		std.windows				Update some of the old modules designed for a much older D (e.g. std.json).  Let me use more in -betterC.	No, but I want to to			Finding good issues to get started	Time is my only enemy				High barrier to entry				Nothing										Nothing									dub			D's dependence on a large and bulky runtime															Little info on StackOverflow		Lack of good examples / tutorials											There is likely a tension between creating the best possible language and achieving widespread commercial uptake for D. Walter, Andrei etc. seem to understand this very well, e.g. their attitudes to code breakage. But it might not hurt to have a wider public discussion about this.	Coherent, productive, fast	Reading about it online back in the D1 days	I wanted a more productive C++	Modules from arsd; and Dlangui is great.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters		Garbage collection			Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC													New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		Every time I try and write the same code in C++ I start banging my head against the wall. More than that, though, D is remarkably internally consistent - everything seems to fit together astonishingly well. The only language I use that does it better is Haxe, but it's a lot less ambitious in scope. Generally I find with D that I can just write a pile of code and everything makes sense, which is quite a feat. The ability to advance through successive changes rather than major rewrites is much greater than I have in my C and C++ projects.	GC-managed dynamic arrays and slices really shouldn't share a syntax, it's hard to teach and I *still* get bugs as a result of it when I'm writing code when tired		D is brilliant! It's amazing how often people in the community seem to forget this.	Spaces	2018-02-28 16:38:04	2018-02-28 22:31:57	018664fe26
2a5d820ece37eceb7f187b89b4dd77ba	No, I have never used D			Employer doesn't use it	"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							4	Lack of examples in documentation of std	4	Not enough examples	5	5	5	Saw some issues on contributors page	0			1	Huge variance in quality		3						I don't need help			Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications										Financial services	Official Windows .exe installer															2.079.0 (nightly)														DMD	Linux		Windows							dmd				cmake				No	Visual Studio + VisualD		5	1	2	Design, hard to navigate		5		It's awesome - keep it as is																				Yes	3	5							Reliance on the GC			@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes			std.eventloop	@nogc containers						std.benchmark							std.base64		std.bitmanip	std.compiler	std.complex				std.csv	std.datetime	std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger		std.getopt	std.json		std.mathspecial	std.meta	std.outbuffer		std.path		std.random		std.signals	std.socket	std.stdint		std.system	std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		Yes	5															Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC					Nothing												D's dependence on a large and bulky runtime						Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)					Less corporate support (including jobs) than other languages		Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials							Lack of progress on DIPs						Read Andrei Alexandresku's book	Widen my knowledge		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays						std.concurrency & std.process	Multi-paradigm				opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking	-betterC																							Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 22:05:59	2018-02-28 22:30:38	516da5d9b2
df3f777551c9d3fbc115ecd097179172	Yes	5			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		5	Missing IDE on the Mac	4	More examples could support faster understanding.	0	5	5		1	5		1	Always great content		5						I don't need help		3	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily							Big Data		Machine Learning		Science/Research		Official Windows .exe installer								Homebrew								2.078.3 (latest)													DMD	Linux	macOS	Windows			iOS							make					Yes, I work with D part time	Atom		3	0				5		It's awesome - keep it as is																				Yes	3	6	6	Nothing - Phobos (Standard Library) is great									@nogc		Performance	More -betterC support			I'm happy as is.																									std.demangle												std.meta																								No, and I don't plan to				Time is my only enemy								Nothing										Nothing							Non-enterprise IDE support	Poor debugging						Nothing								Nothing											Nothing.								modern fast developing	Checking out some DConf videos on youtube.	Loved the clean concepts, the elegant syntax and the speed (both of compilation and runtime).	mir	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters								Multi-paradigm			static foreach																		New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute				Better productivity, ability to attack more complex problems efficiently.		Yes, but only for a specific project	Thank you for D. :)	Meh, I don't care.	2018-02-28 22:00:49	2018-02-28 22:24:34	16179743af
d7126221ef69fb70e422b78214a28c4c	Yes	3			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4		4		0	4	3		1	4		1	Mostly great content		5						I don't need help			I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications	IoT					Embedded Systems		Kernel Development	Science/Research									Arch Linux						I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux			BSD-variant			WebAssembly	Embedded					make	cmake				Not applicable	vim / neovim		3	0				2		It's awesome, but I miss a few features				in-place struct initialization							static break			Static inheritance			Yes, but only for experimenting/testing/debugging	3		Yes, but only for some projects	1	5	5		Auto-decoding for strings			Old modules like std.outbuffer or std.socket				@safe for all modules	@nogc	DIP1000	Performance					std.eventloop	@nogc containers	better json serialization		std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)																																																	No, but I want to to				Time is my only enemy															Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000						Poor GC implementation / performance					dub			D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat			C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library		Nothing														Lack of progress on DIPs	Lack of focus at the management level								Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax				Simple, but powerful module system	Templates		Built-in unittests								std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations				New range functionality (substitute, slide)				Reproducible builds												Cross-compilation with LDC	newCTFE				Maybe, I miss accountability at the moment		Spaces	2018-02-28 22:06:03	2018-02-28 22:23:52	81e95be2f9
095e109a035e2c12254a48bf993c2f0a	Yes	5				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4	A lot of the official documentation is either incomplete, or not worded in a way that's easy to understand for beginners	4		0	5	5		1	5		0			5	D Forum						Reddit	4	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications											Official Windows .exe installer																	2.077.1 (latest LDC)												LDC	Linux		Windows		Android		WebAssembly					dub						Not applicable	vim / neovim		5	0			I didn't know if it was a bug or not, or it wasn't a big enough problem	5		It's awesome, but I miss a few features	I don't like having to use goto for fallthrough in switch/case statements				named arguments												No			Yes	3	5	5	Nothing - Phobos (Standard Library) is great											Performance		More/better container classes		I'm happy as is.	std.eventloop		better json serialization		std.graph	std.database				std.color	std.image	std.drawing (2D)		std.json	std.base64			std.compiler		std.concurrency					std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional					std.meta	std.outbuffer		std.path	std.process			std.signals	std.socket	std.stdint		std.system	std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		No, but I want to to										I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)									Nothing								Poor debugging										Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)						Little marketing / no evangelists		Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials			No good tutorials for creating graphics (using OpenGL or the Windows API)	Nothing.								Better than C++	Jonathan Blow	C++ was too nonsensical and frustrating. People love saying C++ "doesn't get in your way", but it got in my way more than any other language.  D does what C++ does but is logical and fun.	Phobos	Ranges & std.algorithm							Readable syntax	UFCS			Simple, but powerful module system	Templates			In, out, ref parameters		Garbage collection						Multi-paradigm	Functional programming paradigm																												I want to make art via programming, and D is both powerful and enjoyable enough for that purpose	writeln(foo[] + bar[]);			Spaces	2018-02-28 21:44:01	2018-02-28 22:19:56	145c8cf5c6
8ad17068815cf8662fdc9022e79e2429	Yes	3					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			3	the shift from D1 to D2 "string" and all the various converts of the different used types	2	incomplete and if you want to contribute to and improve it (in GitHub), "reviewer" raise the bar/requirements for every little ship like blanks here and there unnecessary high	2	4	5	I'm ok with it	1	5	unavailable from time to time	1	Mostly great content	more "to-do's" from the Gurus and real life examples / projects would be great 	5	D Forum							5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly												(storage and server) administartion	Official Windows .exe installer	Official tarballs	Official .rpm packages			Official dlang.org/install.sh script	d-apt Debian/Ubuntu				Choco	Docker					2.078.3 (latest)													DMD	Linux		Windows	BSD-variant						dmd	rdmd	dub						Yes, I work with D part time	Visual Studio Code		4	1	3	no patch upload, only Git desired		3	better clearer helpfuller error messages AND support for mixed and upfront unknown keys in AA's (see Perls hashes)	It's awesome - keep it as is																				Yes	4	3	2		Auto-decoding for strings					Fear to do breaking changes												better json serialization	better xml serialization		std.database	std.i18n							all the new (last 5 years :O ) and shiny stuff (say ranges, algorithms, ...)		std.bigint	std.bitmanip	std.compiler	std.complex		std.container				std.demangle			std.exception	stdx.allocator	stdx.checkedint		std.functional						std.outbuffer																	std.variant					1. people complain too much (on the forum) and don't contribute 2. contributing is difficult because some ppl put the (Git[Hub]) border too high 3. There were many great things in the Tango lib's, which Phobos should just take over too	No, but to other D repositories			Finding good issues to get started					High barrier to entry			my 2-3 tries to improve the documentation by just copying great forum hints were turned down for little things like blanks herer and empty lines there (and dfmt did not work the "required" way		Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)						the "D package registry" has too many dead or "not compiling" stuff and it's a try-and-error process to find something usable, if ever		Poor Phobos (Standard Library) documentation		Poor compiler error messages		missing or broken packages			Poor debugging		DLL support on Windows					Auto-decoding of strings	Attribute bloat				Ugly bits of the standard library			Fewer third-party libraries than other language			Few showcases / flagship projects			Lack of good examples / tutorials							Lack of progress on DIPs				no clear focus on a "use case"	best ever static compiled programing language	ufff... don't remember. IT magazine or (Heise) news channel 	I was and still are mainly a "scripter" on UNIX-like systems but needed some tools on Windows some years ago. I'm knew some C and didn't want to care about GC's anymore, so.... D1 was my life saver Use D2 now/still in my company for the previous/old tools "just because I can" ;)	std.experimental.logger, regex, datetime, opt, stdio (reverse order)			CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters		Garbage collection	Inline assembler		Debug attribute		std.concurrency & std.process			newest drive to include more "key tools", like DUB !!!					Compile-time format string checking							Reproducible builds			Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8			Cross-compilation with LDC	newCTFE		the great community and the "you can do it easy and maintainable"	the various needed convert's like from/to strings, ranges, ...	Maybe, I miss accountability at the moment	breaking changes are ok and needed... we just need to "manage" them better	Spaces	2018-02-28 21:13:39	2018-02-28 22:18:34	2e87492f04
374636c8ec178879b2a3e08aa69e0dba	Yes	3				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			3	suboptimal tools on windows no support with mingw and gdb, so a lot of c++ tools do not work properly, ie. codeblocks, qtcreator, eclipse, ... visual studio and visual d are tricky to install and use, some bugs, ... to few working features, see ide's for java, c#, ... some quirks with the docs of std lib, ie. errors, unlogical things, functionality spread over some places not clear usage for gamedevelopment, ie. gc usage, .. but mainly the tools, even c++ has better ones btw. not everyone use visual studio on windows	3	some links between pages don't work some samples have errors some functions, ... have nearly no documentation  not documentation  BUT the std lib should be more nogc compatible	3	4	4	on the frontpage only the current stable versionsnumber is shown, not the current beta versionsnumber	1	5	not really dislike, but some stuff is not available in some of the other languages	1	Always great content	too few posts! the pauses between the parts of some article series are too long	4	D Forum							4	No, the D.Learn forum is fine.	maybe some AMA with the d lang team at some times	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications				Game Development																					MISSING option!: windows .7z	2.079.0 (nightly)														DMD	Linux	macOS	Windows		Android	iOS			but primary windows, but also the other selected ones;  BTW:  it seems in the (core)team of d lang is some ignorance of windows 	dmd	rdmd	dub						Yes, I work with D part time		only one selection is not very useful!; some vim, coedit, dlangide, eclipse, vs + visuald, visual code, but because of some quirks wih each one, mostly notepad++ and cmdline... ; not very satisfying	1	0				4	faster on some template, compiletime stuff + better error messages	It's awesome, but I miss a few features	too many of the different attributes on functions, ... their different style, some are "normal" and some with @ it seems some are have the wrong defaults	tuples		in-place struct initialization	named arguments			multiple alias this									Yes, but only for experimenting/testing/debugging	4		Yes	3	4	4				Poor naming choices		Reliance on the GC		not compatible with mingw	@safe for all modules	@nogc	DIP1000		More -betterC support	More/better container classes	compatible with mingw			@nogc containers	better json serialization							std.color	std.image	std.drawing (2D)	better protable dynamic link library support;   runtime code loading/changing (maybe compiler, tool stuff?)	__traits is useful, but it looks some kind ugly and verbose	std.base64	std.bigint	std.bitmanip		std.complex				std.csv	std.datetime	std.demangle	std.digest	std.encoding			stdx.checkedint	stdx.logger	std.functional	std.getopt			std.mathspecial		std.outbuffer					std.regex	std.signals	std.socket	std.stdint					std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip	compatible with mingw, to support the possibility to use mingw with dmd/ldc and gdb, so some tools/ides can be used  some portable but native gui lib  compatible with -betterC and nogc	No, but I want to to			Finding good issues to get started					High barrier to entry			i don't think i know enough about D to be useful		Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems	Issues with language feature X (e.g. shared, @property)		not language but i think it is deeply connected: the suboptimal tools				Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows	Missing support for platform X		not only "non-enterprise" ide support, i would better say: no great, really stable working, feature rich ide support			Attribute bloat		Wrong defaults (e.g. not @safe by default)			better nogc support in the language, libs, ... (ie. for game development)				Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials			to H: d-tour is great, but some more stuff will be nice				Lack of progress on DIPs			some kind of ignorance of the subpar ide/tool support and windows as an important platform (and the some issues with die compiler, tool, ide support on it)	tools, good ide support, better windows support, mingw/gdb support, dll support;  better nogc / direct memory managment support (ie. gamedev);  better, offical, easier support of android, ...;  dont't really know what the core d lang team member are concrete doing	pretty, featurerich, fast	gamedev.net blog posts by mike parker	unhappy with assember, pascal, c, c++, java and looking for a better language this languages are getting old, not powerful or too complex and ugly D look really nice and has power would like to use it for game development	derelict libs		Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests					Contracts				Multi-paradigm			static foreach	opt-in GC and runtime				-betterC									Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org						Colorized error messages		Cross-compilation with LDC	newCTFE	some kind of progress with mingw support, BUT it should only be some begin: real mingw-64 support is needed, so you can use the mingw-64 gcc and dmd to link together and use gdb to debug; so some ide's can also be used with D	c++ is missing a lot of nice features and is kind of ugly, the language "leaders" are ignore the wished features of the users  rust have some nie features and it is progressing but it is very ugly  D have so good features and looks so nice	not so great or missing tools  gdb support in linux but not on windows  in gamedev gc is some kind of handicap	Maybe, I miss accountability at the moment	I really like D, its fun to code in it, I wish more would / can use it  I wish better support on the tool/ide/windows/mingw/gdb side  I wish it can be really and great used in game development  the community seems be great its nice to see and have the possibility to communicate with the d lang core members  d blog makes a good work, but more articles were be nice   dmd makes some progress, ldc also, but gdc seems non existent, dont know what the state of it is, or how you can use it (specially with windows)  windows support of dmd, (some progress, but incomplete) ldc, gdc are subpar	Spaces	2018-02-28 16:42:22	2018-02-28 22:15:00	d305672f7f
ccc291ebd8c19d5197cbaa7457b8a0c4																																																																																																																																																																																																																																																																																																																																																		2018-02-28 22:10:31	2018-02-28 22:11:37	12dbdca423
abd3d9c6440e8ce0811ad658a69b6432	Yes	4			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							2	Things are not well documented enough.  It often takes me a while to find how to use things like the random number generator correctly.  I think the way these libraries are implemented also contributes since the organization of the implementations vs the interface isn't super clear. I've also had issues figuring out what algorithms I need to use to perform common operations on data structures such as dynamic arrays. Immutable and const also confuse me -- you can apply them in so many ways that there is a steep learning curve.	3	See above on learning D.	0	4	4		0			0			4					My colleagues			4	Yes, I like StackOverflow.	StackOverflow is great!	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly							Big Data		Machine Learning		Science/Research																MacPorts					2.075.1 (removed built-in .sort)										DMD	Linux	macOS		BSD-variant						dmd		dub	make	cmake				Yes, I work with D part time	emacs		4	0				3	More optimal code generation	It's ok	I prefer the Python approach of one way to do something.  D often has multiple ways of doing things.															Simplicity in the core language.  Maybe think less about adding things and more about removing language features and moving things into libraries. For example, the string operator comparison syntax ("a < b") feels ugly.  Could just support lambdas and pass in a comparison function. Compiler can then inline, etc.  Better to find general features that can be reused rather than catering to 20 special cases.	No			Yes	2	2	2								Hard to find operations on data structures, things like the RNG are confusing because there isn't a simply declared base class or interface that everything inherits / implements.						More/better container classes				@nogc containers	better json serialization			std.database																																																							No, and I don't plan to											Working on D directly is too out of the way for my needs.  If there was a well-developed machine learning library, I would contribute because the addition of new statistical methods would directly benefit my work.		Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation			Poor GC implementation / performance		Nothing								Nothing									Fewer third-party libraries than other language						Lack of good examples / tutorials					Too much low-level focus (C/C++)						Libraries and frameworks often matter more than languages nowadays.  A language may be great (e.g., Erlang / Elixir) but without libraries / frameworks for high-level tasks (e.g., distributed computing, machine learning, microservices, etc.), then the language won't get traction.  Likewise, if those libraries do exist, they tend to catapult a language (e.g., Ruby with Ruby on Rails).  This is happening with other languages (e.g., Clojure) as well.  People don't want to, can't spend all their time on "building foundations" -- they need to be able to accomplish their work / projects with a reasonable amount of work.  Having to reimplement things like ML methods yourself just creates a huge barrier of entry.  Unfortunately, this makes it much, much harder for new languages to take hold.	C++ with GC	Job at AdRoll	Job at AdRoll	What D libraries?						Performance									Built-in unittests			Garbage collection											DMD as a DUB library																New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)								GC'd but still has static typing and better performance than Python	Complex language semantics -- language could be a lot simpler	Yes, just tell me how	Sorry for being negative.  I greatly appreciate the work by the D developers and community.  I also understand how difficult it is to satisfy the needs of a diverse community, especially against upstarts (e.g., Go) backed by large corporations.  You're doing really well given the limited resources.	Tabs	2018-02-28 19:53:23	2018-02-28 22:10:34	693bb24b0c
9d97221ac40ffd5507ed87f107cd1762	Yes	5				tour.dlang.org	Language specification	#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			5	None specific	5	Sometimes more practical examples are needed in addition to what's already there.	5	5	5	None	1	5	None	1	Always great content	Nothing in particular	4		#d on IRC						5	No, improve DFeed.	No, and a focus on stack overflow is not necessary.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications										Learning	Official Windows .exe installer			Official .deb packages						Gentoo							2.078.3 (latest)													DMD	Linux		Windows		Android	iOS						dub						Not applicable		Textadept	5	0			None	5		It's awesome - keep it as is																				Yes	3	4	4	Nothing - Phobos (Standard Library) is great								@safe for all modules	@nogc				More/better container classes		I'm happy as is.														None									std.csv													std.mathspecial																				std.windows		std.zlib		None	No, but I want to to			Finding good issues to get started																		Development of android support is slow	Nothing											Missing support for platform X			Nothing								Nothing											Nothing.							AArch64 (At least android) support	Elegant, powerful, fast	I don't remember	Seemed to have the best balance of features, it's a better in between option between C and Java then others.	Dlangui	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters				Contracts			std.concurrency & std.process	Multi-paradigm			static foreach																			New third-party applications (e.g. Tilix)							Fast development, good looking syntax	None	Maybe, I'm still a student	None	Spaces	2018-02-28 21:41:06	2018-02-28 22:03:46	eee9239d96
d38aab1a66f81a15a360f8e1afafe85a	Yes	4				tour.dlang.org			D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe	d-idioms		3	Understanding the documentation, ranges, and std.algorithm	4	I found it to be a bit of a learning curve, although now that I'm used to it, I think it's good.		4	4		1	4	Quality is good, I think quantity could be increased.	1	Mostly great content			D Forum							5	I don't care.	I can see from a management perspective, moving to StackOverflow would have benefits, but as an end-user, it doesn't really matter to me; I ask a question on D.Learn, it gets answered, I'm happy. I'm pretty sure that'll continue if we went to SO.	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications					Big Data						Official Windows .exe installer																2.078.3 (latest)													DMD			Windows														Code::Blocks	Yes, I work with D part time		Code::Blocks	4	0			Unsure if it's a bug or me being stupid. Generally, I ask a question on D.Learn, saying "is this a bug" and then someone else says "yes" and they log it.	4	Better error messages	It's awesome - keep it as is																				Yes	3	2	5				Poor naming choices								Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)	As you can see, I like a "batteries included" philosophy. However, it's not a big issue, since there are several good 3rd party packages available, and dub makes it pretty easy to fetch and build.	Multi-threading, and generic programming (probably more me being an average programmer rather than std lib)	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger			std.json			std.meta							std.signals	std.socket	std.stdint		std.system				std.uri				std.windows	std.xml			More encompassing "batteries included". More posts/articles on how to use std lib effectively (like D Tour and D Blog, just more of it). 	No, but I want to to											Just starting learning how to use GitHub	Nothing			Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems			My usage of D won't increase if the above issues are solved, since it's already my preferred language. I guess it'll just make my life easier, and hey, who doesn't want an easy life eh?				Poor compiler error messages	Poor GC implementation / performance	See previous question answer			Poor debugging	dub							Attribute bloat				Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects			Lack of good examples / tutorials		Few transition guides from programming language Y		Nothing.							Sometimes feel like I'm the only one in the world using D (ok an exaggeration, but you get my point). A few weeks ago, I decided to start a blog. I had github account, and figured I'd host it on Git Pages...so a static website. I did a brief google, Hugo came up, looked like a no nonsense single execuable program, and it was pretty easy, straight forward, and very useful. We have high quality work in the lib space like Mir, for example...but something that takes it into an application would be a great to see. I'm hoping to develop some applications in the future, that will hopefully help show the whole great language -> great libraries -> great application. Tilix is a great example of this; D lang -> GtkD -> Tilix	"Get stuff done." Pragmatic. Performant. Flexible.	Came across it years ago when looking for C compilers	No admin rights required for me to install D at work. Python no, Java no, C# no, I tried them all, but D got through, so yeah, stuck with it ever since.	d2sqlite for 3rd party, and std.algorithm for std lib	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax	UFCS						Built-in unittests									Multi-paradigm																												Toolcahin based on lld / MinGW - due to restrictive tech policy, I can't have MVSC, so hopefully this will finally enable me to have 64-bit windows executeables at work	Helps me with my day-to-day work (data processing automation, etc). Also, I like to think it's helping me become a better programmer.		Yes, just tell me how		Spaces	2018-02-28 20:04:57	2018-02-28 22:00:42	8ad646799e
892703635b61f4cb2e29489da10328f4	Yes	4					Language specification			"Programming in D" by Ali Çehreli						Several published blog posts on specific topics, like file handling	4	- Moving from the reference doc/spec to an understanding the underlying concept (e.g. reference types vs value types) - Understanding the different function attributes. - Getting an overview of the standard libraries (phobos/druntime) to know how to find things - Getting an understanding of the larger D ecosystem (build systems, debugging, compilers, etc)	3	- Hard to know where to find things, esp. algorithms (std.algorithm, std.range, std.string) - Hard to get an overview of a related set of methods without reading the details of each (eg. range searches) - In many cases the examples don't start out illustrating the basic concept, instead jumping to advanced use cases. - Overloads are often differentiated in terms of low-level qualifiers	5			Front page is a good starting point, but the second level content is uneven in terms of level of granularity, expected knowledge, and writing quality. eg. The links behind "explore major features" vs "set up your editor".	0			1	Mostly great content	Hard to find or browse the content of older posts that may have useful content.	4	D Forum			dlang.slack.com			Local meetup	5	I don't care.	The main thing I've missed is having experienced D programmers review my code. Real code reviews seems unrealistic, but I'd love a venue for asking about idioms and code level design approaches where feedback could be provided. The learn forum doesn't feel right.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly							Big Data		Machine Learning					Official tarballs			Official OSX dmg installer												2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS										dub	make					Yes, I work with D part time	emacs		4	1	4	- Difficult to know if anyone has read a filed issue. - Difficult to know if anyone is working on a fix for an issue.		4	More informative error messages when template instantiation fails	It's awesome - keep it as is																				Yes	5	5	3		Auto-decoding for strings						Container classes are under-developed						More/better container classes			std.eventloop		better json serialization			std.database								Output ranges; Digests	std.base64		std.bitmanip	std.compiler	std.complex						std.demangle		std.encoding		stdx.allocator	stdx.checkedint	stdx.logger							std.outbuffer						std.signals	std.socket									std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	- More consistent output options - Application control over utf-8 error handling	Yes	3	Code reviews in several cases asked for changes beyond the intent of the PR. e.g. Thanks for fixing the bug, could you also make the existing unit tests @safe while you're there? Except in language implying the review approval is dependent on the additional change.																			Need better control of GC in some cases (eg. Avoid blocking all threads)	Nothing							Non-enterprise IDE support	Poor debugging	dub						Auto-decoding of strings								Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects								Too much low-level focus (C/C++)						Limited community size; Hard to try it in a limited fashion in a corporate environment. Not many public examples of large systems to draw experiences from.	Native compiled python	Don't remember	Looking for alternatives to C++ for data scientists needing to program in high performance production environments.	std.conv	Ranges & std.algorithm					Performance		Readable syntax	UFCS				Templates		Built-in unittests			Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm			opt-in GC and runtime			Compile-time format string checking											Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute				Most approachable high level, performant language. 	Autodecoding			Spaces	2018-02-28 20:33:53	2018-02-28 21:59:54	af82aed65d
afa9b5a074e72074f6a27a89d9b72178	Yes	3				tour.dlang.org	Language specification		D Forum: Learn								2	Error messages from the compiler are awful. Stack traces are no good in template errors. I would prefer Clang-like template errors (eg. 2 pages of errors where I can see the faulty line) than DMD style errors which dump a bunch of meaningless pointers and an error unrelated to the acutal faulty code.	2	Not enough code examples. Hard for beginners to understand function definitions from the Dlang lib docs. Example: I want to iterate over keys and values in a JSON. I had to go in std.json github source before I found you need foreach(string key, value; myjson) for it to work and no compiler error or other doc helped me there (since the pythonic foreach(k, v; myjson) does not give helpful error messages)	5	5	5	Documentation of Phobos is hard to read. Forum is overly negative.	1	5	Too long.	1	Mostly great content	Not enough posts per month? Usually good content.	4	D Forum							5	Yes, I like StackOverflow.	StackOverflow would be helpful since it's so ubiquitous and is usually the first result for code problems. Moreover the result presentation tends to be better (since the UX of the site is optimized for exactly that usecase). That said, Dlang.org is quite nice, but old forum posts don't lend themselves to good UX in stackoverflow usecases.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly							Big Data		Machine Learning				Official Windows .exe installer																												2.075	DMD	Linux		Windows		Android	iOS				dmd								Yes, I work with D part time	Visual Studio Code		5	0			Feels intimidating	2	BETTER ERROR MESSAGES. Especially template errors are somehow worse than in C++. 	It's awesome, but I miss a few features	Unintuitive what works or not, though it looks very readable once it compiles. Needs more code examples on the phobos docs to what works.				named arguments		language binding to X										No	5	not sure	Yes	5	2	2						Reliance on the GC				@nogc		Performance						@nogc containers	better json serialization			std.database								more complex template idiomatic template expressions																																														BETTER DOCUMENTATION. It should be pythonic -- human readable. scroll down a page on most std.XXX doc page and you will get hard to read descriptions of inner details of a module: useless for most users.	No, but I want to to				Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)								I work in data science. Completely seamless python integration should be key -- I would rather work my backend in D than C or C++ in the long run. 		Poor Phobos (Standard Library) documentation		Poor compiler error messages					Poor debugging													Languages feels "left off". While I'm sure D is used actively, it doesn't feel as well used as, say Rust or Go.				Little marketing / no evangelists					No good point for learning D		Hard to justify using D in enterprise projects, except microservices. Go and Rust took off simply because it's easy to convince people when there's a ton of evangelism around (even though they're not more pragmatic choices)					Lack of focus at the management level			Language feels obscure and complex, like a poorly documented C++. It's hard to find a living ecosystem of packages in my niche 	scalable, pragmatic, frustrating	my own research	It seems like a good idea	libmir	Ranges & std.algorithm					Performance	Native interoperability with C		UFCS		Closeness to C/C++		Templates		Built-in unittests			Garbage collection					std.concurrency & std.process	Multi-paradigm				opt-in GC and runtime																	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages	DCompute	Cross-compilation with LDC			pragmatic language.	ERROR MESSAGES AND DOCS	Maybe, I miss accountability at the moment	The language needs momentum. It could be a big thing if cards are played well now. Especially in data science space -- python simply is hard not scalable and C++ is no fun to work in when writing backends. 	Spaces	2018-02-28 21:28:20	2018-02-28 21:59:31	c1e55a1614
f29319575e7a5f4c3b8580eedecabf1a	Yes	4								"Programming in D" by Ali Çehreli							5		3	It's always hard to find what I'm looking for.	0	4	5	Some code examples on the front page are too complex.	0			1	Always great content		4						I don't need help			Yes, I like StackOverflow.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly		Desktop applications				Game Development							Official Windows .exe installer			Official .deb packages					Homebrew								2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd		dub						No	Visual Studio + VisualD		2	0				5		It's awesome, but I miss a few features	Would like member functions to be final by default.																No			Yes	3	5	4						Reliance on the GC				@nogc		Performance		More/better container classes				@nogc containers													std.base64	std.bigint		std.compiler	std.complex		std.container				std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger	std.functional		std.json		std.mathspecial		std.outbuffer						std.signals	std.socket	std.stdint						std.uri		std.uuid	std.variant	std.windows				std.regex should not make compile times go through the roof	No, but I want to to			Finding good issues to get started					High barrier to entry													bad IDE support. Visual D is relatively good, but still bad compared to C++ or C#	Nothing								Poor debugging									Virtual by default	Wrong defaults (e.g. not @safe by default)						Less corporate support (including jobs) than other languages		Few showcases / flagship projects													Lack of roadmap		almost better c++	at school	To use it for my bachelor thesis.				CTFE (static if, static foreach)						UFCS		Closeness to C/C++		Templates				@safe strings + arrays											opt-in GC and runtime			Compile-time format string checking																	Colorized error messages					It's faster to implement a small tool in D than in C++.				Tabs	2018-02-28 21:30:00	2018-02-28 21:58:19	424013d22e
2f4246530f4ddd08a686ae957dec8198	Yes	4					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	Issues with ranges, template documentation, error messages.	3	Some functions could use more examples. Warnings about issues with char[] and string[] functioning as ranges and auto-decoding issues should be made more prominent, I have spent a lot of time trying to figure out what is and isn't an acceptable range when using standard library functions because of a combination of auto-decoding issues, documentation issues, and ambiguous error messages, though some of this is probably my own fault for not spending more time with the documentation.	5	4	4		1	4		1	Mostly great content		4	D Forum							5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications	IoT			Game Development							Official Windows .exe installer	Official tarballs				Official dlang.org/install.sh script	d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows		Android			Embedded		dmd	rdmd	dub						No		xed	4	0			Not knowing if an issue was already known, or was a legitimate issue.	4	Better error messages.	It's awesome - keep it as is																				Yes	5	4	5		Auto-decoding for strings				Reliance on the GC				@nogc	DIP1000	Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization				std.benchmark	std.decimal										std.complex	std.concurrency					std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial	std.meta	std.outbuffer					std.regex	std.signals		std.stdint					std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip		No, but I want to to			Finding good issues to get started		Personal laziness			High barrier to entry								Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC						Poor Phobos (Standard Library) documentation		Poor compiler error messages					Poor debugging				D's dependence on a large and bulky runtime			Auto-decoding of strings				C behavior without warning (e.g. signed to unsigned comparisons)					Less corporate support (including jobs) than other languages					Lack of good examples / tutorials												intuitive, fast, complicated	An article on Wired about Andrei doing D things at Facebook.	I wanted something with comparable performance to C++ and comparable ease of use and compatibility to Python, D has delivered for me in these areas.	derelict-SDL2	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates					Garbage collection			Debug attribute	import("myfile")						opt-in GC and runtime														Runnable examples on dlang.org											I find D much more pleasant to use than other languages. It's easier for me to write and there's no need for header files. I hate header files.		Maybe, I miss accountability at the moment		Spaces	2018-02-28 21:18:23	2018-02-28 21:56:02	3f39802467
c560fd193f6605a91fdb1bda39f5b060	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli					d-idioms		4		5	Nothing really. It is all well described, unittests serve as good enough examples. I can easily find what i am looking for.	0	5	5		1	4		1	Mostly great content	The blog posts tend to be quite short. I would love them to be more in-depth.	4	D Forum					I don't need help		4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development		Embedded Systems			Science/Research									Arch Linux								2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux							Embedded				dub	make					No	Visual Studio Code		5	0				3	Better optimizations.	It's awesome - keep it as is																				Yes	3	5	6		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc			More -betterC support					@nogc containers												None				std.compiler											stdx.allocator	stdx.checkedint																										std.windows					No, but I want to to			Finding good issues to get started	Time is my only enemy				High barrier to entry					Language complexity (e.g. inout, abuse of mixin)									Nothing						Nothing								Nothing								Nothing														Lack of progress on DIPs					Awesome, Empowering, Elegant		I find the compile-time capabilities, UFCS, good module system enough to make me interested.		Ranges & std.algorithm		CTFE (static if, static foreach)							-betterC			Templates		Built-in unittests			Garbage collection									static foreach	opt-in GC and runtime				-betterC												Deprecation of the comma operator									It is a rapidly evolving project with potential for a great future. I look up to the time when i can use a single programming language (D of course ;) ) to develop my High-Level applications along with a Low-Level Embedded System (possibly having an ARM processor).		Yes, just tell me how		Spaces	2018-02-28 21:39:55	2018-02-28 21:52:31	0c01d7f7bd
4b492c2799088eedae656cf451dc905a	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	Not enough time	5	That is all right	5	5	4	That is all right	1	4	Not a lot of information. But that's enough to arouse interest.	1	Mostly great content	That is all right	4					My colleagues	I don't need help		5	Yes, I like StackOverflow.	No	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development															Official .deb packages																									2.078.1	DMD	Linux				Android					dmd	rdmd	dub						Yes, I work with D part time	Visual Studio Code		4	0			The problem has already been voiced	5		It's awesome - keep it as is																				Yes	3	5	5						Reliance on the GC				@nogc		Performance	More -betterC support			I'm happy as is.						std.database	std.i18n							That is all right.	std.base64				std.complex						std.demangle																																			Still not faced with problems	No, but I want to to				Time is my only enemy						I am just starting to learn D		Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							Not yet faced with the weak points. So far so good :)	quick, clean, easy	On one of the specialized forums.	Liked its performance/ease of learning	Phobos	Ranges & std.algorithm	Mixin			std.traits	Performance		Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters							std.concurrency & std.process									-betterC																					High-speed development, performance.	"Floating point exception (core dumped)" when dividing by zero on Linux, that is not caught by try-catch.	Yes, just tell me how	It's all good. Not stop.	Spaces	2018-02-28 20:39:02	2018-02-28 21:47:56	673e8fa7f2
6e7ee1607a2706193f84954e1a7716fd	Yes	4					Language specification										5	Mostly just learning that the functional higher-order-functions in std.algorithm return ranges rather than arrays, and the error messages don't communicate that clearly to a newcomer (though I'm sure they're perfectly accurate).	5	Examples need involve more than foos, bars, a's, b's, and c's. Use names in example codes that reflect real-world metaphors, so the functionality is clear. That being said, D code is so clean it can be self-documenting. Phobos is the only standard library I've ever used where I can read the source to easily and clearly understand what is occurring -- sometimes more easily than the docs. But the docs are very good, again, aside from the examples.	5	5	5	It is an excellent site. But it needs to communicate SPEED. Most people do not have a problem with GC; entrenched C and C++ programmers have a problem (perceived or real) with GC. If D is going to continue to target these people, it needs to, on the front page or with clear links, demonstrate the SPEED of D in many typical contexts for these C and C++ programmers, while showing them the compilation time, build system, package management, and code concision benefits.	1	5	Again, stick to real-world metaphors where possible. The text is thorough and the design is almost perfect. I'd change the first forward arrow on the front page from "Read in your language" to "Get started learning D" or "Try using D" or something similar. Make it clear what big button to click to start learning. And instead of asking them to install straight away, maybe have a clear link to the download and install instructions on every page, but use the web compiler for all examples.	1	Always great content	In the future, I'd like to see two things covered: SPEED, to shut up people from the other systems languages complaining in EVERY thread. Then, domain-specific libraries for popular fields. Cover vibe has been covered; maybe cover large features of it in detail. Feature Mir for all the scientific computation nerds. Demonstrate dlangui or gtk-d for UI development. Proudly feature things that people look for and use.	4	D Forum		#d on StackOverflow					4	Yes, I like StackOverflow.	Visibility seems to come from SO (at least for now). SO results are easy to read for programmers coming from other languages; digging through forum posts in yet another forum layout is an instant turn-off. I myself often avoid forums and forum links in favor of SO posts with clear formatting and solid explanations. DuckDuckGo has a quick answer box that pulls SO answers from the first result. Accommodate this. Make D visible to potential learners.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly							Big Data		Machine Learning		Science/Research		Official Windows .exe installer		Official .rpm packages	Official .deb packages			d-apt Debian/Ubuntu	Arch Linux	Homebrew								2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd	rdmd	dub	make					Yes, I work with D part time		Kakoune	5	0			I have not yet encountered a bug, or if I have I did not recognize it.	5		It's awesome, but I miss a few features	Taking some queues from functional languages and including expression constructs such as `match` blocks that return the selected value, and having built-in sum/algebraic types with easy syntax would help with modeling power.  As well, Walter has expressed his concern for type safety, a valid concern since a competitor, Rust, is built around it. Have these options be default. D seems to prefer the programmer be explicit with unsafe code in some contexts (pointers, `asm`), but explicit with safe code in others (`safe`, `pure`). To prefer concision and safety, tags should be for marking unsafe code, and the compiler should expect safe code by default. Maybe not pure code, but definitely safe code.  The GC should still be default, but when it is disabled, it should be as easy as possible to get up and go. Smart pointers (for example, `refcounted` and `unique`) could be added to the language by default as keywords (alternatives to `new` in front of object instantiations; yes, I realize they are in the standard library) once the allocator is finished and out of experimental phase. Syntax for smart pointers, along with `scope {}` blocks, would probably make D the best manual memory-managed language around, overnight.	tuples														Built-in smart pointers, match, built-in algebraic/sum types, `safe` as default	No	5		Yes	3	6	6						Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc					A more fluid JSON libary, maybe another standard library module for parsing another common config format.			@nogc containers	better json serialization		std.graph	std.database			std.decimal		std.image	std.drawing (2D)		Just make it clear what std.algorithm higher-order-functions are returning (ranges).																																															No, but I want to to			Finding good issues to get started	Time is my only enemy	Personal laziness		D community	High barrier to entry													Library development speed. Big third-party libraries such as vibe.d and Mir need support to elevate D to supreme usefulness with professionals.	Nothing								Poor debugging															Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials								Lack of focus at the management level	Wrong decisions at the management level		The "do it yourself" response to issues is probably driving new users away. Not everyone is an expert who can contribute features they need. D needs a core group of developers who, when somebody says "Can you guys fix X?" they can say "YES!" and who can emphatically post progress updates and feature additions all across the web.	Readable, powerful, fast	Some time ago, I forget. I was experimenting with functional languages when I first found it.	Seemed it was far superior to other imperative C-like languages. This assessment was correct. Much more clean and readable, better build and package tools than the other languages.	In Phobos, probably std.algorithm for its ability to let me chain simple transformations on data easily.  Third-party, I'd say Mir, primarily because I do scientific computing. But it needs works, and official support from the D Foundation. D could make an EXCELLENT scientific language and leapfrog NumPy with the right mindset. Mir needs a simpler import process, fewer dependencies (e.g. get away from needing BLAS library files for compilation), and cleaner, simpler handling between the different slice types. It should run on CPU by default for max simplicity, but should also probably partner with DCompute to find an easy way for researchers to flip a switch and have it run on GPUs.	Ranges & std.algorithm					Performance		Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system						Garbage collection			Debug attribute			Multi-paradigm	Functional programming paradigm																				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute				Amazing tools (dub), simple syntax, ridiculous speed. It could be so much more with a few more features, some solid third-party libraries for common uses currently held by inferior competitors, and some vocal publicity of these developments.	UFCS	Maybe, I'm still a student	D community members spend an inordinate amount of time fighting accusations that GC is a proposition killer in EVERY thread across the internet. Find out who believes this, find out why, and either find ways to better persuade them and put these concerns to rest for good, or re-target for a different audience.	Spaces	2018-02-28 20:43:03	2018-02-28 21:39:28	3096535dae
375c507ef20634de6f7f580de3851c35	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification	#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli							4	Not enough examples/lack of articles about general concepts	4	Navigation isn't always easy	0	4	5		0			1	Mostly great content		5	D Forum					I don't need help		4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development						Big Data		Machine Learning		Science/Research					Official .deb packages								Docker					2.078.3 (latest)	2.077.1 (latest LDC)				2.073.1 (new Ddoc theme)	2.072.2 (native TLS on OSX 64-bit)							LDC	Linux				Android		WebAssembly			dmd		dub						Yes, I work with D full time	Sublime		3	1	3			4	Better error messages	It's awesome - keep it as is																				Yes	2	5	4					Old modules like std.outbuffer or std.socket			Old style, class-based modules like mmfile and core.thread		@nogc		Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization			std.database																														std.mathspecial		std.outbuffer						std.signals		std.stdint														Addition of proper RC. Better and performant containers.	Yes	5																		Issues with language feature X (e.g. shared, @property)						Poor compiler error messages	Poor GC implementation / performance								D's dependence on a large and bulky runtime							C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects			Lack of good examples / tutorials							Lack of progress on DIPs				GC profiling doesn't work correctly/accurately.	Powerful, efficient and hidden gem		Efficient native language	vibe-d	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS				Templates		Built-in unittests									Multi-paradigm	Functional programming paradigm		static foreach							New range functionality (substitute, slide)	toString with output ranges		Back referencing of mangled symbols							Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages	DCompute				Ability to model my ideas efficiently and easily	@safe should not exist	Yes, but only for a specific project	Keep doing the good stuff! And thanks all for your work and specifically  Sebastian for your time doing this :)	Spaces	2018-02-28 20:50:45	2018-02-28 21:38:51	f373d27a41
76f78d331ab8dc19d40a9bf9ed5af1db	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli			"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms		4		3	Usefull examples of methods usage	0	3	4		0			1	Mostly great content	More tutorials - can help newcommers to see the benefits	5	D Forum							4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications	IoT		Security									Official tarballs	Official .rpm packages	Official .deb packages		Official dlang.org/install.sh script				Gentoo							2.078.3 (latest)													DMD	Linux		Windows								rdmd	dub						Yes, I work with D part time	Visual Studio Code		3	1	3			4	64bit Windows compiler, too high memory usage	It's awesome, but I miss a few features		tuples				assert diagnostics			UDAs for attributes				UFCS for local symbols				No	4		Yes	2	5	4		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database			std.decimal	std.color	std.image			Containers				std.compiler	std.complex		std.container				std.demangle					stdx.checkedint																											std.xml				Yes	4												Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000					Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging							Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials					Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level						Powerfull templates and c like syntax	Vibe-d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays	Garbage collection		Contracts	Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library		Compile-time format string checking											Runnable examples on dlang.org		Deprecation of the comma operator			vibe.d 0.8	Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE				Maybe, I miss accountability at the moment		Tabs	2018-02-28 21:00:03	2018-02-28 21:35:12	4467f9855b
b7c2e85ae968a8f91f63d2a9ff3c0226	Yes	5																				5																																																																																																																																																																																																																																																																																																																												2018-02-28 21:25:07	2018-02-28 21:28:05	d988de08e9
af17925101abc84a5600f938e7c16688	Yes	5				tour.dlang.org	Language specification		D Forum: Learn						d-idioms		4	Learning the use of shared, otherwise documentation for learning is pretty good. Conditions and Mutexes are a bit painful. You have to lock the mutex then immediately wait on the condition. Was not specified in docs.	4	Containers like C# (list, concurrentbag, concurrentdictionary, hashset, etc)	0	4	4	More basic tutorials for beginners to programming. Could be a good demographic for D.	1	5		1	Always great content		5	D Forum						Discord	5	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications				Game Development							Official Windows .exe installer			Official .deb packages														2.077.1 (latest LDC)												DMD	Linux	macOS	Windows		Android							dub						Not applicable		MonoD	4	0				5		It's awesome - keep it as is																				Yes	3	5	6	Nothing - Phobos (Standard Library) is great													More/better container classes				@nogc containers	better json serialization	better xml serialization											std.base64			std.compiler	std.complex				std.csv			std.digest					stdx.logger	std.functional	std.getopt					std.outbuffer					std.regex	std.signals	std.socket																No, but I want to to				Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough								Nothing							Non-enterprise IDE support			DLL support on Windows						Attribute bloat		Wrong defaults (e.g. not @safe by default)				Nothing												Too much low-level focus (C/C++)			Lack of focus at the management level			DLL support (or lack of). Ben Thaut is working on this so I hope it gets merge. I think D should stop piggybacking off C/C++ marketing-wise. Maybe market to C#/Java users.	Flexible, fast, intelligent	OSDev Wiki	Pure curiosity and I needed a fast native language. D outperforms C# in my complex voxel engine by 10x.	Derelict		Mixin	CTFE (static if, static foreach)			Performance		Readable syntax				Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection		Contracts	Debug attribute								DMD as a DUB library													Runnable examples on dlang.org								Cross-compilation with LDC			Performance of the implementation. Flexibility and productivity of the language.	Attribute hell	Maybe, I'm still a student	DLL support please. And semantic highlighting in editors.	Meh, I don't care.	2018-02-28 20:28:03	2018-02-28 21:18:36	5e5fa59cd9
e48790764c7795f868fb0a440b0eb6a1	Yes	4					Language specification		D Forum: Learn					"D Cookbook" by Adam D. Ruppe	d-idioms		3	Not a lot of tutorials	4	Functions that return voldemort types are hard to understand. Regex module is an example.	1	5	5		1	5		1	Mostly great content		5	D Forum							5	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development	Desktop applications				Game Development			Machine Learning				Official Windows .exe installer			Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows		Android							dub						Not applicable	Visual Studio Code		3	0				5		It's awesome, but I miss a few features		tuples	string interpolation		named arguments												Yes, but only for experimenting/testing/debugging	5	It would be nice if it had more examples of language idioms in it.	Yes	3	5	6						Reliance on the GC	Fear to do breaking changes			@nogc				More/better container classes				@nogc containers				std.database					std.image	std.drawing (2D)									std.container						std.encoding		stdx.allocator	stdx.checkedint			std.getopt			std.mathspecial	std.meta	std.outbuffer						std.signals		std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid	std.variant		std.xml				No, but I want to to			Finding good issues to get started			No roadmap		High barrier to entry						Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)						Poor IDE/debugging support.								Non-enterprise IDE support	Poor debugging		DLL support on Windows										Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials							Lack of progress on DIPs					fast productive native	From a friend	I come from C# background, yet I found C++ very annoying. D allows me to quickly write native, efficient applications and it feels so friendly.	gfm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates				@safe strings + arrays	Garbage collection			Debug attribute				Functional programming paradigm				DMD as a DUB library		Compile-time format string checking											Runnable examples on dlang.org				New third-party applications (e.g. Tilix)				Cross-compilation with LDC	newCTFE				Maybe, I'm still a student		Spaces	2018-02-28 20:42:28	2018-02-28 21:12:05	0265566a43
87b1981f8ec17d515fccefc179c18932	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification								d-idioms		5		5		0	5	5		0			1	Mostly great content		5	D Forum	#d on IRC			My colleagues			4	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily			IoT				Big Data	Embedded Systems	Machine Learning						Official .rpm packages						Homebrew								2.078.3 (latest)													DMD	Linux	macOS								dmd	rdmd	dub		cmake				Yes, I work with D part time	Sublime		5	1	5			5		It's awesome, but I miss a few features		tuples															Yes, but only for experimenting/testing/debugging	4		Yes	2	6	6		Auto-decoding for strings			Old modules like std.outbuffer or std.socket		Fear to do breaking changes							More/better container classes				@nogc containers	better json serialization																																																										Yes	5											Nothing										Nothing						Nothing								Nothing									Fewer third-party libraries than other language										Nothing.												Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits			Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests			Garbage collection		Contracts				Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library	Templated vector operations	Compile-time format string checking	-betterC		New range functionality (substitute, slide)				Reproducible builds			Automatic compilation of imports (dmd -i)			Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages		Cross-compilation with LDC					Maybe, I miss accountability at the moment		Spaces	2018-02-28 20:53:37	2018-02-28 21:11:03	8e3e47e5b6
0f2ea92a82a892bf803a9663cef1faad	Yes	4							D Forum: Learn								5	Poor docs (much better now)	4	Not clear and rigorous enough in documenting expected behaviour, especially when it comes to constraints (with or without overloads).	5	4	3	prefer the way the docs work on Adam's site.	0			1	Mostly great content	I'd love to see more D-specific cool tips and tricks	5	D Forum	#d on IRC			My colleagues			4	No, improve DFeed.	No, I like the D forums. The only change I want is code blocks with syntax highlighting (maybe integrated with run.dlang.io ?).	Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development											All of the above except for games, kernel and embedded									Homebrew								2.078.3 (latest)													LDC	Linux	macOS	Windows	BSD-variant	Android		WebAssembly					dub						Yes, I work with D full time	vim / neovim		4	1	4	I would *really* love to see a "bug suite" to complement the test suite which provides a window in to when bugs are fixed, eliminating a lot of "works for me" testing.		4	Better error messages.	It's awesome, but I miss a few features		tuples			named arguments			multiple alias this	UDAs for attributes		static break						No	4	Lack of rigour. A lot is left to "you know, same as whatever you expect C to do"	Yes	3	5	5		Auto-decoding for strings	Auto-decoding isn't nothrow			Reliance on the GC			@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers							std.decimal	std.color	std.image			most things outside the core modules that are actively maintained tend to give me some problems, but it's not so bad							std.container		std.csv			std.digest								std.json				std.outbuffer						std.signals	std.socket	std.stdint		std.system						std.uuid		std.windows	std.xml	std.zlib	std.zip		Yes	4	Slow responses and decisions.												Missing language feature X / not moving fast enough		Non-perfect C++ integration			Issues with language feature X (e.g. shared, @property)					Compiler regressions	Poor compiler error messages			Nothing									Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)			Nothing																			Mind to code	Googled alternatives to C++	C++ seemed like a nightmare	mir-algorithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS				Templates		Built-in unittests									Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime						New range functionality (substitute, slide)			Back referencing of mangled symbols				Automatic compilation of imports (dmd -i)			Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute		newCTFE		Nothing else is remotely competitive for getting ideas out of my head and in to good code.	all the limitations w.r.t. multiple contexts.			Spaces	2018-02-28 18:57:19	2018-02-28 21:05:15	351a90546a
00000091c738f7f26715c81f97c5d8ee	Yes	4			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe			5	need a debugger that really work well.	3	more examples.	0	5	5		0			1	Mostly great content		5								4			No.	Please don't ever break code.	Daily																	Official OSX dmg installer				Homebrew					I compiled D from source															latest stable dmd, and ldc 1.3 (have port on FreeBSD), problem to compile from 1.3 and up.	LDC	Linux	macOS		BSD-variant						dmd	rdmd	dub						Yes, I work with D full time	Sublime		5	0				5		It's awesome - keep it as is																				Yes		5	4												Performance	More -betterC support																																																																				Time is my only enemy																										Poor debugging																					Lack of good examples / tutorials												Elegant, Fast, Productive.	on Internet. don't remember how.		Phobos.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax				Simple, but powerful module system	Templates						Inline assembler		Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm							-betterC																							Maybe, I miss accountability at the moment		Spaces	2018-02-28 20:29:00	2018-02-28 20:57:06	47cdc7ff9a
7ce56004c7bdd4f1f0de9481e95aea9f	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4		4		1	4	4		0			1	Always great content		5	D Forum							5	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly	Web development	Desktop applications														Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)										2.068.2 (last C++ release)			DMD	Linux				Android							dub						No	Eclipse		3	0				4	GDC/DMD/LDC at the same Version 	It's awesome, but I miss a few features	Would like it to drop the “;” at the end														Nothing - D is already awesome		No	4		Yes	3	5	5	Nothing - Phobos (Standard Library) is great									@nogc			More -betterC support																Ssh																																																No, and I don't plan to										I am just starting to learn D		Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							ARM support	Very nice to read D code	Reddit 	Pleasure to learn. More time to focus on the problem	Vibe	Ranges & std.algorithm	Mixin				Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters		Garbage collection	Inline assembler			import("myfile")																				Runnable examples on dlang.org					vibe.d 0.8	Colorized error messages							Maybe, I miss accountability at the moment		Spaces	2018-02-28 19:49:36	2018-02-28 20:49:47	e599db8d4e
4fd375db70875aaf88e7e28df6af2b6b	Yes	3			"The D Programming Language" by Andrei Alexandrescu									"D Cookbook" by Adam D. Ruppe	d-idioms		4	Compiler/Tool Quality	3	Often missing/bad examples. 	1	3	4		0			1	Mostly great content	Need more from Walter and Andre	4	D Forum							4	I don't care.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications				Game Development							Official Windows .exe installer			Official .deb packages								Docker					2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows		Android	iOS		Embedded		dmd	rdmd	dub						Yes, I work with D part time	Visual Studio Code		3	1	2	Poor visibility for dlang.org and github repo 		2	Faster compiling (templates, CTFE)	It's ok	It still assumes a GC and incomplete specs 	tuples		in-place struct initialization	named arguments	assert diagnostics		multiple alias this				writing files at compile-time	UFCS for local symbols	Static inheritance			Yes, but only for experimenting/testing/debugging	2	Parts are not complete ie SHARED NOGC SCOPE	Yes, but only for some projects	1	3	2		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support					@nogc containers	better json serialization	better xml serialization		std.database	std.i18n	std.benchmark						Anything dealing with: @safe, nothow, @nogc, scope, shared		std.bigint	std.bitmanip																					std.outbuffer																						Was memory management agnostic 	No, but to other D repositories			Finding good issues to get started	Time is my only enemy		No roadmap							Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems	Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000				Compiler regressions	Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging				D's dependence on a large and bulky runtime			Auto-decoding of strings				C behavior without warning (e.g. signed to unsigned comparisons)			Nothing													Frequent breaking changes	Lack of progress on DIPs	Lack of focus at the management level									Mixin	CTFE (static if, static foreach)					Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays							Multi-paradigm			static foreach	opt-in GC and runtime			Compile-time format string checking							Reproducible builds			Automatic compilation of imports (dmd -i)			Deprecation of the comma operator				Colorized error messages		Cross-compilation with LDC	newCTFE		Its not C++		Maybe, I'm still a student		Spaces	2018-02-28 16:43:31	2018-02-28 20:46:38	f401747718
b0dd1cbb8edfcce07dca1cc504c84bf6	Yes	5					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		5		5	more examples	5	5	4		0			1	Mostly great content		3					My colleagues			4	No, the D.Learn forum is fine.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily							Big Data		Machine Learning		Science/Research						Official OSX dmg installer																						2.068.2 (last C++ release)			LDC	Linux	macOS										dub						Yes, I work with D full time	vim / neovim		3	1	2			5		It's awesome - keep it as is																				Yes	5	5	5	Nothing - Phobos (Standard Library) is great								@safe for all modules			Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization			std.database												std.compiler	std.complex				std.csv		std.demangle				stdx.allocator	stdx.checkedint	stdx.logger													std.signals										std.uuid					std.zip		No, but I want to to								High barrier to entry							Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration										Poor GC implementation / performance		Nothing								Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects							Nothing.												Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS				Templates					Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library	Templated vector operations																			DCompute		newCTFE				Yes, just tell me how		Meh, I don't care.	2018-02-28 20:19:43	2018-02-28 20:30:55	6cf001e680
4cc65520b797b228c31ed88409048300	No, I have never used D			Ecosystem. Difficult to integrate with other languages.		tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							2	Lack of examples.	3	Lack of examples.	1	3	3	Better learning resources.	1	2	Doesn't go beyond basics	1	Mostly great content	More information on numeric D (e.g. Mir).	2						I don't need help		3	I don't care.	No.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely							Big Data		Machine Learning		Science/Research																Snap			2.077.1 (latest LDC)												LDC	Linux														meson			No	vim / neovim		2	0			No concrete problem.	4	Better error messages	It's awesome, but I miss a few features	GC-ed builtins.		string interpolation		named arguments		language binding to X					writing files at compile-time					Yes, but only for experimenting/testing/debugging	2	Not optimal for producing standalone libraries.	Yes	0	3	3		Auto-decoding for strings	Auto-decoding isn't nothrow			Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000		More -betterC support					@nogc containers						std.benchmark	std.decimal																																																			Want to use it for standalone libraries that expose a C API.	No, but I want to to					Personal laziness			High barrier to entry		I am just starting to learn D				Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC														dub			D's dependence on a large and bulky runtime							C behavior without warning (e.g. signed to unsigned comparisons)						Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials				Nothing.							Packaging	Interesting but lacking	C++ talk	Want to use it instead of C++	Mir	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C	Readable syntax		-betterC												import("myfile")						opt-in GC and runtime	DMD as a DUB library			-betterC																	DCompute				Want to write numeric code	Cannot get  <lib> to work out of the box and there is no help available.	No, I'm not interested into D	No	Meh, I don't care.	2018-02-28 20:04:57	2018-02-28 20:30:00	28793d57dc
aaa8fbac38ba2c0f9c7d70e2a7d0edfb	Yes	5					Language specification										5		5		0	5	5	A search feature for phobos like http://dpldocs.info	0			1	Always great content		5	D Forum							5	No, improve DFeed.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily												Enterprise middleware	Official Windows .exe installer	Official tarballs		Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub						Yes, I work with D part time	vim / neovim		4	0				5		It's awesome - keep it as is																				Yes	4	4	6		Auto-decoding for strings													std.xml, std.json and std.stream replacements	I'm happy as is.			better json serialization	better xml serialization					std.decimal				simple http server				std.bitmanip	std.compiler	std.complex	std.concurrency	std.container		std.csv			std.digest			stdx.allocator	stdx.checkedint	stdx.logger			std.json		std.mathspecial		std.outbuffer						std.signals	std.socket	std.stdint		std.system						std.uuid		std.windows					No, and I don't plan to			Finding good issues to get started	Time is my only enemy	Personal laziness							Nothing										Nothing																																									expressiveness power balance	Online C++ user journal	Evaluate its template and metaprogramming, in search of a tradeoff between C++, Java and Python.	pegged	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS				Templates		Built-in unittests		@safe strings + arrays	Garbage collection				import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm																										newCTFE	std.experimental.scripting	It is expressive and concise. Does not get in my way. Great modeling power.		No, I'm already donating my free time		Spaces	2018-02-28 19:37:56	2018-02-28 20:24:45	072058fced
5a392e8e48e386a6dc59a09d6c006a35	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification										4	inout templates mixins	2	Too verbose, information is not summarized	0	3	3	Seems outdated	0			1	Huge variance in quality	Too technical.	2	D Forum							3	Yes, I like StackOverflow.	Nope	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications										 Cloud	Official Windows .exe installer																2.078.3 (latest)													DMD			Windows							dmd								No	Visual Studio + VisualD		3	1	3	The interface seems outdated		4	Useful error messages	It's awesome, but I miss a few features	Two many attributes, no syntactic sugar		string interpolation								static break					Threading support	No	4	Calling conventions	No	3	3	3		Auto-decoding for strings	Auto-decoding isn't nothrow	Poor naming choices				No standard guidelines. Each library has the author "trademark"						More/better container classes					better json serialization	better xml serialization			std.i18n		std.decimal	std.color	std.image	std.drawing (2D)		Allocators, threading, strings				std.compiler	std.complex	std.concurrency				std.datetime	std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional				std.mathspecial	std.meta	std.outbuffer	std.parallelism		std.process		std.regex	std.signals																	No, but to other D repositories				Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)						Poor compiler error messages				Non-enterprise IDE support	Poor debugging		DLL support on Windows					Auto-decoding of strings	Attribute bloat				Ugly bits of the standard library					Little marketing / no evangelists				Lack of good examples / tutorials					Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Stuck in the past. 	Mediocre Old Child	At the University	For fun	None	Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax					Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection	Inline assembler					Multi-paradigm			static foreach																								newCTFE		Fun	New integral promotions	Yes, but only for a specific project	Keep up the good work	Spaces	2018-02-28 20:06:07	2018-02-28 20:23:45	12392f5ccc
cc2bad1fdcf4f677855b52b3a84a00a4	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org											4	Learning to minimize GC allocations	3	The docs could use more examples	0	4	4		1	4		0			5					My colleagues			4	I don't care.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly							Big Data		Machine Learning		Science/Research					Official .deb packages	Official OSX dmg installer							Docker								2.075.1 (removed built-in .sort)										DMD	Linux	macOS								dmd								Yes, I work with D full time	emacs		4	0				3	Bug free	It's awesome - keep it as is																				Yes	3	3	3						Reliance on the GC				@nogc		Performance				I'm happy as is.						std.database					std.image																																																		No, and I don't plan to			Finding good issues to get started	Time is my only enemy	Personal laziness																					Poor GC implementation / performance								D's dependence on a large and bulky runtime		Nothing								Nothing											Nothing.								C++ with GC	Work	Work, its neat							Performance							Templates					Garbage collection						Multi-paradigm				opt-in GC and runtime																				Colorized error messages										2018-02-28 19:52:10	2018-02-28 20:21:22	693bb24b0c
32e939158c1fcab14bf594f49213615b	Yes	3				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		4	Just new concepts to me	4		0	4	5		1	4		1	Mostly great content		5			#d on StackOverflow		My colleagues			5	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications											Official Windows .exe installer																	2.077.1 (latest LDC)												LDC	Linux		Windows		Android		WebAssembly					dub						No	Visual Studio + VisualD		3	0				3	DMD is a mess and low portable and LDC is not following DMD as good as I want	It's ok	Many things, I hate quirks because compatibility, properties, annotations and so	tuples	string interpolation	in-place struct initialization	named arguments	assert diagnostics		multiple alias this	UDAs for attributes	@mutable in immutable	static break	writing files at compile-time	UFCS for local symbols	Static inheritance			Yes, but only for experimenting/testing/debugging	3	It's bad thought	Yes	1	3	4				Poor naming choices		Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes			std.eventloop	@nogc containers	better json serialization		std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)			std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency					std.demangle											std.mathspecial							std.regex														std.xml	std.zlib			No, and I don't plan to				Time is my only enemy						I am just starting to learn D				Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems	Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000						Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging		DLL support on Windows	Missing support for platform X	D's dependence on a large and bulky runtime				Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow									Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		D is tired, too much changes to reach C++. Or go to C++ like Rust did or not, like C# did. D has poor identity, It's needs a revamp, D3 totally breaking ou D++	Fine, not great	I don't know, it's a lot of time	I'm curious about PLs	None	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C	Readable syntax			Closeness to C/C++		Templates			In, out, ref parameters	@safe strings + arrays		Inline assembler	Contracts	Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations	Compile-time format string checking			New range functionality (substitute, slide)	toString with output ranges							Runnable examples on dlang.org	docarchives.dlang.io					Colorized error messages					Right now just to learn		Maybe, I miss accountability at the moment	Tabs AND Spaces, obviously, indentation and aligment ar different things.	Tabs	2018-02-28 19:41:56	2018-02-28 20:19:40	e48119bbbc
e69c8672c5ca3ec85a92cae8541f1496	Yes	5					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							4	Libraries, Compiler Errors while building libraries, Lack of documentation in std and also in many libraries due to little usage. And too many keywords like out , in ,body etc...  . Also debugging is not good enough. The best IDE for my taste is still abandoned Eclipse DDT. But since in the web page it is put in the bottom-est position in the page new comers won't use it and use other ongoing incomplete project this will drive them away.	3	The most simple things which you need most are very hard to find. I think it is because to show how good the language the complex and "cool" things are being presented good but beginners need basic things. For example append operator "~="  please check std.array documentation you will see it is not very easy to find how to append in to vector. I pass this phase but I am still a learner I am having the same problem with different classes. 	0	5	5	Me gusta dlang.org	1	5	Me gusta tour.dlang.org :) 	1	Always great content	Nothing	5	D Forum		#d on StackOverflow					5	No, the D.Learn forum is fine.	No 	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development								Machine Learning		Science/Research								d-apt Debian/Ubuntu												2.076.1 (static foreach)		2.074.1 (compile-time format checking)									DMD	Linux				Android	iOS						dub						No	Eclipse		3	1	3			4		It's awesome, but I miss a few features	Too many keywords. 														Nothing - D is already awesome		No			Yes	3	5	5	Nothing - Phobos (Standard Library) is great													More/better container classes			std.eventloop				std.graph	std.database									std.base64	std.bigint		std.compiler		std.concurrency					std.demangle		std.encoding		stdx.allocator	stdx.checkedint	stdx.logger			std.json		std.mathspecial	std.meta		std.parallelism		std.process											std.uri	std.utf			std.windows					Yes	5															Non-perfect C++ integration									Poor compiler error messages				Non-enterprise IDE support	Poor debugging																		Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials				Nothing.								Future, love , idealism 	ddili.org/forum (Turkish Community )	Ranges  was so cool when I first heard. I liked to come up with one liners .	vibe-d, libmir 	Ranges & std.algorithm							Readable syntax				Simple, but powerful module system	Templates												Functional programming paradigm																	Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8		DCompute	Cross-compilation with LDC					Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 19:41:08	2018-02-28 20:17:28	9768a1b50c
277b6c6a1ac12c8a4a5937a7ef44bf46	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification									"Learn to Tango with D" by Kris Bell, Lars Ivar Igesund, Sean Kelly, and Michael Parker	4	Tango vs Phobos	3		0	4	3	To much targeting c++ crowd	0			1	Huge variance in quality	Does not provide insights about state of language or ecosystem development. Material seems fragmented thematically and in level of depth	3		#d on IRC	#d on StackOverflow			I don't need help		4	No, the D.Learn forum is fine.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development			DevOps										Official tarballs																2.077.1 (latest LDC)												LDC	Linux	macOS			Android	iOS	WebAssembly						make					No	vim / neovim		3	1	3			4	cross compilation	It's awesome, but I miss a few features	accumulated legacy redundant syntax (e.g. all the different ways to declare a lambda)	tuples						multiple alias this								template and mixin debugging	No	3	docs get out of date, undocumented language grammar parts	Yes	2	3	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc		Performance	More -betterC support	More/better container classes			std.eventloop		better json serialization						std.decimal									std.compiler																										std.signals											std.variant		std.xml	std.zlib	std.zip		No, but I want to to			Finding good issues to get started		Personal laziness	No roadmap						Nothing														Poor GC implementation / performance				Poor debugging			Missing support for platform X			Nothing									Fewer third-party libraries than other language						Lack of good examples / tutorials							Lack of progress on DIPs	Lack of focus at the management level			tries to be good at everything and fails to deliver on the promise	expressive yet pragmatic		frustration with c++	phobos	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS				Templates							Contracts				Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime										Reproducible builds						Deprecation of the comma operator						Cross-compilation with LDC	newCTFE		dissatisfaction with native language landscape		Maybe, I miss accountability at the moment		Spaces	2018-02-28 19:15:27	2018-02-28 20:07:50	3f45dbff21
750a41ec5c862dfe489996f18ea52133	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn								4	template parameters not fitting the declaration	5	needs more examples	0	5	4	nothing, really	1	4	it covers things inside the language itself, but doesn't cover tooling, etc.	1	Mostly great content	i don't know, maybe images?	4	D Forum	#d on IRC						5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications											Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows									dub						No	Visual Studio Code		2	1	3	it **looks** old and abandoned		4	better error messages, better gc for runtime	It's ok	@safe @trusted @system nogc nothrow pure inout, very confusing	tuples															No	4		Yes	3	5	5		Auto-decoding for strings			Old modules like std.outbuffer or std.socket				@safe for all modules			Performance		More/better container classes					better json serialization			std.database			std.decimal	std.color	std.image	std.drawing (2D)		datetime - it seems incomplete (no parsing), digest - it only supports old algorithms, process - it seems incomplete too				std.compiler	std.complex							std.digest			stdx.allocator	stdx.checkedint				std.json		std.mathspecial																								it needs to include those easily bindable rock solid stable libraries like php does (including libsodium, database libraries, imaging libraries). I think a target of .NET-tier-large library is accomplishable with external libraries	No, but I want to to				Time is my only enemy				High barrier to entry					Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)						Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging			Missing support for platform X										too many @, pure, nothrow attributes to worry about		Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects													no tooling, i have no idea how others use to code D. i try to use visual studio code with a plugin, but it's futile, plugin keeps stop working	multiple same purpose libraries other than concentrating on improving one and making it standard	C# and C	i don't remember	i wanted to do C but without pain	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C	Readable syntax			Closeness to C/C++							Garbage collection									static foreach													DMD support for AVX2							vibe.d 0.8				newCTFE		it works on windows and linux and is compiled	constantly not working/existent tooling	Maybe, I'm still a student	people need to move from "old" looking things like bugzilla and whatever the old thing the forum is based on	Tabs	2018-02-28 19:29:30	2018-02-28 20:07:41	87feb22b63
13f3c4feb99331c8c600a25e2799af4d	Yes	3					Language specification		D Forum: Learn						d-idioms	Phobos source code	3	"alias this"; the uses of aliases as template parameters; rules regarding struct creation/assignment/destruction.	3	Occasional lack of practical examples.	5	4	4	Takes two clicks instead of one click to get to the bugzilla page. Why do I have to click on "Issues" then click on another link to get to issues?	0			0			3	D Forum							4	I don't care.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily	Web development	Desktop applications		DevOps									Official Windows .exe installer								Homebrew					I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC		macOS	Windows									dub						No	Sublime		5	1	3	Issues languish.		3	DMD specifically - fix inlining bugs that produce incorrect code. Considering both DMD and LDC - fast CTFE.	It's awesome, but I miss a few features	That fully expressive macros can't be written as templated code but need string mixins. That string mixins need to be called with `mixin` and can't have the appearance of ordinary functions. That I can't write an alias for an arbitrary expression. That I often need to create dummy functions to make templates auto-infer parameters.			in-place struct initialization	named arguments					@mutable in immutable	static break					Structs can't implement interfaces	Yes, but only for experimenting/testing/debugging	3	Not written with mathematical rigor but like someone explaining something.	Yes, but only for some projects	3	1	2		Auto-decoding for strings		Poor naming choices		Reliance on the GC		Poor performance				Performance	More -betterC support	More/better container classes				@nogc containers												std.algorithm, std.datetime	std.base64	std.bigint		std.compiler	std.complex	std.concurrency			std.csv		std.demangle	std.digest	std.encoding			stdx.checkedint	stdx.logger			std.json		std.mathspecial		std.outbuffer	std.parallelism		std.process			std.signals	std.socket							std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	Improved performance & a good containers library.	Yes	3	Pull requests languish. If the answer's no then close it. Don't just never respond and hope I get the message.															Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems			The GC is truly terrible. This issue is probably non-solvable.					Poor GC implementation / performance				Poor debugging											C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library		Nothing											Nothing.								Alternative C++.	Don't remember.	CTFE.	Favorite module is std.traits.			CTFE (static if, static foreach)		std.traits										Built-in unittests									Multi-paradigm			static foreach	opt-in GC and runtime		Templated vector operations															New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)						newCTFE		Replacement for C/C++.	Enabling inlining with DMD breaks code.	Yes, but only for a specific project	Inline documentation is a good idea but DDOC is awful.	Meh, I don't care.	2018-02-28 19:19:02	2018-02-28 19:59:06	02964cdfe0
4c54b00776b461a4cae720578589be7b	Yes	5				tour.dlang.org	Language specification										4		4		2	4	4		1	4		0			3						I don't need help		4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily						Game Development										Official .deb packages			d-apt Debian/Ubuntu														2.074.1 (compile-time format checking)									GDC	Linux		Windows									dub						Not applicable	Coedit		4	0				5		It's awesome - keep it as is																				Yes	3	5	6	Nothing - Phobos (Standard Library) is great								@safe for all modules	@nogc		Performance		More/better container classes				@nogc containers	better json serialization							std.color	std.image	std.drawing (2D)					std.bitmanip		std.complex	std.concurrency			std.csv	std.datetime	std.demangle				stdx.allocator	stdx.checkedint			std.getopt				std.meta				std.process		std.regex	std.signals	std.socket	std.stdint			std.traits			std.uri		std.uuid		std.windows	std.xml	std.zlib	std.zip		No, and I don't plan to				Time is my only enemy	Personal laziness							Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.								Readable Fast Convenient	Don't remember	Curiosity, self-challenge	Derelict-SDL2	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays				Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm																	Runnable examples on dlang.org	docarchives.dlang.io					Colorized error messages					Ease of use combined with general purpose usefulness; results in high speed of development and less time spent debugging.	Incredibly weird and unreadable error messages in relation to Templates.	Maybe, I'm still a student		Meh, I don't care.	2018-02-28 19:43:46	2018-02-28 19:56:38	aae85e8857
3bf0399af07840682c888f02afb7a51c	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	Unlearning C++	3	Signal to noise ratio is poor, but more generally incoherency of styles	0	4	5		0			1	Mostly great content		5	D Forum			dlang.slack.com				5	I don't care.	FAQ or guidelines document would nice	Yes, it was a regression.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development								Machine Learning		Science/Research			Official tarballs		Official .deb packages												2.079.0 (nightly)	2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux									dmd		dub				scons		No	Visual Studio Code		2	1	3	Lots of old inconculsive stuff that’s hard to act upon		2	Stop leaking memory	It's awesome, but I miss a few features	Very limitted extensibile syntax (e.g. foreach is), yet many baked-in stuff like switch on strings, synchronized etc	tuples	string interpolation			assert diagnostics											Yes, but only for experimenting/testing/debugging	3	Needs formal memory model + fix many typesafety holes punch through by delegates	Yes	2	3	4								Lack of coherent convention, package hierarchy, consistent error handling, horrible dependency structure				Performance		More/better container classes			std.eventloop		better json serialization	better xml serialization		std.database		std.benchmark	std.decimal	std.color			std.simd	std.datetime													std.encoding			stdx.checkedint	stdx.logger					std.mathspecial				std.path				std.signals		std.stdint		std.system												Sadly I’d rather fix stuff in Druntime. 1st - sane exception or no exception API via Expected!T 2nd - clean exception and package hierarchies 3rd - modern async I/O core made for fibers from the get go	Yes	3	Takes a lot of time, is damn formal at a times. CI is unreliable as hell as well											Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)			Performance problems						Compiler regressions	Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support											Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language														Lack of focus at the management level	Wrong decisions at the management level		It’s all nuts and bolts really. There is no platform to build on.	Fast, powerful, pragmatic	2007	Reinvesting a lot of time spent on C++	std.regex ;)	Ranges & std.algorithm		CTFE (static if, static foreach)						UFCS					Built-in documentation (Ddoc)	Built-in unittests			Garbage collection						Multi-paradigm						Templated vector operations		-betterC			toString with output ranges		Back referencing of mangled symbols							Deprecation of the comma operator					DCompute		newCTFE		Greatest power to mass ratio without Ph.D wield it. Language is great, time to build platform	Leaking private symbols aka 314 and its ilk	No, I'm already donating my free time	Don’t ever give up. The night is darkest before the sunrise.	Spaces	2018-02-28 19:23:11	2018-02-28 19:55:29	b4cff678e5
ca83a55b0a23efebaa89087a32ef51b8	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	Changing spec (I started in 2009) Destructors may not be executed How to use 'shared'	4	Individual documentation page per function that Google helps lend me, because usually I'm not sure about the name of the function. I want to see all std.algorithm functions to browse the list. Individual page is not helpful at all. (I'm an experienced D user.) 	2	3	2	Still a little old school	0			0			5	D Forum					I don't need help		5	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly					Security											Official .deb packages										I compiled D from source			2.078.3 (latest)													DMD	Linux									dmd			make					No, but my company uses D	emacs		4	1	4			5		It's awesome - keep it as is																				Yes	4	6	4					Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc		Performance			Support for modern programming like http, grpc, security.		std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database										std.bigint		std.compiler	std.complex		std.container		std.csv			std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger							std.outbuffer						std.signals												std.windows				Support for more domains (I use Go as well; you can find a solution to any technology you need there.)	Yes	4														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration			Issues with language feature X (e.g. shared, @property)							Poor GC implementation / performance		Nothing								Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects	Little info on StackOverflow						Nothing.								Not snobby, natural, helpful	Andrei's "The Case for D" article	C++ had been stagnant for a while in 2009 and I had matured and my views on what really mattered changed.	std.algorithm, std.range, std.parallelism, and std.concurrency	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters							std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach								toString with output ranges		Back referencing of mangled symbols									New third-party applications (e.g. Tilix)					newCTFE		Programming is still fun	Single context pointer	Yes, I'm already doing so		Spaces	2018-02-28 19:17:43	2018-02-28 19:51:14	9519ad7662
44a845a73518be68bcd685519b2abc58	No, I have stopped using D		We sell SDK's that can be used across various platforms (Windows, Linux, Android, etc - write once and use everywhere) and implementations and other languages like JVM (through JNI), Ruby, etc via extern C linkage. D doesn't offer any advantage on that front as we are forced to bring in the poorly poorly implemented D-runtime. Even from the application point of view, D doesn't even have a descent HTTP server. Please, no, vibe-d is just crap for anything non-trivial! D2 is clearly broken. Unless things are fixed (for good!), we are not going to touch it. Also knowing the history of the D (Walter and Andrei), I really don't think this survey will change anything, but I honestly wish it could.							"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		4	Coming from C++, RAII is not really the same in D. D's RAII is very limited and resource *acquisition* during initialization is not possible at all. It offers only resource deallocation during destruction, which is just a "meh!". GC was *NOT* the biggest hurdle.	3	Doesn't provide enough examples. Doesn't talk about thread safety of the libraries and functions whatsoever.	0	4	4		0			1	Huge variance in quality	The language shifts from first person to second person and back and forth. It would've been much better if the article is written as the first person experience.	4	D Forum	#d on IRC						1	Yes, I like StackOverflow.	Every discussion on D forum is side tracked and beaten to death with off-topic posts arguing about language features or the lack of the same. It is worth staying away and use stackoverflow which is moderated for high quality content.	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly							Big Data		Machine Learning		Science/Research	Large scale server side development	Official Windows .exe installer	Official tarballs	Official .rpm packages	Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows		Android							dub	make	cmake				Yes, I work with D part time	Visual Studio Code		5	1	1	Please move out of that esoteric Bugzilla to GitHub or GitLab.		5		It needs serious work	Way too many keywords!! Why complicate with in, out, etc? const is good enough. immutable?? why not the inverse with `mut`?				named arguments							writing files at compile-time				Please no, I'm not a language lawyer. Just keep the language simple and performant to the core and attract a meritocratic community instead of just an objective one!	No	4		Yes, but only for some projects	0	0	0		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance	More -betterC support	More/better container classes				@nogc containers	better json serialization	better xml serialization		std.database																																					std.regex	std.signals	std.socket			std.system												Make Phobos and D-runtime independent of each other.	Yes	5												Language complexity (e.g. inout, abuse of mixin)		Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems	Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000	Lack of high quality libraries, eg, HTTP server, client (etc.curl is just crap)		Poor Phobos (Standard Library) documentation				Poor GC in heavily multithreaded implementations				dub			D's dependence on a large and bulky runtime	Mix of C/C++ development with D via make/cmake/dub		Auto-decoding of strings	Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects				No good point for learning D						Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Bottom up design is why D is good and is the reason why D is bad.	Good for single threaded "apps" and not libraries.	Andrei's talk in 2015	To see what it offers in comparison to C++ and Java	Mir	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits		Native interoperability with C	Readable syntax				Simple, but powerful module system	Templates																	Templated vector operations							Back referencing of mangled symbols				Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)				Cross-compilation with LDC			Honestly, nothing. Having used MKL, Mir keeps me coming back to D.		No, I don't like the management of the DLF	Please get rid of D2 and give us D3 to really use D. Otherwise, we have better things to do and use other than D.	Spaces	2018-02-28 18:44:24	2018-02-28 19:50:05	93088d9800
b7e05a01dc2ba21bff0813ae902a575f	Yes	4					Language specification	#d IRC on freenode		"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		3	Mostly that some feaures have edge-cases, like structs cannot have a constructor without parameters and there's no UFCS for types at ct.	4	An accesible search bar anywhere in the page	2	4	4	Could feel more alive. For example with a preview of a blog or new packages on code.dlang.org	0			0			4		#d on IRC						5	I don't care.	No	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications	IoT			Game Development			Machine Learning				Official Windows .exe installer						d-apt Debian/Ubuntu	Arch Linux									2.078.3 (latest)													DMD	Linux		Windows				WebAssembly	Embedded				dub						Yes, I work with D part time	vim / neovim		4	1	3	No one has looked at one of my reports. Maybe more things should be delegated for improved efficiency.		4	Better error messages for wrong function arguments.	It's ok	Cannot use things like normal .map on AliasSeq (lack of UFCS syntax for type stuff).	tuples	string interpolation		named arguments						static break		UFCS for local symbols			A better way of creating named stuff at ct that doesn't require string manipulation (a way to avoid string mixins)	No	5	Don't remember.	Yes	2	3	5		Auto-decoding for strings		Poor naming choices		Reliance on the GC	Fear to do breaking changes								More pay-as-you-go		std.eventloop		better json serialization					std.benchmark	std.decimal				std.debug	Traits				std.compiler	std.complex		std.container				std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer						std.signals	std.socket							std.uri		std.uuid		std.windows	std.xml	std.zlib		Be more pay as you go Better std.variant (e.g. for returning Algebraics instead of exceptions) Better error messages using static ifs.	Yes	5	Nothing, was a small change.																	Issues with language feature X (e.g. shared, @property)		Lack of better AST manipulations				Poor compiler error messages		Not much work on embedded and webassembly backends		Non-enterprise IDE support								Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects													Too much work for too few people	Doesn't look at areas where it could get a lot of people (embedded/WebAssembly). I'd prefer a typed union alternative to exceptions.	Powerful, flexible, C-syntax	Don't remember, was looking for a C++ alternative for 3D games	It provided good performance and allocation flexibility but less ugly than C++	Phobos and Derelict ones	Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C		UFCS						Built-in unittests	In, out, ref parameters		Garbage collection				import("myfile")		Multi-paradigm	Functional programming paradigm	It's native and fast	static foreach	opt-in GC and runtime	DMD as a DUB library											DMD support for AVX2	Automatic compilation of imports (dmd -i)			Deprecation of the comma operator					DCompute	Cross-compilation with LDC	newCTFE		It's native Has CTFE Metaprogramming	Tries to be similar to C	Maybe, I miss accountability at the moment	Thanks	Spaces	2018-02-28 18:24:36	2018-02-28 19:45:44	3edbe377dc
f0d6aeab1dbb8a4319dfe261a2fd9673																																																																																																																																																																																																																																																																																																																																																		2018-02-28 19:43:45	2018-02-28 19:43:52	3aa25f888e
b6d367d085e4d31efa9d5a68b76ca689	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org									d-idioms		5	Issues/features I wouldn't discover until I visited D-Idioms, as they're not discussed in Alexandrescu's book nor the DLang Tour.	4	The biggest issue is that it just seems too clustered when everything from a module is thrown onto a single page.  There should be a way to look at individual members on a single page.	5	5	5		1	5		1	Mostly great content		4	D Forum		#d on StackOverflow		My colleagues			3	Yes, I like StackOverflow.		Yes, it was hard to find out why.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications				Game Development					Science/Research									Arch Linux									2.078.3 (latest)													DMD	Linux		Windows				WebAssembly				rdmd	dub						Not applicable	emacs		4	0				4	Better error messages, especially when using template mixins	It's awesome, but I miss a few features	attribute bloat			in-place struct initialization	named arguments								UFCS for local symbols				No	5		Yes	4	4	4					Old modules like std.outbuffer or std.socket			Difficult to remember if something was in std.algorithm or std.range		@nogc	DIP1000	Performance	More -betterC support	More/better container classes					better json serialization					std.benchmark						tuples	std.base64			std.compiler	std.complex				std.csv			std.digest			stdx.allocator	stdx.checkedint						std.mathspecial		std.outbuffer						std.signals	std.socket											std.windows	std.xml			Can't statically import the entire library, ei `static import std;`  	No, but to other D repositories			Finding good issues to get started					High barrier to entry								Non-perfect C++ integration									Poor compiler error messages					Poor debugging								Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects								Too much low-level focus (C/C++)		Lack of progress on DIPs					Fun functional / metaprogramming	I don't remember	It's powerful and expressive. Better/easier metaprogramming and functional programming than any other systems language. Ranges are awesome. Easy to learn multithreading. DUB is decent.	Besides Phobos, GFM	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters				Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach			Templated vector operations					toString with output ranges	Deprecation of the integral promotion for unary operators						Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)		Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		I want to become an expert on DLang and watch it grow in popularity within the industry.	using `static this ()` to initialize maps in the global scope will more-than-likely introduce circular dependencies	Maybe, I'm still a student		Spaces	2018-02-28 16:38:59	2018-02-28 19:43:50	6457e9d632
3acbaf2fecb51959dcf2334ec381643f	Yes																																																																																																																																																																																																																																																																																																																																																	2018-02-28 19:43:14	2018-02-28 19:43:40	3aa25f888e
1aaa5e23b4b6875e501aa00295fa5e59	No, I have stopped using D		Critical bugs regarding destroy function			tour.dlang.org	Language specification		D Forum: Learn								4	Find ways to do certain things , without explicit documentation describing it.	3	The lack of basic examples used to describe functionality.	4	4	4	None	1	5	Lack of interactoin	1	Mostly great content	Blogs are not organized by subjects	5	D Forum							5	No, improve DFeed.	Yes, an actual web fourm	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely		Desktop applications									Science/Research		Official Windows .exe installer	Official tarballs															2.078.3 (latest)													LDC			Windows							dmd								No	Visual Studio + VisualD		4	1	3	Not easy to find issues based on priority		4	Parse C header files	It's awesome, but I miss a few features	Lack of sugar coat for events programming like in c#	tuples			named arguments								UFCS for local symbols				Yes, but only for experimenting/testing/debugging	4	None	Yes, but only for some projects	2	4	4				Poor naming choices		Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes			std.eventloop	@nogc containers			std.graph	std.database		std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)		Traits								std.conv															std.meta							std.signals					std.traits											Make it thread safe, Make it fast, Make it NoGC	No, but I want to to					Personal laziness	No roadmap		High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough		Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC						Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging	dub	DLL support on Windows								Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)					Less corporate support (including jobs) than other languages												Lack of progress on DIPs	Lack of focus at the management level			Weak GC implemenation when comparing to other GC focus languages such as java or c#	high potential language	from a professor	to seek a valid alternative to c++	meta traits, basicly reflective programming.		Mixin	CTFE (static if, static foreach)	std.meta	std.traits		Native interoperability with C					Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler	Contracts		import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library			-betterC				Deprecation of the integral promotion for unary operators									New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)			DCompute	Cross-compilation with LDC	newCTFE				Yes, but only for a specific project		Tabs	2018-02-28 19:22:17	2018-02-28 19:41:10	573cd9b04c
a32622186517892a1bacf6f17a496701	Yes	4			"The D Programming Language" by Andrei Alexandrescu												3	Examples, library docs are difficult to read due to template return types	4	Many of the example are assert() style, which is not typically how you might use the functions. E.g. Sometimes after I sort an array, I want to use the result as an array too. Things like this: assert(isSorted!("a > b")(map!(entropy)(arr)));" Are not particularly helpful to a beginner	4	4	5																																																																																																																																																																																																																																																																																																																											2018-02-28 19:32:51	2018-02-28 19:38:01	c38dd161ff
b0a31184964c4c38c732884a5f35866e	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org		#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe	d-idioms		5	Compiler segfaults	4	Need examples everywhere	0	3	3		1	4		1	Mostly great content		4	D Forum	#d on IRC						4	No, the D.Learn forum is fine.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily												IRC	Official Windows .exe installer							Arch Linux									2.078.3 (latest)													DMD	Linux		Windows							dmd		dub						Not applicable	Visual Studio Code		5	1	4	GitHub issues would probably be better		2	Sane memory use (and less segfaults)	It's awesome - keep it as is																				Yes	3	3	4							Fear to do breaking changes			@nogc				More/better container classes				@nogc containers	better json serialization					std.benchmark	std.decimal	std.color				std.json		std.bigint	std.bitmanip	std.compiler	std.complex		std.container		std.csv		std.demangle				stdx.allocator	stdx.checkedint		std.functional			std.math	std.mathspecial		std.outbuffer			std.process			std.signals		std.stdint		std.system				std.uri		std.uuid		std.windows	std.xml	std.zlib	std.zip		Yes	3	Slow to respond to pull request, stalled																			Compiler memory use				Poor compiler error messages														Virtual by default		C behavior without warning (e.g. signed to unsigned comparisons)						Little marketing / no evangelists											Lack of progress on DIPs				Compiler memory use and compiler segfaults	Convenient, easy, difficult	Wikipedia	It seemed interesting	dlang-requests			CTFE (static if, static foreach)			Performance			UFCS			Simple, but powerful module system			Built-in unittests																																	Colorized error messages			newCTFE		I like it	Compiler memory use	Yes, I'm already doing so		Spaces	2018-02-28 19:15:10	2018-02-28 19:27:17	5489300507
696815fc19c88fc01516d6e01ee01dbc	No, I have never used D			Lack of refactoring tools	"The D Programming Language" by Andrei Alexandrescu							"Learning D" by Michael Parker					2	slices	3		0	2	3	primitive (old-style) forum	0			1	Mostly great content		4							telegram group	3	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications						Embedded Systems		Kernel Development			Official Windows .exe installer																	2.077.1 (latest LDC)												LDC	Linux		Windows									dub						No	DlangIDE		3	0				3		I have a very hard time with D's syntax							language binding to X										No	4		Yes	1	1	1				Poor naming choices										More/better container classes					better json serialization	better xml serialization		std.database									std.base64		std.bitmanip												stdx.allocator																												std.xml				No, but to other D repositories										I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)			Non-perfect C++ integration								Compiler regressions	Poor compiler error messages				Non-enterprise IDE support			DLL support on Windows						Attribute bloat							Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages										Too much low-level focus (C/C++)																					Closeness to C/C++	Simple, but powerful module system						Garbage collection														-betterC															vibe.d 0.8	Colorized error messages							No, I'm not interested into D		Spaces	2018-02-28 19:04:21	2018-02-28 19:20:44	f0f33ba1cf
d7ab771ed5b0501819207222bd7cfa38	Yes	5														A game written in D back in 2006	3	No tools		Not enough examples	0	4	4	Dub packages need more focus	0			1	Always great content	Little discussion	4	D Forum	#d on IRC		dlang.slack.com		I don't need help		3	I don't care.	No	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications				Game Development											Official OSX dmg installer							Docker					2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows		Android	iOS						dub						No	Visual Studio Code		3	1	2	Bugzilla is slow and clunky, I wish gut hub was used		4	Ios/android support	It's awesome, but I miss a few features	Missing version negation statement 	tuples		in-place struct initialization				multiple alias this	UDAs for attributes					Static inheritance			No	4		Yes	4	2	2						Reliance on the GC			@safe for all modules	@nogc	DIP1000	Performance						@nogc containers											Mocking																			std.functional				std.mathspecial								std.signals																Better docs, nogc	No, and I don't plan to								High barrier to entry									Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000			Poor Phobos (Standard Library) documentation			Poor GC implementation / performance				Poor debugging		DLL support on Windows	Missing support for platform X	D's dependence on a large and bulky runtime					Virtual by default	Wrong defaults (e.g. not @safe by default)						Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs	Lack of focus at the management level				Fast, Safe, convenient	Open source game	Seemed a good compromise in comparison to c++	Vibe.d			CTFE (static if, static foreach)				Native interoperability with C	Readable syntax				Simple, but powerful module system			Built-in unittests														DMD as a DUB library																New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8	Colorized error messages		Cross-compilation with LDC			Habbit	The gc 	Yes, but only for a specific project		Tabs	2018-02-28 18:53:06	2018-02-28 19:15:04	3aa25f888e
7ae0c56ee309ff14dfd6a0d216f4234a	Yes	4					Language specification										4		3	The doc doesn't have a good overview of functions and parameter/return type of them. sometimes I know a class should have a function, but not sure what is the function name, it's pretty hard to find it in the doc	0	3	3	too much noise,  for example "Industry Proven" should be in the bottom or in other pages.	0			0			3						I don't need help		4	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development		IoT										Official Windows .exe installer																2.078.3 (latest)													DMD					Android					dmd								No	Sublime		3	1	4			5		It's awesome - keep it as is																				Yes, but only for some projects	3	3	2																																																																																																																																																																																																									2018-02-28 18:43:34	2018-02-28 19:13:40	609ce538b9
030343ba67b0dec810fabe1fefa631fb	Yes	4					Language specification	#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		4	Error messages, especially with respect to templates.	3	Unittests are fine but it could benefit from more high-level usages demonstrating common use of concepts or idioms.	3	3	3	Maybe a job section, although I fear it's too early for that.	0			1	Mostly great content	Not enough images. It's not much and they don't have to bring extraordinary value, but it would create a theme and make most articles easier to identify and remember when skimming through the blog.	4	D Forum	#d on IRC							No, improve DFeed.	No. We need both, but the forum is important as it is the heart of the community on which D is built, taking people away from it would be dangerous I think.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly					Security								Official Windows .exe installer							Arch Linux									2.078.3 (latest)													DMD	Linux									dmd		dub						Yes, I work with D part time	vim / neovim		4	1	3	I don't feel like I understand the process enough to answer. It looks like the work's being done though however slowly.		4		It's awesome, but I miss a few features		tuples		in-place struct initialization		assert diagnostics							UFCS for local symbols				Yes, but only for experimenting/testing/debugging	3	It lacks a complete grammar definition.	Yes	2	4	4			Auto-decoding isn't nothrow	Poor naming choices	Old modules like std.outbuffer or std.socket								More -betterC support					@nogc containers	better json serialization	better xml serialization		std.database							Better HTTP support					std.compiler											stdx.allocator	stdx.checkedint	stdx.logger																					std.uri								- "import std;" for scripts. - Everything in https://docs.python.org/3/library/internet.html - Standard interfaces for things like databases and parsers. They don't have to be the only point of access as not everybody wants to do things the same way, but we need at least standard one way.	No, and I don't plan to					Personal laziness						I feel more competent to contribute to the language in other ways.				Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)						Small library ecosystem && willingness to align myself with what my colleagues already know to facilitate contribution.	Nothing						Nothing														Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages												Lack of progress on DIPs				D doesn't project an image of stability (and I'm not talking about breaking changes). The constant mood in the forum is that D has too many flaws. It seems endless. All people talk about is how such or such feature isn't implemented, or is implemented, or isn't implemented in the right way. Reports of compiler bugs everywhere. I'm pretty sure other languages have the same issues we have, but we're so vocal about it that as a new/not-yet-old/comer it's disheartening. I have no idea how to change that but it's our weakest point IMHO.	Efficient, flexible  Python.	On Wikipedia by browsing the language list. The "foreach (i; iota(11).parallel)" example hooked me.	I was looking for an efficient, native alternative to Python, C was C, and none of C++, or Rust really hooked me.	Phobos. Otherwise: sqdf for json.	Ranges & std.algorithm					Performance	Native interoperability with C		UFCS				Templates		Built-in unittests			Garbage collection						Multi-paradigm	Functional programming paradigm			opt-in GC and runtime				-betterC		New range functionality (substitute, slide)			Back referencing of mangled symbols				Automatic compilation of imports (dmd -i)				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)								It just feels right.	Frequent OOM when using CTFE with no switch to say "take your time, take an hour if you want, use my disk if you must, but please just compile".	Maybe, I miss accountability at the moment	Orange is good.	Spaces	2018-02-28 17:03:59	2018-02-28 19:11:34	fdd96720a9
7af9295ffe3c18b563ea4f8a5b419947	Yes	5					Language specification										5	can't think of any	4	needs more quality examples. details are missing in a few places.	5	5	5	seems ok	0			1	Mostly great content	don't know yet	5		#d on IRC						4	I don't care.	nah	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications		DevOps		Game Development					Science/Research		Official Windows .exe installer							Arch Linux									2.078.3 (latest)													LDC	Linux		Windows		Android		WebAssembly					dub						Not applicable	Sublime		4	1	2	have to make separate account, incredibly annoying to search for existing bugs, difficult to format text, looks old compared to other parts of dlang.org		5		It's awesome, but I miss a few features	imports can be pretty tedious	tuples	string interpolation	in-place struct initialization	named arguments	assert diagnostics			UDAs for attributes		static break	writing files at compile-time	UFCS for local symbols			Pattern matching, null-coalescing operator	No	5	seems ok	Yes	1	5	6		Auto-decoding for strings	Auto-decoding isn't nothrow		Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support				std.eventloop	@nogc containers					std.i18n	std.benchmark	std.decimal	std.color		std.drawing (2D)		std.uri, std.encoding				std.compiler	std.complex		std.container				std.demangle				stdx.allocator	stdx.checkedint		std.functional				std.mathspecial								std.signals	std.socket	std.stdint		std.system						std.uuid		std.windows	std.xml	std.zlib	std.zip	ranges are one of the greatest parts of phobos. more effort should go into providing fantastic interfaces like that (databases, imaging, etc) rather than implementations (sql, jpeg, etc) that will rot as soon as a third-party superior implementation is made	Yes	3	difficult to run same test suite as autotester locally										Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							Getting people started and installing D tools and their dependencies can still be difficult, but it seems to be improving	fast, easy, flexible	too long ago, have forgotten	anything seemed better than PHP at the time	vibe-d	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection			Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm			static foreach				Compile-time format string checking			New range functionality (substitute, slide)	toString with output ranges		Back referencing of mangled symbols					Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages		Cross-compilation with LDC	newCTFE		Nothing better has appeared	template errors can be pretty obnoxious	No, I'm already donating my free time	metaprogramming, wooooo	Meh, I don't care.	2018-02-28 17:07:17	2018-02-28 19:09:25	f3df68ca68
db73921ee8addb06c3715e4a645a6868	Yes				"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			4		3	Hard to search	0	3	3		0			1	Mostly great content		3						I don't need help		3	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly						Game Development			Machine Learning				Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows		Android		WebAssembly			dmd		dub						No	Visual Studio Code		3	0				4		It's awesome, but I miss a few features	Would be good to have pattern matching, sum types.	tuples															No	3			3	3	3						Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000																																																																		No, and I don't plan to				Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)			Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance				Poor debugging															Fewer third-party libraries than other language																					Dlib											Closeness to C/C++		Templates																																												Spaces	2018-02-28 18:59:49	2018-02-28 19:07:17	612a44cd29
afdfe11892fb66784c008906a4dd8fb0	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli							5	Immature tooling / IDE	4	Lacking: High-level introduction per (sub)package, examples, links to alternative ways to do something	0	5	5	It's sometimes not up to date, i.e. promoting the submission deadline days after it has passed	1	3	"D by examples" is a great idea - but needs many more examples.	1	Always great content		4	D Forum		#d on StackOverflow	dlang.slack.com				5	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development						Big Data		Machine Learning		Science/Research		Official Windows .exe installer														download LDC binaries for windows and add to path		2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows	BSD-variant	Android	iOS						dub						Yes, I work with D part time	Visual Studio Code		3	0			I don't like email notifications. Would prefer to be informed of comments to my issue via other notifications (or GitHub issues in general)	4	Better / less cryptic error messages (providing tips on how to fix an error)	It's awesome - keep it as is																				Yes	2	5	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers	better json serialization	better xml serialization		std.database	std.i18n		std.decimal					Most outdated modules, containers							std.container													std.json																							std.xml			1. Replace outdated modules with better versions 2. Make GC opt-in: use ownership (Rust-like), allocators or RC 3. Add a decent String class/struct and overcome autodecoding	No, but to other D repositories			Finding good issues to get started	Time is my only enemy		No roadmap		High barrier to entry							Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)		Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000			Poor Phobos (Standard Library) documentation		Poor compiler error messages	Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging							Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)			Missing enterprise IDE support			Less corporate support (including jobs) than other languages		Few showcases / flagship projects	Little info on StackOverflow									Lack of progress on DIPs				D overall is an awesome language, but poor tooling & low chances to find answers on StackOverFlow etc. make adoption in a corporate environment very challenging	Concise, fast, awesome	I don't remember anymore..	Liked the concise syntax while allowing to write low-level and complex stuff easily	vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters				Contracts				Multi-paradigm			static foreach	opt-in GC and runtime							toString with output ranges		Back referencing of mangled symbols	Reproducible builds				Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8	Colorized error messages		Cross-compilation with LDC	newCTFE		Do more while writing less, let the resulting binary run fast	Strings as plain arrays without wrapper struct etc.	Maybe, I miss accountability at the moment	Don't be afraid of (breaking) change. Improve tooling to help corporate adoption	Meh, I don't care.	2018-02-28 18:04:17	2018-02-28 18:54:42	b8def08d55
2e61a0b2c34b03ac69e42f8f4fe68d39	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org				"Programming in D" by Ali Çehreli							5	linker, bindings	4		2	4	5		1	4	too short	0			4					My colleagues			4	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly		Desktop applications			Security		Big Data							Official tarballs					d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux			BSD-variant						dmd		dub						No	Eclipse		3	0				5		It's awesome - keep it as is																				Yes	3	3	5					Old modules like std.outbuffer or std.socket					@nogc		Performance	More -betterC support						better json serialization	better xml serialization					std.decimal									std.compiler							std.demangle	std.digest			stdx.allocator	stdx.checkedint		std.functional																								std.windows					No, but I want to to										I am just starting to learn D				Missing language feature X / not moving fast enough								Nothing							Non-enterprise IDE support							Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages									Nothing.								new better C++	wikipedia		Derelict	Ranges & std.algorithm					Performance	Native interoperability with C		UFCS							In, out, ref parameters								Multi-paradigm																					New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)									Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 18:23:39	2018-02-28 18:36:03	d1e23c69ee
d79362f945b4f604ba8fb0307e90679b	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification	#d IRC on freenode		"Programming in D" by Ali Çehreli					d-idioms		4	Coming from C++, class semantics are quite different	2	The notion that unittests make good documentation is very much flawed.	0	3	4	don't know	1	4	The explanations should make a decision on what _not_ to explain: first basics only, then later add some details. For example, the first page about imports and modules should just explain the basics; the last section "Imports match directories and files" is too much detail and fills the learner's mind too early with details. (also, the very first sentnce "One of D's core design ... turtles all the way down" is completely unnecessary text and distracts (in several ways). Similarly "The language doesn't expose arbitrary restrictions on you." is not true, of course it does, and is not informative; delete it!)	1	Mostly great content	don't know	4	D Forum	#d on IRC	#d on StackOverflow	dlang.slack.com				3	Yes, I like StackOverflow.	Don't understand question. Different option from D.learn, yes: the up/down voting of StackOverflow makes you able to actually find the answer. (compared to navigating a 10 page thread...)	Yes, it was a regression.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily							Big Data	Embedded Systems			Science/Research		Official Windows .exe installer	Official tarballs			Official OSX dmg installer	Official dlang.org/install.sh script	d-apt Debian/Ubuntu							I compiled D from source				2.077.1 (latest LDC)		2.075.1 (removed built-in .sort)										LDC	Linux	macOS	Windows					Embedded				dub		cmake				Yes, I work with D part time	Sublime		4	1	3	it's OK. Interface is oldfashioned (i.e. no syntax highlighting).		4	Less "we know it best" approach.	It's awesome, but I miss a few features	Cannot see whether something is a reference or not (class vs struct; don't know how to solve it. Simply forcing developer to write "ref" for each variable of a class type won't work if code is generic for structs and classes...) Cannot remember the "is" expression syntax/semantics. Built-in unittests is a misfeature and should be discouraged.														Nothing - D is already awesome		Yes, my project depends on it	2	It lacks rigour	Yes	3	4	2		Auto-decoding for strings				Reliance on the GC									Documentation!	I'm happy as is.														The source code: put unittests in different file from implementation.																																														1. Documentation: examples showing relation between phobos parts 2. Documentation: better display (http://dpldocs.info/ is already much better) 3. Documentation.	Yes	3	Mixed experience. Sometimes too much of a "don't touch our project" attitude. (advice: give the contributing developer some ownership of the project. Yes that means making compromises on your own opinions)																			Spec quality			Compiler regressions	Poor compiler error messages		Quality of Implementation overall								No "clang-format"-quality formatter. On a scale from 0 to 10, clang-format is at 9, dfmt is at 3. 											Less corporate support (including jobs) than other languages			Little info on StackOverflow		Lack of good examples / tutorials											Overall, I think many involved in D are too certain about "we are better than you". Also the D community is often not able to have a serious constructive technical discussion without derailing it with off-topic or subjective comments.	High-and-low-level. Generic programming.	From a friend.	Improved templates/metaprogramming over C++	mir	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates											Multi-paradigm				opt-in GC and runtime	DMD as a DUB library								Back referencing of mangled symbols					Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute	Cross-compilation with LDC	newCTFE		Generic programming, fun to contribute to a language.	Unittests inside the code --> hard to find the actual implementation of functions --> people don't write enough unittests.	No, I'm already donating my free time	Less "we know best", less comparing with other languages and show inner confidence instead.	Spaces	2018-02-28 17:26:11	2018-02-28 18:33:05	f3d47bd5e7
c5e51b32c470210fcfeec1f4d8a7d9bf	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli			"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	debug/find errors, decipher error messages, missing/too little documentation	3	Examples beyond the trivial ones. Complex examples demonstrating more features than one.	0	4	4	Better search	0			1	Mostly great content		4	D Forum							4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly							Big Data				Science/Research		Official Windows .exe installer								Homebrew								2.078.3 (latest)		2.076.1 (static foreach)											DMD			Windows							dmd		dub						Yes, I work with D part time	Visual Studio + VisualD		4	0				4		It's awesome - keep it as is																				Yes	4	4	2					Old modules like std.outbuffer or std.socket							Performance					std.eventloop		better json serialization	better xml serialization	std.graph	std.database	std.i18n								std.base64	std.bigint		std.compiler																																											No, but I want to to			Finding good issues to get started	Time is my only enemy				High barrier to entry						Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation							Poor debugging		DLL support on Windows				Nothing									Fewer third-party libraries than other language					Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials				Nothing.									C/C++ Users Journal	I liked it.	std.algorithm std.range	Ranges & std.algorithm	Mixin				Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests							import("myfile")		Multi-paradigm	Functional programming paradigm			opt-in GC and runtime						New range functionality (substitute, slide)								Runnable examples on dlang.org					vibe.d 0.8			Cross-compilation with LDC	newCTFE				Maybe, I miss accountability at the moment		Spaces	2018-02-28 18:08:27	2018-02-28 18:27:14	2dd67382ad
ccb9177f87d9a6607a98c0ac1672ed2d	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification		D Forum: Learn						d-idioms		5		5		3	5	5		1	5		0			5	D Forum							5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly	Web development	Desktop applications				Game Development							Official Windows .exe installer						d-apt Debian/Ubuntu											2.077.1 (latest LDC)												LDC	Linux		Windows				WebAssembly					dub						No	Intellij		3	0				5		It's awesome - keep it as is																				Yes	3	6	6								std.json, std.xml				Performance							better json serialization	better xml serialization					std.decimal					std.json					std.complex				std.csv		std.demangle					stdx.checkedint																															No, but I want to to				Time is my only enemy																	IDE	Nothing							Non-enterprise IDE support							Nothing								Nothing											Nothing.												Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS						Built-in unittests			Garbage collection																New range functionality (substitute, slide)																Cross-compilation with LDC					Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 18:10:48	2018-02-28 18:25:37	287ee86373
adf4b820f519ffe0b2c1005ed0a43ef1	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification								d-idioms		2	Finding a good editor, setting everything up, many examples I tried on github didn't work because of deprecation/dependencies. It took a long time before I could create a simple window.	3	It describes what, but not why. (Why does 'walkLength' exist alongside 'length'? Why use 'chain' instead of 'joiner'?) Examples are very artificial instead of displaying real world use.	0	4	5	The forum interface doesn't support syntax highlighting / markdown / any other styling	1	4		1	Mostly great content		5	D Forum							5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development							Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows							dmd		dub						Not applicable		Xamarin Studio / Mono-D	3	1	1	Bugzilla is this huge wall of issues without any overview telling me what issues are hot / being worked on / relevant for me.		4	More simplified meta-programming. D has many features that seem to tackle one problem specifically, they are more rigid than the C preprocessor, but not as flexible.	It's awesome, but I miss a few features	Certain common operations could use some syntactic sugar.	tuples	string interpolation	in-place struct initialization		assert diagnostics		multiple alias this			static break						No	4	Some things are not clearly defined (or I can't find it). (should alias this work with templates? When can template types be inferred and when not?)	Yes	2	0	1					Old modules like std.outbuffer or std.socket		Fear to do breaking changes					Performance		More/better container classes			std.eventloop	@nogc containers			std.graph			std.benchmark		std.color	std.image	std.drawing (2D)			std.base64	std.bigint		std.compiler	std.complex	std.concurrency	std.container		std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger		std.getopt	std.json		std.mathspecial	std.meta	std.outbuffer	std.parallelism					std.signals	std.socket	std.stdint		std.system		std.typecons		std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	- No multimedia (GUI, drawing, audio) - No containers - Unclear when to use what functions	No, but I want to to			Finding good issues to get started					High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough					Issues with language feature X (e.g. shared, @property)						Poor compiler error messages				Non-enterprise IDE support	Poor debugging	dub			D's dependence on a large and bulky runtime		Nothing												Few showcases / flagship projects		Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials							Lack of progress on DIPs				Some parts of the language / phobos modules have lower quality than others or weird quirks. (like compile time regex blowing up code size) It gives the feeling of a minefield.	Better than C++	I saw it in a benchmark being close to C/C++ in performance	I wanted to learn C++ to make a game, but then found D to be better	dplug	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays					import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library															Deprecation of the comma operator							newCTFE		It's safer than C++ and not VM based like C#/Java		Maybe, I'm still a student		Tabs	2018-02-28 16:45:50	2018-02-28 18:24:44	9b04337ce5
78301e5acfbf1f09b063a89bf0d51e78	No, I have stopped using D		no time, waiting for it to become more reliable, doesn't work on Android, has no path to create a UI		"The D Programming Language" by Andrei Alexandrescu		Language specification										4	compiler bugs	2	no examples on how to use stuff. descriptions  of intent lacking.	3	2	2	too much noise in the way	0			1	Always great content	no real complaints. would be nice to have insight into the direction development is heading (e.g. DIPs).	0	D Forum							3	I don't care.	don't care	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications		DevOps	Security				Machine Learning				Official Windows .exe installer	Official tarballs		Official .deb packages		Official dlang.org/install.sh script																							i don't actively use right now as mentioned above	DMD	Linux		Windows		Android		WebAssembly			dmd	rdmd							No	Visual Studio Code		1	1	1	capricious wontfix. it is a black hole (lots of old, dead, and ignored).		2	nicely formatted, understandable range/template error messages; performance of compiled code	It's ok	no builtin tuples + destructuring, no declarative assignment for associative arrays, no async/await	tuples	string interpolation	in-place struct initialization		assert diagnostics		multiple alias this								non x86 ASM, builtin 128-bit number type, async/await	No	3	hard to find on the website	Yes	0	0	0		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes	bloated, doesn't have everything but pretends to, have to constantly refer to website to remember API for some reason, missing modules (e.g. HTTP, comprehensive compression, collections, serialization, database), everything is at the top-level, std.parallelism + std.concurrency need better support and integration/API redesign		@nogc		Performance		More/better container classes	everything should be rangebased (I/O), remove old stuff and replace with decent code (e.g. JSON, XML, meta)		std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal	std.color	std.image	std.drawing (2D)	cryptography (a standard way to bind to another library that just works is fine)	autodecode, std.parallelism/concurrency, std.container, ranges (mainly due to the naming), string and array overlap with algorithm sometimes, where's my non-fp math?, std.uni/utf/ascii division is unclear and functionality sometimes duplicated	std.base64			std.compiler	std.complex						std.demangle				stdx.allocator	stdx.checkedint	stdx.logger	std.functional		std.json		std.mathspecial				std.path				std.signals		std.stdint						std.uri					std.xml	std.zlib	std.zip	needs predictable structure (nesting) so it makes sense to find stuff, support for reactive-style event/streaming, remove old/stale/bad code, why is perfection always the enemy of good with this library?	No, and I don't plan to			Finding good issues to get started	Time is my only enemy		No roadmap	D community	High barrier to entry			i tried before but the setup was too difficulty on Windows			Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)			Performance problems	Issues with language feature X (e.g. shared, @property)		concurrency, shared libraries, DLLs need to just work and be easy		Poor Phobos (Standard Library) documentation	Compiler regressions	Poor compiler error messages		performance (don't care about the GC so much)				dub	DLL support on Windows	Missing support for platform X				Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library	concurrency is difficult; const/immutable are a strait jacket that are missing the reference capabilities (i.e. trn) from Pony to make them usable	Nothing														Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level	perfection tends to be the enemy of good; the forum has irritating, caustic voices that shoot down progress constantly; i don't care if you break stuff just fix it!	lack of focus. i realize it is a community driven project. but while that is its strength it is also its greatest liability that constantly prevents work from getting done and prevents the design of the language achieving focus.	frustrating unfulfilled potential	somewhere years ago on a programming language article	it promised to be fast and low level (had ASM blocks) and still had nice arrays and I thought it had good string support	one's I've written	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance							Templates		Built-in unittests		@safe strings + arrays		Inline assembler	Contracts				Multi-paradigm		i would have added (w) but i don't like the design of std.concurrency		opt-in GC and runtime		Templated vector operations					toString with output ranges		Back referencing of mangled symbols			DMD support for AVX2				Deprecation of the comma operator					DCompute		newCTFE	WinSDK not required	lost my motivation because required features never get implemented, but still watch the releases because unfortunately there is not much better out there	wrong default attributes + not enough attribute inference + const/immutable are too difficult to work with (Pony got this one right) + attributes integrate poorly with templating	No, I don't like the management of the DLF	I thought the DLF was going to finally bring paid development to the language. I think that is what D needs to make real progress and get mindshare.	Meh, I don't care.	2018-02-28 16:44:26	2018-02-28 18:23:10	01d11eb82f
5edb40f4356a9f77722027bd8e9ca184																																																																																																																																																																																																																																																																																																																																																		2018-02-28 18:16:31	2018-02-28 18:17:25	fe31450ca0
ee71534ef19b28efbae9c5c8b37f10bc	Yes	4				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli					d-idioms	Trial and error, stack overflow 	3	There isn't a lot of easily accessible up to date information for people between newcomer and expert. Most of the information is targeted at either one or the other with not much in between. 	4	Occasionally the documentation is overly technical and the examples aren't well-documented 	0	5	4	Dlang.org is the standard to which we should hold other languages and tool chains. 	1	5		1	Mostly great content	Some of the posts get fairly rambley	4						I don't need help		5	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly				DevOps		Game Development						Internet, non-web	Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows		Android		WebAssembly					dub						Not applicable	Visual Studio Code		3	0			Haven't *discovered* anything wrong. 	5		It's awesome, but I miss a few features	Fibers don't quite have the same level of ease as async/await 	tuples	string interpolation														No	5		Yes	3	2	2				Poor naming choices		Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance						@nogc containers	better json serialization	better xml serialization								std.drawing (2D)		Collections	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex				std.csv		std.demangle	std.digest	std.encoding			stdx.checkedint						std.mathspecial					std.process				std.socket	std.stdint		std.system						std.uuid				std.zlib			No, but to other D repositories				Time is my only enemy	Personal laziness																	Nothing							Non-enterprise IDE support	Poor debugging										Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials							Lack of progress on DIPs					C++ done right	Random Google searches	I wanted to learn a language that executed at the metal	Gfm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits		Native interoperability with C	Readable syntax	UFCS				Templates			In, out, ref parameters	@safe strings + arrays	Garbage collection							Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library																						newCTFE		It feels like the only space where fresh things are happening without Javascript-level crazy. 	Default of @system 	Maybe, I'm still a student	D is awesome 	Spaces	2018-02-28 17:30:58	2018-02-28 18:09:50	b9c9198adf
14038097590a4c8666268814e020a4e6	No, I have stopped using D		Job uses C++. Learning Rust @ home.		"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn								4	Nontrivial type errors when writing complicated code.	4	Often simple examples are (back in 2016) missing	4	3	4	It's pretty ugly. 	1	5	Ugly.	0			3	D Forum							4	I don't care.	StackOverflow is awesome, but that's a third party, no control of data.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development	Desktop applications			Security						Science/Research					Official .deb packages																									Don't remember		Linux		Windows		Android					dmd	rdmd	dub						No	emacs		3	1	3			4		It's awesome, but I miss a few features	Missing proper algebraic data types, pattern matching, non-nullable types	tuples	string interpolation	in-place struct initialization				multiple alias this									No			Yes	3	5	3									@safe for all modules	@nogc																																																																			No, and I don't plan to													Language complexity (e.g. inout, abuse of mixin)																	Poor debugging																Less corporate support (including jobs) than other languages																					Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta		Performance			UFCS			Simple, but powerful module system			Built-in unittests					Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach			Templated vector operations				New range functionality (substitute, slide)				Reproducible builds									vibe.d 0.8								Maybe, I miss accountability at the moment		Spaces	2018-02-28 18:00:02	2018-02-28 18:09:23	02b34002ff
24e3a8d89f4905072bec8d6520380636	No, I have stopped using D		Lack of good IDEs, sometimes getting things compiled was a headache. Spent too much time investigating why this or that does not compile/how to compile instead of coding.			tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							4	Putting a build environment. Dlang targets itself as being in the same spirit as other modern languages like C#, Java, JS etc., while it is bogged down by the historical baggage of how development process worked in C and the likes.	4	Nothing in particular. Did not get far enough into the language to start noticing what is lacking in the docs.	0	4	4	Nothing in particular.	1	4		1	Mostly great content		5	D Forum							5	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications							Machine Learning				Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu																						No idea, can't remember the version number.	LDC	Linux		Windows									dub						No	Visual Studio + VisualD		2	0			Not being sure if the issue is known. Trawling through all the existing trying to find out is way too much work.	4	A short bullet inbuilt tutorial on project compilation for people not familiar with CL deployment toolchains.	It's awesome, but I miss a few features	Lack of string interpolation. Big turn-off.	tuples	string interpolation														No	5		Yes, but only for some projects	3	3	4	Nothing - Phobos (Standard Library) is great																	@nogc containers	better json serialization			std.database				std.color	std.image	std.drawing (2D)		Json lib.																																															No, and I don't plan to				Time is my only enemy						I am just starting to learn D																			Non-enterprise IDE support	Poor debugging															Fewer third-party libraries than other language			Few showcases / flagship projects	Little info on StackOverflow														Low level but not tedious to write	Not sure	Need to be able to write low level apps without being burdened by C.		Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax							Built-in unittests				Inline assembler				std.concurrency & std.process																	DMD support for AVX2		Runnable examples on dlang.org					vibe.d 0.8						Nothing in particular at the moment.		No, I'm not interested into D		Spaces	2018-02-28 17:43:53	2018-02-28 18:05:50	ae57e4c2b9
6e002e153c1caf5f31a5797a09d25c86	No, I have stopped using D		IntelliJ plugin don't work well													I know C# already so it was easy to pick up, then i learned few bits from various places (doc, forums)	5	Bad IDE plugin	3	For XML for example it was hard to understand, i think it needs to be simpler like the C# 	0	4	3	You go to website to download or to learn about the language, if you use D you rarely go to website, so it needs to focus on new people, managers, and learning stuff only	0			1	Poor/unhelpful content	More library spotlight, more IDE plugin spotlight, so more people will come and help maintain them, because IDE support is really lacking!!!!	2	D Forum	#d on IRC						5	Yes, I like StackOverflow.	it shouldn't be limited to one place, but need people, i think forum is nice, but please open GITHUB issue tracker, this is modern, this is where people are!	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications				Game Development							Official Windows .exe installer								Homebrew								2.078.3 (latest)													LDC	Linux	macOS	Windows				WebAssembly					dub						Not applicable	Intellij		1	1	1	i have to register in a place i don't know, please use github issue tracker, this is modern and where all the young people are, i don't want to register in mailing list this is for old people		5		It's awesome, but I miss a few features	i'm not a fast of casting, i prefer the c# way	tuples	string interpolation		named arguments	assert diagnostics											No	4	i don't know	Yes	3	3	3	Nothing - Phobos (Standard Library) is great														easier to use in project, with simple example				better json serialization	better xml serialization										i hated XML	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container	std.conv	std.csv	std.datetime	std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt			std.mathspecial	std.meta	std.outbuffer	std.parallelism	std.path				std.signals		std.stdint		std.system	std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows				i don't know	No, but to other D repositories								High barrier to entry		I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)								lack of IDE support						lack of IDE support (intellij is crossplatform)		Non-enterprise IDE support	Poor debugging								Attribute bloat				Ugly bits of the standard library					Little marketing / no evangelists		Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials					Too much low-level focus (C/C++)				Wrong decisions at the management level	lack of IDE support, and community don't seems to care..	lack of IDE support!!! this is my main issue!	simple fast small	reddit	i wanted same high level language as c#/java but that compile to native, i found D! but lack of IDE support is annoying..	derelic (all gamedev libraries)	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax				Simple, but powerful module system				In, out, ref parameters		Garbage collection						Multi-paradigm																								Colorized error messages					i want fast / easy / simple / compile to native / sexy syntax 	lack of IDE support	Yes, but only for a specific project	PLEASE, focus on tooling, we NEED IDE support, pick intellij and focus on the plugin, look at rust, go, they all have intellij plugin, and people pick them, it is easier to learn / pick up language if it is supported in an IDE, code completion, syntax highlight etc, this is essential nowadays	Spaces	2018-02-28 17:44:15	2018-02-28 18:04:36	3d1d574506
c7e893e8e36abce0bb9bf905d7134d95	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								3	This was back in 2012, so there were very few resources available.	3	It has improved greatly in the past two years so it's really just a matter of someone doing the work on the less popular modules to fix them up.	4	4	4	The fact that the various parts of it are down so much (such as the tour).	0			1	Always great content		4	D Forum	#d on IRC						3	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly					Security								Official Windows .exe installer													I compiled D from source			2.078.3 (latest)													DMD	Linux		Windows		Android			Embedded		dmd	rdmd	dub						No	Sublime		1	1	3	Bugzilla is where bug reports go to die.		4		It's awesome, but I miss a few features	The syntax for mixins and template mixins should be unified. Also, I do not agree with the deprecation of octal numbers, hex string literals, and complex number literals.	tuples														Pattern matching	No	2	I feel like there are a lot of unintentional ambiguities in the specification.	Yes	2	5	5		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc					As much as possible, support for @safe nothrow @nogc. I'm divided on whether -betterC should be supported, and whether DIP1000 should be supported throughout the library.			@nogc containers	better json serialization	better xml serialization		std.database									std.base64		std.bitmanip	std.compiler	std.complex				std.csv				std.encoding											std.outbuffer						std.signals	std.socket	std.stdint														std.concurrency needs some love as it is getting outdated, and probably std.parallel as well.	Yes	2	You have to constantly fight and harass people to get your PR merged. I think that's changed a little bit within the last year but it was really bad when I started contributing.										Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							I think D's main weak point has always been outreach and a divided focus between various issues.	Native compiled Lisp	Bartosz Milewski's website	I was looking for an alternative to C++ and various features of D looked like they would make writing code much easier.	unit-threaded by Atila Neves	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits			Readable syntax	UFCS				Templates		Built-in unittests					Contracts		import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library			-betterC					Back referencing of mangled symbols							Deprecation of the comma operator							newCTFE		Since I learned D, I can't use any other language. I always miss some feature from D that the language doesn't have.	The import visibility bugs	No, I'm already donating my free time	I have donated once to the DLF, but I do not do it regularly because as I live outside the US, I do not get tax benefits.	Spaces	2018-02-28 15:16:40	2018-02-28 18:03:10	e22624ea5f
23cef39100cff184b920bc6b464807b6	No, I have never used D			the on-by-default GC		tour.dlang.org											5					3																																																																																																																																																																																																																																																																																																																												2018-02-28 18:00:59	2018-02-28 18:02:22	3c89646f2c
6c6d4cf3b8c117a9d401fef939b2de75	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			4	Templates, alias this, ranges,  inout, fibers	3	Examples, templates constraints  noise	0	4	3	Obsolete forum	0			0			3	D Forum							2	I don't care.	No	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications										Business apps, cloud	Official Windows .exe installer																2.078.3 (latest)													DMD			Windows				WebAssembly			dmd							Visual Studio	No	Visual Studio + VisualD		4	1	3	Process is ok, but the interface is obsolete		3	Clear error messages	It's awesome, but I miss a few features	Built-in keywords for ranges, coroutines,  events.  How much attributes not inferred		string interpolation		named arguments											Explicit interface implementation, async/await, yield,	No	4	Inconsistency	Yes, but only for some projects	3	0	1		Auto-decoding for strings		Poor naming choices				Template constraints verbosity. Fear of gc.				Performance		More/better container classes	Decimal types, oop classes, i18n		std.eventloop		better json serialization	better xml serialization			std.i18n		std.decimal					Files, strings (everything is a fucking range), events, threads, datetime	std.base64		std.bitmanip		std.complex	std.concurrency	std.container		std.csv		std.demangle	std.digest		std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional				std.mathspecial					std.process		std.regex	std.signals	std.socket	std.stdint														Range obsession. 									High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough					Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation		Poor compiler error messages				Non-enterprise IDE support	Poor debugging	dub	DLL support on Windows					Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library					Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow				Few transition guides from programming language Y			Too much low-level focus (C/C++)			Lack of focus at the management level	Wrong decisions at the management level		Linux centric	Smart but incomplete	Google, searching for a c# native compiler	Fun	None			CTFE (static if, static foreach)					Readable syntax					Templates	Built-in documentation (Ddoc)				Garbage collection	Inline assembler					Multi-paradigm			static foreach																	Deprecation of the comma operator									Hobby	Inout, alias this, integer promotion rules	Yes, but only for a specific project	Modernize	Spaces	2018-02-28 17:35:53	2018-02-28 18:01:52	321fd161f6
d1f3baf3c134d0196c87023be21ceaae	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli							3	Understanding how to use D after years of C++, it's easy to see D as a "bad" C++ if you try to use C++ tecniques	5	Nothing, it's very good!	4	5	4	The who is using D logos and DConf advert look a bit like advertising spam	0			1	Always great content	I would like to see more articles in general. I would like to see more articles showing "this is how you do *this* in D" assuming you already know the language you just don't always know the best way to do things	4	D Forum		#d on StackOverflow					4	No, the D.Learn forum is fine.	I don't really understand this question	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly		Desktop applications				Game Development							Official Windows .exe installer			Official .deb packages							Choco							2.077.1 (latest LDC)												LDC	Linux		Windows														shell scripts / cmd.exe scripts!	No	vim / neovim		5	0			I've not needed to open any issues	5		It's awesome, but I miss a few features	I would like c99 style struct initializers I don't really like the @ in front of some keywords. 			in-place struct initialization	named arguments												Yes, but only for experimenting/testing/debugging	4	No real issues but sometimes it's difficult to know what to search for	Yes	4	4	4					Old modules like std.outbuffer or std.socket					@nogc		Performance	More -betterC support				std.eventloop	@nogc containers												sockets. Non GC collections		std.bigint	std.bitmanip	std.compiler	std.complex				std.csv		std.demangle					stdx.checkedint						std.mathspecial		std.outbuffer						std.signals		std.stdint					std.uni	std.uri	std.utf	std.uuid	std.variant		std.xml			Better support for nogc (But not at the cost of gc stuff as that is awesome and usually what I want)	No, and I don't plan to											I'm interested in using D as a langauge but not so much on working on it. It's not that I wouldn't it's just that I would rather use it for things I'm more interested in	Nothing														Poor GC implementation / performance								D's dependence on a large and bulky runtime		Nothing												Few showcases / flagship projects					Few transition guides from programming language Y		Nothing.							Nothing not already mentioned	fast, efficient, easy	No idea!	Because I want to like C++ but it's grown into a monster and D is much closer to the language it should have been.	Not sure	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates					Garbage collection	Inline assembler													-betterC																					I want a better language than C++ which has gone the wrong way, but which fills the same niche	Big run time library	Maybe, I miss accountability at the moment	The donate question doesn't really have my option of maybe a very small amount but I'd need to be convinced.	Spaces	2018-02-28 17:40:37	2018-02-28 17:57:32	dc6e0cd57f
7cef9ee5227a57eb48b8984f58d28e39																																																																																																																																																																																																																																																																																																																																																		2018-02-28 17:57:11	2018-02-28 17:57:19	91b23fe94c
d7f5a4f181141170eb64b821281c7b16	Yes	4								"Programming in D" by Ali Çehreli							3	Setting up IDE and debugging on windows and getting used to using 3rd party libraries on windows in a way that is not as UI friendly as I am used to from a .Net developer perspective (.NET has everything you need available easily and packaged with a nice bow)	3	Wanted more examples ( has gotten better), Template/Range heavy doc can be hard to read	0	3	4		0			1	Always great content		4	D Forum							4	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development	Desktop applications				Game Development							Official Windows .exe installer																		2.076.1 (static foreach)											DMD			Windows		Android	iOS				dmd		dub						No	Visual Studio + VisualD		3	0				4		It's awesome - keep it as is																				Yes	3	4	4					Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc				More/better container classes						better xml serialization		std.database					std.image					std.bigint	std.bitmanip						std.csv							stdx.checkedint								std.outbuffer																				std.zlib	std.zip	I can't attempt to bring it up as an option for work because of no XML library	No, and I don't plan to								High barrier to entry		I am just starting to learn D					Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)										Non-enterprise IDE support			DLL support on Windows													Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects															Expressive Efficient Small	Professor 	Lets me write less code than C++ but can be as fast	std.algorithm	Ranges & std.algorithm	Mixin											Templates		Built-in unittests								std.concurrency & std.process	Multi-paradigm			static foreach	opt-in GC and runtime																	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)								Like the language features	shared, not necessarily the concept but that it seems unfinished/unsupported or maybe just not well documented	Yes, just tell me how		Tabs	2018-02-28 17:19:38	2018-02-28 17:55:45	c035fe9a8a
9afe69f39545b37955756edc594e9ae2	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification	#d IRC on freenode	D Forum: Learn					"D Cookbook" by Adam D. Ruppe		Hobbyist programming	5	The semantics of how D behaves weren't immediately apparent when I started learning D, and it took a while to discover certain things.	5	It's hard to say. It's generally pretty good.	5	5	5	It would be nice if the Downloads page contained a link to a Personal Package Archive for installing different versions of D on Ubuntu signed with developer keys.	0			1	Always great content	It's pretty good.	5	D Forum	#d on IRC						5	Yes, I like StackOverflow.	People go to Stack Overflow first to find answers, so it would be good to have the answers to questions on there so new users see them right away.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development	Desktop applications											Official Windows .exe installer			Official .deb packages										I compiled D from source			2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd	rdmd	dub						No	vim / neovim		5	1	5			5		It's awesome - keep it as is																				Yes	5	6	6		Auto-decoding for strings	Auto-decoding isn't nothrow			Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc			More -betterC support						better json serialization			std.database			std.decimal							std.bigint			std.complex		std.container								stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial																								It would be nice to have well defined database APIs to use in D code, probably with Fiber support. It would be nice to have a reference implementation for sqlite like Python does.  It would be nice to have higher-level APIs for JSON HTTP requests.	No, but I want to to				Time is my only enemy	Personal laziness										Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration						Nothing						Nothing									Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects							Nothing.								It's pretty great.	A friend mentioned it once.	It's like C++, but you don't want to shoot yourself after you've written something.	Probably vibe.d.	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler	Contracts		import("myfile")		Multi-paradigm	Functional programming paradigm			opt-in GC and runtime				-betterC		New range functionality (substitute, slide)	toString with output ranges	Deprecation of the integral promotion for unary operators		Reproducible builds				Runnable examples on dlang.org					vibe.d 0.8			Cross-compilation with LDC	newCTFE		D compiles very quickly, is easy to read and understand if you aren't writing the most complex template stuff, and executes very quickly. D's ranges are the best way to write code.	I'm not sure.	No, I'm already donating my free time		Spaces	2018-02-28 17:28:36	2018-02-28 17:53:54	d154d43989
ae354b0cb21e036865561d0258181913	No, I have stopped using D		I changed jobs.		"The D Programming Language" by Andrei Alexandrescu		Language specification										4	Understanding the rules of immutability, enum and alias.	4	There could be a few more advanced examples.	0	5	5	Nothing	0			1	Mostly great content	I could use a few more articles about the future direction of the language.	3	D Forum				My colleagues		Reddit	4	I don't care.	No	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications	IoT	DevOps				Embedded Systems	Machine Learning	Kernel Development			Official Windows .exe installer	Official tarballs																2.077.1 (latest LDC)												LDC	Linux		Windows					Embedded		dmd	rdmd	dub	make	cmake				No	Visual Studio + VisualD		4	0			Haven't had the need yet	5		It's awesome, but I miss a few features	Some syntax decisions around enum and the structuring of modules that lead to huge d files covering an entire module instead of the java / C# / modern C++ option of preferring one file per type and those types combining to make a module makes it seem like the language was not made to scale.	tuples		in-place struct initialization				multiple alias this	UDAs for attributes		static break	writing files at compile-time	UFCS for local symbols				No	4	Better linking to the tour.	Yes	0	4	3				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance		More/better container classes			std.eventloop	@nogc containers			std.graph		std.i18n		std.decimal					std.socket		std.bigint			std.complex						std.demangle	std.digest																										std.uri								Move all allocating parts of the library to stdx.allocator	No, and I don't plan to			Finding good issues to get started	Time is my only enemy				High barrier to entry						Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance				Poor debugging		DLL support on Windows										Ugly bits of the standard library	Garbage collector is a problem in a lot of my working environments	Nothing											Nothing.								Interesting, capable, generative	That was a long time ago in an article about D before 1.0	I was at the time highly displeased with Java, C# and C++	cregex	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits			Readable syntax	UFCS				Templates		Built-in unittests	In, out, ref parameters			Inline assembler	Contracts				Multi-paradigm			static foreach	opt-in GC and runtime		Templated vector operations										DMD support for AVX2		Runnable examples on dlang.org								Cross-compilation with LDC			The template / mixin system allows me to do much of the metaprogamming that I want to explore in my private time.	The garbage collector	Maybe, I miss accountability at the moment	Nope	Spaces	2018-02-28 17:30:38	2018-02-28 17:51:44	f6e94b4d59
69d74f4ee3f7223ef4e446bed924607e	Yes	4					Language specification									D Forum: General	3	Compiler bugs	3		1	3	4		0			1	Mostly great content		4						I don't need help			Yes, I like StackOverflow.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications				Game Development							Official Windows .exe installer			Official .deb packages		Official dlang.org/install.sh script			Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows		Android	iOS	WebAssembly					dub						Yes, I work with D full time	Sublime		4	1	3	Suboptimal interaction with GitHub		3	Optimized CTFE and templates	It's ok	Some inconsistencies, such as template declarations vs. instantiations or delegate type declarations vs. expressions							multiple alias this	UDAs for attributes		static break					DIP1000	No	4		Yes	3	3	3		Auto-decoding for strings						Bad/slow adoption of type system features (@safe, nothrow, @nogc, shared)	@safe for all modules	@nogc	DIP1000			More/better container classes											std.decimal	std.color									std.complex												stdx.logger													std.signals								std.uri				std.windows	std.xml				Yes	4																			@safe-ty problems / missing DIP1000	Compiler/linker bugs on big code bases						Compiler/linker bugs on big code bases	Nothing											Virtual by default	Wrong defaults (e.g. not @safe by default)				Nothing												Too much low-level focus (C/C++)		Lack of progress on DIPs		Wrong decisions at the management level			Expressive, Fast, Safe	C'T (German print magazine) in pre-1.0 times	Promising alternative to C++	vibe.d	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax				Simple, but powerful module system		Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection				import("myfile")		Multi-paradigm			static foreach													DMD support for AVX2	Automatic compilation of imports (dmd -i)			Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8		DCompute		newCTFE		Lack of better alternatives	Optlink	No, I'm already donating my free time		Tabs	2018-02-28 17:19:10	2018-02-28 17:50:32	e47b7f6365
a7ad31e98a7ca474b7ca24ffe1288bb4	Yes	5					Language specification		D Forum: Learn						d-idioms		4	Lack of ways to translate common C++ idioms	5	Functions that return GC-allocated memory should mention this (many already do though).	0	4	5		0			1	Mostly great content		4	D Forum		#d on StackOverflow					4	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications				Game Development					Science/Research			Official tarballs	Official .rpm packages														2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows		Android							dub						No	Coedit		4	0			The issues (compiler bugs) already existed for years but haven't been fixed.	4	Better organization and documentation of source to help newcomers understand and contribute to the compiler	It's awesome, but I miss a few features								multiple alias this				writing files at compile-time				Implicit constructors like in C++ (and Calypso LDC)	No	5		Yes	3	4	5		Auto-decoding for strings				Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000			More/better container classes				@nogc containers												std.conv, many string-related functions, and any functions that throw exceptions are impossible to use with nogc code.									std.csv											std.json				std.outbuffer					std.regex	std.signals	std.socket											std.windows	std.xml	std.zlib	std.zip	Phobos functions that allocate memory should work cleanly with allocators; refcounted strings; 	No, but to other D repositories				Time is my only enemy				High barrier to entry						Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000		Nothing						Nothing											Virtual by default	Wrong defaults (e.g. not @safe by default)				Nothing														Lack of progress on DIPs				Lack of widespread experimentation with huge changes like DIP1000 . Discussion alone may not demonstrate all the pros/cons of such changes, or the robustness of proposed implementation. The -dip1000 compiler switch and stdx/std.experimental are a good start for having the community test experimental features before they're finalized.	Best overall balance	Searching for modern C-like languages on Wikipedia	I wanted a lower-level alternative to C# without losing the clean syntax.	pegged			CTFE (static if, static foreach)	std.meta	std.traits	Performance		Readable syntax					Templates														static foreach	opt-in GC and runtime																									Ease of use without sacrificing power or performance	Inflexible type system (specifically classes) compared to Rust or Haskell	Maybe, I'm still a student		Tabs	2018-02-28 15:55:53	2018-02-28 17:42:58	54b81dd354
3b133e25b33e76b958ad4c32b02fa705	No, I have stopped using D		Not enough focus on tooling and libraries		"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli							4	Unfinished features and libraries	3	Not enough examples.	1	3	3	It's incredible hard to contribute to due to ddoc usage!	0			1	Huge variance in quality	Needs more marketing and simple reasons to use D.	3	D Forum							4	No, the D.Learn forum is fine.	nope	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly	Web development	Desktop applications														Official .deb packages										I compiled D from source			2.078.3 (latest)													DMD	Linux										rdmd	dub						No	vim / neovim		3	1	2	Too slow!		3	Keep a focus on compile times and exe size.	It's awesome - keep it as is																				Yes	2	4	4		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket								More -betterC support	More/better container classes				@nogc containers				std.database			std.decimal			std.drawing (2D)		digest				std.compiler		std.concurrency	std.container		std.csv						stdx.allocator	stdx.checkedint	stdx.logger		std.getopt	std.json		std.mathspecial								std.signals	std.socket	std.stdint		std.system								std.windows	std.xml	std.zlib	std.zip	Not enough of it. Needs expanding.	Yes	3	Too slow.												Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)								Lack of tooling and libraries			Poor debugging	dub				IDE autocomplete		Auto-decoding of strings					Ugly bits of the standard library			Fewer third-party libraries than other language		Little marketing / no evangelists												Lack of focus at the management level		Not enough focus on growing userbase!	Need more libraries.	brilliant, modern, intuative	Online	Natural continuation of C	std.algorithm and std.range	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection			Debug attribute	import("myfile")		Multi-paradigm				opt-in GC and runtime				-betterC												Deprecation of the comma operator									Ranges good string handling	shared	No, I'm already donating my free time		Tabs	2018-02-28 17:24:29	2018-02-28 17:40:39	dbba09c3c3
e7bef503f762cc99a2222c09d97aab04	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke				4	language documentation could have been a bit more verbose in some areas.	3	Some parts are great, while other could be more verbose or provide examples.	0	5	5	The dub manual should be included in the offline version. External links aside, there are plenty of links in the Phobos docs which refer to an online URL rather than the offline file.	0			1	Mostly great content	Nothing really. Just some topics are more interesting than others.	4	D Forum							3	No, the D.Learn forum is fine.	Not really. As for StackOverflow. It is a good one but the dlang forum is better because 1. it doesn't force me to maintain yet another account, and 2. it's on dlang.org.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications				Game Development														Arch Linux						I compiled D from source			2.078.3 (latest)													DMD	Linux		Windows	BSD-variant	Android					dmd		dub	make					Yes, I work with D full time	vim / neovim		1	0			bugzilla user account.	4	Better error messages.	It's awesome, but I miss a few features	especially named arguments			in-place struct initialization	named arguments	assert diagnostics											No	3	Could be a bit more verbose.	Yes	3	5	5								too many un@safe functions	@safe for all modules			Performance					std.eventloop					std.database	std.i18n								std.base64	std.bigint		std.compiler	std.complex				std.csv		std.demangle		std.encoding		stdx.allocator	stdx.checkedint	stdx.logger			std.json	std.math	std.mathspecial		std.outbuffer	std.parallelism					std.signals		std.stdint		std.system				std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		No, but I want to to			Finding good issues to get started																	@safe-ty problems / missing DIP1000					Poor compiler error messages										lack of code formatters, code completion plugins					Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language										Nothing.							The biggest issue I have is a lack of tools. I would like to have a better support for writing tools and plugins. And while there is the frontend as a library it's rather tedious to use compared to clang for instance.	Best compiled language.	I don't remember. Probably on the Digital Mars C++ website.	Because C++ sucks and C doesn't have templates and classes and Ruby is not compiled.	Phobos	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits		Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection	Inline assembler	Contracts	Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library									Reproducible builds						Deprecation of the comma operator		New third-party applications (e.g. Tilix)		Colorized error messages			newCTFE		That I have a better alternative to C++	Some error messages are really hard to understand.	Yes, but only for a specific project	Thanks everyone for the best programming language to date.	Meh, I don't care.	2018-02-28 16:13:53	2018-02-28 17:40:12	94bf7f6edc
743d42ca0ad4665cd22e8614dd2bc16f	Yes	4								"Programming in D" by Ali Çehreli							4	immutable	5		0	5	5		0			0			3	D Forum	#d on IRC						4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development					Game Development										Official .deb packages																				2.071.2 (import access check fixes)						DMD	Linux				Android	iOS	WebAssembly					dub						Yes, I work with D part time	Sublime		4	0				5		It's awesome - keep it as is																				Yes	3	3	4																			better json serialization		std.graph	std.database								I've had some issues understanding by the description what certain algorithm functions do.																																															No, and I don't plan to					Personal laziness							Nothing													Poor compiler error messages			Nothing								Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects							Nothing.								Simple, testable, elegant	Probably just came up in some random discussion about programming languages.	Discovered the Programming in D book online and was intrigued. It just became a book I decided to read, with an interesting interactive element.	vibe.d	Ranges & std.algorithm	Mixin					Native interoperability with C					Simple, but powerful module system	Templates		Built-in unittests			Garbage collection						Multi-paradigm																													Dub is an easy to use build and library management tool. Built in unittesting and other code quality features. 	Sometimes I don't get a stack trace on a crash.	Yes, just tell me how	Please encourage everyone making libraries to unittest properly.	Tabs	2018-02-28 16:34:59	2018-02-28 17:31:49	e713373035
591657793177c66458712b5c92356436	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org		#d IRC on freenode									4	Some arcane compiler error messages.  Scope of the language is very large	3	Hard to say.  The signature of the API don't obviously show how one would use them.  As a consumer, I care less about the templated type, and more about the interface.	0	4	4		1	4		1	Mostly great content		4	D Forum	#d on IRC						5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly											Science/Research						Official OSX dmg installer				Homebrew								2.078.3 (latest)													DMD		macOS										dub						Not applicable	emacs		4	0			Concerned about filing duplicate bugs	4	Better debug info on macos.  Stack traces don't have line numbers, lldb is essentially useless last time I looked	It's awesome, but I miss a few features				in-place struct initialization													No			Yes	2	4	2		Auto-decoding for strings		Poor naming choices		Reliance on the GC			@safe for all modules	@nogc		Performance		More/better container classes																Ranges occasionally.  Type errors can be hard to parse																																															No, but I want to to			Finding good issues to get started	Time is my only enemy	Personal laziness			High barrier to entry													Working with other people that don't already use D.  Issues with debug info on macos			Compiler regressions	Poor compiler error messages					Poor debugging															Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages																	Better C++		C++ talks by Andrei		Ranges & std.algorithm		CTFE (static if, static foreach)			Performance		Readable syntax	UFCS		Closeness to C/C++																	opt-in GC and runtime		Templated vector operations					toString with output ranges							Runnable examples on dlang.org						Colorized error messages		Cross-compilation with LDC	newCTFE		Cleaner/simpler code compared to C++	Spotty debug info on macos			Meh, I don't care.	2018-02-28 17:14:36	2018-02-28 17:30:42	d8e76439bb
ad99617d3f6bf269c3e279acec088caf	Yes	4					Language specification	#d IRC on freenode	D Forum: Learn								4	Awkard documentation, not enough examples, many resources are outdated, dead packages stuck at version 0.1	3	Lots of unnecessary info (@pure @nothrow @safe @ @ @@), keyword soup instead of proper organization in functions. Sometimes I wish D was a fully OOP language, because it easily shows you what kind of data you have and what operations it provides.	0	4	4	Some examples feel unrealistic and try to promote the 'functional one-liner' style too hard. Such style is nice for simple snippets, but for anything more complex you'll be back to for loops anyway.	0			1	Mostly great content		4	D Forum	#d on IRC						4	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications				Game Development							Official Windows .exe installer																2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows		Android		WebAssembly					dub						No	Visual Studio Code		4	1	4			4	For such a heavy template based language, it needs better error messages for templates	It's ok	I can't get used to ! for templates, but that ship had sailed long time ago.			in-place struct initialization	named arguments											Factory constructors (see Dart), auto assignment of constructor args to fields (also see Dart)	No	4		Yes	3	4	4				Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes	Phobos (and D) isn't sure if it wants to be a GC-free language or a fully GC language. Right now it's trying to be both, which hurts it from both sides.						More/better container classes					better json serialization	better xml serialization		std.database							std.yaml, std.logging	Heavily templated range-based code is very hard to figure out because it relies on opaque names like S and T, some are template args, some are normal args, and without example it's hard to understand how it works. Even if you get an example, you often need additional tricks to make it work as expected (.array() on ranges which only works when you include std.array, good luck figuring that out the first time)	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container				std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint			std.getopt			std.mathspecial	std.meta	std.outbuffer	std.parallelism					std.signals	std.socket	std.stdint		std.system		std.typecons	std.uni	std.uri	std.utf	std.uuid	std.variant	std.windows		std.zlib		Phobos (and D) isn't sure if it wants to be a GC-free language or a fully GC language. Right now it's trying to be both, which hurts it from both sides.	No, and I don't plan to				Time is my only enemy	Personal laziness			High barrier to entry						Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)						D doesn't have a strong identity, it's trying to do everything, spreading itself thin.		Poor Phobos (Standard Library) documentation		Poor compiler error messages				Non-enterprise IDE support	Poor debugging						Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects			Lack of good examples / tutorials			 Also, package curation is a problem, most Dub packages end up being version 0.1, never to be updated, or 0.1 is the updated version, it's often hard to tell.		Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level			I think the nogc and betterC efforts are a waste of time. Those people have already moved on to Rust. The problem with D is that it's a language of "yeah, but you can". Yeah, you can not use GC, but then some parts of the languages are available (up to you to find out which). Yeah you don't have library X in stdlib, but you can use this wrapper alpha version that I wrote over the weekend, it handles my usecase and tbh I didn't test it for anything more complex, but yeah it works.	fast, native, fun	I don't remember, I think I was looking for some new languages and saw D on the list	Because it's a language that is filling a gap in the market. Now with languages like Rust, Go and Crystal that gap feels tighter, but before D, there was a need for a language that lies between the low-level dirty C/C++ and high-level managed heavy-weight JVM/CLR runtimes.	Derelict is my favorite project, as it provides stable and working bindings to some vital C libraries. Apart from that Dlib/Gl3n, which provide much needed 3D math libraries for gamedev and GtkD, which provides nice GUI capabilities for D applications.						Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system																																Deprecation of the comma operator									I can't stand the verbosity of Java, yet I can't stand the header files and the mess that is current C/C++ ecosystem	CTFE/templates. Oh the irony, D was supposed to fix C++ problems with long compilation, but thanks to CTFE/template expansion it brings it's problems back. Also, such mechanisms like CTFE break tooling, because you can't really parse the code without bundling a compiler with the IDE (which was what D authors criticised C++ for).	Yes, but only for a specific project	Don't worry about my negativity. I still like D, I just feel like it's just wasting it's potential. @safe, @nogc, I think overall this isn't something that will sell D. There is a reason people like to use languages like Java and Go. Those aren't the '80s or the '90s. It's not about the language. IDE support, available libraries, mindshare, matters more than flashy functional features (which are mostly used in tutorials and witty one-liners).	Tabs	2018-02-28 17:00:43	2018-02-28 17:28:25	7bc83c73e3
b0c5994d9806b969972c64dcc5eabcc2	Yes	4					Language specification										5		4	Documentation's fine. The way is presented, not so much. Can sometimes be confusing.	1	4	3		0			1	Always great content		4							Haven't needed help.	5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly											Science/Research	Programming language interpreter.								Arch Linux										2.077.1 (latest LDC)												LDC	Linux		Windows							dmd								No	Intellij		3	0			Never found one.	5		It's awesome - keep it as is																				Yes	3	3	5						Reliance on the GC							More -betterC support								std.graph			std.benchmark	std.decimal																					stdx.checkedint								std.outbuffer						std.signals												std.windows					No, but I want to to				Time is my only enemy								Nothing														Poor GC implementation / performance		Nothing													C behavior without warning (e.g. signed to unsigned comparisons)							Few showcases / flagship projects							Nothing.								Easy. Complete. Familiar.	Article comparing D and Go (not sure).	I liked the language.							Performance	Native interoperability with C	Readable syntax		-betterC			Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters		Garbage collection							Functional programming paradigm			opt-in GC and runtime				-betterC										Runnable examples on dlang.org								Cross-compilation with LDC			It's a great language.		Maybe, I'm still a student		Spaces	2018-02-28 17:09:57	2018-02-28 17:27:31	dd6227e92e
e96a0a6e3ade3d1ca40129550ce67b66	No, I have stopped using D		Despite D having some obvious advantages over C++, unpleasant surprises and nagging uncertainties steered me back to C++.		"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli							3	C++ is an extension of C.  In learning C++, I only encountered complexity when I started using new features.  In D, I encountered complexity even when I was trying to do things that were simple in C.  Also D was evolving quickly, so I felt like I was shooting at a moving target, rather than a stationary target like C++.  (C++ only "moves" when new versions come out approximately every 3 years.)  So I found C++ to be more predictable.	2	I found the documentation hard to understand.  Maybe because of all the templates.  My rating may be out of date.  It was several years ago when I tried to switch to D.	5	4	4	Cannot say.	0			1	Mostly great content	I have no complaints.	4	D Forum							5	I don't care.	I generally like mailing lists.			Rarely	Web development	Desktop applications										Network software.  Mobile apps.		Official tarballs																													Linux				Android	iOS							make					No	emacs			1	5																																																																																																																																																																																																																																					2018-02-28 17:12:15	2018-02-28 17:27:03	c46e73c0fa
33bf6afe9fe261cbbfd57869d1215b81	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										3	At the time, the language spec was pretty much it. So much better now!	3	I like the examples. I hate the templated function definitions—for me it's almost always impossible to understand how to use the function without examples (it's hard to even find the function's name!).	3	4	4	The front-page examples are often too complex looking at first glance.	1	5		1	Always great content		4	D Forum							3	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly	Web development					Game Development						Mobile apps									Homebrew								2.078.3 (latest)													DMD		macOS			Android	iOS				dmd	rdmd	dub						No	Visual Studio Code		4	1	4			4		It's awesome, but I miss a few features	@too many inconsistent @attributes, wrong defaults. And traits/is-expressions are hard.	tuples															No	3		Yes	2	4	2		Auto-decoding for strings			Old modules like std.outbuffer or std.socket		Fear to do breaking changes							More/better container classes			std.eventloop		better json serialization	better xml serialization		std.database									std.base64	std.bigint		std.compiler	std.complex	std.concurrency	std.container		std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json		std.mathspecial	std.meta	std.outbuffer			std.process			std.signals	std.socket	std.stdint		std.system		std.typecons	std.uni		std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip	Better documentation!	Yes	4														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation		Poor compiler error messages					Poor debugging			Missing support for platform X				Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)		Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages																	Fast, readable, powerful	College class at UVU from Chuck Allison	I liked the look of the language		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance		Readable syntax	UFCS				Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection						Multi-paradigm							Compile-time format string checking				toString with output ranges		Back referencing of mangled symbols				Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org		Deprecation of the comma operator							newCTFE		It's a nice language to use.	Difficulty debugging.	Maybe, I miss accountability at the moment		Spaces	2018-02-28 16:59:25	2018-02-28 17:26:26	2ec840107f
0b0f3dddeaa92e56481222f041139a30	Yes	4				tour.dlang.org										Friends	5	Build systems were a bit tricky to figure out, was used to the C way of doing things with make. Getting GDC/LDC to work was also tricky, reference compiler worked well though.	5	Maybe more code snippets demonstrating usage?	3	5	4		0			1	Mostly great content	For a while it didn't update that often, but it's doing better	3					My colleagues	I don't need help		4	I don't care.	I don't mind Slack/Discord/IRC channels for occasional oddities where I might want to talk to higher-up devs.	Yes, it was hard to find out why.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely						Game Development		Embedded Systems		Kernel Development	Science/Research		Official Windows .exe installer							Arch Linux						I compiled D from source			2.078.3 (latest)													GDC	Linux				Android		WebAssembly	Embedded	powerpc-eabi, arm-none-eabi, aarch64-none-elf			dub	make	cmake				No	Intellij		3	0				4	better C/C++ interop	It's awesome - keep it as is																				Yes, but only for some projects	2	5	5						Reliance on the GC		bad embedded/bare-metal support		@nogc		Performance	More -betterC support						better json serialization											pretty much everything when GC isn't implemented but otherwise it's solid				std.compiler	std.complex			std.conv	std.csv	std.datetime	std.demangle	std.digest	std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json				std.outbuffer		std.path	std.process																				No, but I want to to				Time is my only enemy												Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC					Nothing												D's dependence on a large and bulky runtime		Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists								Nothing.								C#, but C	A friend on IRC	I had Java and C experience and it seemed like the best of both worlds		Ranges & std.algorithm						Native interoperability with C			-betterC	Closeness to C/C++	Simple, but powerful module system				In, out, ref parameters		Garbage collection	Inline assembler				std.concurrency & std.process				static foreach	opt-in GC and runtime				-betterC																		Cross-compilation with LDC			Syntax		Maybe, I'm still a student		Spaces	2018-02-28 16:56:07	2018-02-28 17:24:53	94ab1b7da2
14ba2e048b7d2aafcbaa7bf78190d6d7	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							5	Big language with many features	4	Sometimes cryptic	0	4	4	A bit vague, doesn't mention GC anywhere, better to get that out of the way up front.	1	4	Good attempt to parcel out bite-size chunks, but tough to put it all together when all features are isolated.	1	Mostly great content	Could be some longer posts	4	D Forum							4	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly												Mobile		Official tarballs												I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC					Android					dmd				cmake			Ninja	No	vim / neovim		4	1	3	Bugzilla seems antiquated, not sure how issues get triaged		5		It's awesome - keep it as is																				Yes	4	5	4		Auto-decoding for strings		Poor naming choices										More/better container classes		I'm happy as is.																																						std.outbuffer						std.signals													std.xml				Yes	3	Long wait, and sometimes bad review										Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							Nothing purely community-developed has ever gotten anywhere, D needs some strategy to get more corporate involvement.	fast, clear, powerful	Steve Yegge blog	Fast language and liked the technical approach Walter showed in newsgroup		Ranges & std.algorithm					Performance		Readable syntax	UFCS			Simple, but powerful module system			Built-in unittests			Garbage collection													Compile-time format string checking											Runnable examples on dlang.org								Cross-compilation with LDC			Best experience writing and reading code of any language	Not one in particular, many small bugs that sit unfixed	No, I'm already donating my free time	D doesn't need a "plan," as it keeps evolving, but it does need a better process, one that can take in more money	Spaces	2018-02-28 16:28:41	2018-02-28 17:18:45	962d9bacc8
cdd1c2fdf6457e2a941c174665ed2ce8	Yes	5			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli							4		3		4	4	4		0			1	Always great content		5	D Forum							5	No, the D.Learn forum is fine.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily		Desktop applications																									Official zip files	2.079.0 (nightly)														DMD	Linux	macOS	Windows									dub						Yes, I work with D part time		Notepad++	4	1	3			4		It's awesome - keep it as is																				Yes	5	4	5	Nothing - Phobos (Standard Library) is great									@nogc	DIP1000											std.database			std.decimal									std.compiler							std.demangle																																				No, but to other D repositories				Time is my only enemy																	Dub issues								Non-enterprise IDE support		dub																Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs					The programming language	Google		D-unit	Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax					Templates											Multi-paradigm	Functional programming paradigm		static foreach										Back referencing of mangled symbols	Reproducible builds													newCTFE				Yes, I'm already doing so		Spaces	2018-02-28 15:48:44	2018-02-28 17:18:40	1f1263fcb9
d8db17a29bb337e300b818e869c179af	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli			"D Web Development" by Kai Nacke			subscribe to mailing lists	4	Range semantics and array semantics	3	The various efforts to improve the documentation are all improvements and should get integrated  I would like a good offline alternative (airplane mode), static html, pdf, or maybe dman takes care of this, but I've not looked at it yet as it's not installed by default on my Mac.	5	4	3	Specifically with the dub packages, sometimes it's slow or unavailable (though I think there are mirrors and dub is getting smarter)	0			1	Always great content	The sparseness, more high quality articles would be a nice to have.	4	D Forum							4	No, improve DFeed.	Mailing list, IRC, and stack overflow have me covered.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications					Big Data		Machine Learning		Science/Research		Official Windows .exe installer		Official .rpm packages	Official .deb packages	Official OSX dmg installer				Homebrew								2.078.3 (latest)													DMD	Linux	macOS	Windows		Android		WebAssembly					dub						Yes, I work with D part time	vim / neovim		5	0			Haven't run into an issue for long enough to warrant filing an issue.	3	Always be (correct and) blazingly fast, no matter how many templates or other constructs are used	It's awesome, but I miss a few features	I would like to have a @c-behavior{ } block for being compatible with c type promotion rules, but for default D programs, they were @safe and used stronger and more correct (maybe even always explicit, to!X is very short and descriptive) type conversion. 	tuples		in-place struct initialization						@mutable in immutable						Being able to append to constant structures would go a long way.  I really like transitive const and immutable, but the datatypes need to fully work with them in a "do the right thing" sort of way.	Yes, but only for experimenting/testing/debugging	4	Seems like it needs a formal write up and tidy pass.  Right now, it seems more of a "working draft"	Yes	2	4	3		Auto-decoding for strings			Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes	A way to be more integrated with "blessed" 3rd party libraries.  For example, if json/xml aren't first class phobos, then there should be a dlang recommended solution that is compatible with phobos, tested in the CI release testing, etc.			@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark	std.decimal						std.base64	std.bigint		std.compiler					std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger							std.outbuffer		std.path				std.signals	std.socket	std.stdint										std.windows				Phobos should have a cross platform GUI solution, even if that is just well maintained wrappers to Qt, Wx.	No, but to other D repositories				Time is my only enemy												Non-perfect C++ integration						Nothing										DLL support on Windows					Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages									Nothing.							I think that Walter and Andrei do a great job providing vision and coding when they have time.  We need more coders with their capabilities.	Systems scripting language	Colleague who used (and quit using) D1.	Because I was tired of iterator hell in C++ and ranges/slices are so much better to work with (most of the time). 	The Mir-X libraries.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays						std.concurrency & std.process		Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library	Templated vector operations	Compile-time format string checking	-betterC	stdx.checkedint					Reproducible builds		DMD support for AVX2				Deprecation of the comma operator			vibe.d 0.8	Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		productivity	I'm looking for more formalism (proof level) of written code and really bugs me when there is something that isn't correct.  Often times, this is the C-legacy getting in the way.  I would prefer to have limited different semantic options within C-blocks vs native D code.	Maybe, I miss accountability at the moment	Overall, it's a great language.  If tuples get a little better supported, then it'll have nearly have full up concatenative language properties that I think will be another area of richness to explore.	Spaces	2018-02-28 16:42:04	2018-02-28 17:17:01	6c253cf0d9
b7bdf82d3859e138da0a676c370621a8	Yes	5			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn					"D Cookbook" by Adam D. Ruppe	d-idioms		4	The only thing I remember is static if not creating a scope being unexpected. Otherwise, it's just been a joy.	4	Details of behavior are sometimes missing, and there's occasional misleading parts.	0	5	5		0			1	Mostly great content		5	D Forum							5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications											Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows							dmd	rdmd	dub						No		Notepad++	4	1	4	There is a tendency for issues to disappear and be forgotten, probably due to lack of manpower.		5		It's awesome - keep it as is																				Yes	5	6	6										@nogc				More/better container classes						better xml serialization		std.database												std.compiler								std.digest	std.encoding		stdx.allocator		stdx.logger		std.getopt					std.outbuffer		std.path				std.signals	std.socket	std.stdint		std.system				std.uri		std.uuid			std.xml	std.zlib	std.zip	Units of measurement and linear algebra. Probably not important to many, but they're what I love working with.	Yes	5	PRs have a tendency to grow stale, especially when waiting on a response from Walter or Andrei.										Nothing										Nothing						Nothing								Nothing							Bugzilla Issue 5710.	Nothing											Nothing.								Modern convenience, everywhere	It's been at least 12 years, you can't expect me to remember. :p	I was a C++ fanboy at the time, and thought it looked familiar, but with some very interesting features.	Phobos.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits								Templates		Built-in unittests			Garbage collection							Functional programming paradigm			opt-in GC and runtime		Templated vector operations														Deprecation of the comma operator							newCTFE		It's a pleasure to whip up small programs to test an idea, and then shape it into a real program that works for the problems for which I might need it.	Issue 5710, without a doubt. It *needs* to be fixed.	Yes, I'm already doing so		Spaces	2018-02-28 16:42:14	2018-02-28 17:16:32	fe31450ca0
49b7686ae76be732f2cab8fbfd4df835	Yes	4															3	metaprogramming	4	none	1	4	4		0			1	Mostly great content		4	D Forum					I don't need help		5	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the 	Weekly	Web development															Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows									dub						No	Visual Studio Code		4	1	5			4	better more structered and ide parseable error messages	It's awesome - keep it as is																				Yes	2	4	6					Old modules like std.outbuffer or std.socket										standard interfaces for various systems, either through duck typing or object interfaces		std.eventloop		better json serialization	better xml serialization		std.database															std.container									stdx.checkedint																												std.zlib			Yes	5																				unfinished features like shared						low on good libs with proper docs and nit just examples		Non-enterprise IDE support	Poor debugging					refactoring tools even the simplest	Nothing									Fewer third-party libraries than other language											Too much low-level focus (C/C++)						tooling could be a little better	ergonomic, expressive, awesome	just thought what is after C?	out of curiosity	taggedalgebraic	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)						UFCS				Templates		Built-in unittests		@safe strings + arrays	Garbage collection		Contracts									DMD as a DUB library								Back referencing of mangled symbols					Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8	Colorized error messages					hobby projects		Maybe, I miss accountability at the moment	just better tooling and library rfc process	Meh, I don't care.	2018-02-28 15:15:58	2018-02-28 17:15:10	627ae4f7a9
f8c3e5d9201beec0e5a14fb4fc6a748c	Yes	2				tour.dlang.org	Language specification		D Forum: Learn						d-idioms		2	Lack of examples for the standard library, limited documentation of some language features	3	Too few real-life examples	4	2	1	Searching with Google, a local full text index might be better	1	1		1	Mostly great content		4						I don't need help			Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the 	Monthly						Game Development							Official Windows .exe installer		Official .rpm packages				d-apt Debian/Ubuntu										2.078.3 (latest)													LDC	Linux	macOS	Windows									dub						No	Visual Studio Code		1	0			Didn't find a new bug :-)	1		It's awesome - keep it as is																				Yes	3	4	5								std.experimental.log should become stable									std.eventloop					std.database	std.i18n	std.benchmark								std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency			std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint		std.functional				std.mathspecial	std.meta	std.outbuffer	std.parallelism		std.process			std.signals	std.socket				std.traits			std.uri		std.uuid		std.windows	std.xml		std.zip	I'd like to call uniform as method on an RNG	No, but to other D repositories				Time is my only enemy																	I'd like to use D at work, but we're missing bindings for OpenLDAP and oracle and an ORM that supports oracle	Nothing														Nothing									Fewer third-party libraries than other language										Nothing.							it's not known enough	fast smart powerful	heise.de/newsticker	Because it looked amazing on first sight		Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates																																			Colorized error messages							Yes, but only for a specific project	Thanks to everyone involved in creating the language	Spaces	2018-02-28 16:04:47	2018-02-28 17:12:36	7174cfcb2f
ed317ef3369c101b8aaa966134b32fa6	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							5	no	5	no	0	5	5	no	0			1	Mostly great content	no	5						I don't need help	d@conference.jabber.ru	5	No, the D.Learn forum is fine.	no	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly	Web development	Desktop applications		DevOps		Game Development							Official Windows .exe installer							Arch Linux						I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows						Blackberry			dub						No	Visual Studio Code		3	0			no problem	5		It's awesome - keep it as is																				Yes	3	6	6	Nothing - Phobos (Standard Library) is great									@nogc	DIP1000		More -betterC support					@nogc containers	better json serialization			std.database	std.i18n		std.decimal		std.image	std.drawing (2D)		no																				std.json																										nothing	No, but I want to to				Time is my only enemy								Nothing		Missing language feature X / not moving fast enough								Nothing								Poor debugging			Missing support for platform X			Nothing								Nothing											Nothing.							I do not think	simple and powerful	wikipedia	a similar language was needed	derelict, vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters		Garbage collection		Contracts	Debug attribute	import("myfile")	std.concurrency & std.process	Multi-paradigm			static foreach	opt-in GC and runtime		Templated vector operations		-betterC																		Cross-compilation with LDC	newCTFE		the language itself	I do not know	Maybe, I miss accountability at the moment	nothing	Meh, I don't care.	2018-02-28 16:44:31	2018-02-28 17:09:42	cc57a943be
2e43496df8f85ac015e51083cf15b44b	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification										4	Mismatches between implementation and the books (specifically TDPL)	4	Not everything is covered with the documented unittest, and the ranges constraints aren't quite readable.	0	4	5	I don't use it that often, to be honest.	0			1	Always great content	This is one of the rear bright things. Good job, Mike!	5	D Forum				My colleagues			5	Yes, I like StackOverflow.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily							Big Data												d-apt Debian/Ubuntu										2.078.3 (latest)						2.072.2 (native TLS on OSX 64-bit)					D1		DMD	Linux		Windows	BSD-variant				Embedded			rdmd							Yes, I work with D full time	vim / neovim		4	1	4	Searching for the issues is always a nightmare for me.		3	Less memory usage, please.	It's ok	"optional" parentheses.	tuples	string interpolation	in-place struct initialization		assert diagnostics							UFCS for local symbols	Static inheritance			No	4	Not really true (or outdated) in many cases.	Yes, but only for some projects	2	3	3		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc				More/better container classes				@nogc containers	better json serialization											The ranges/algorithms documentation is fine as long as you know what to look for. Some classes (like mmfile or socket) should really be structs.	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle					stdx.checkedint	stdx.logger					std.mathspecial																								1. Do not allocate memory everywhere 2. Better containers 3. reference counting and deterministic destruction where it makes sense.	Yes	5	Nothing.											Language complexity (e.g. inout, abuse of mixin)						Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000			Poor Phobos (Standard Library) documentation						Non-enterprise IDE support												C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language		Little marketing / no evangelists					No good point for learning D								Wrong decisions at the management level		I don't think it's worth and good going after every hype that makes it's way to the community. Stick first with what you have and make it work. Shared /Concurrency/immutable was marketed in 2008(?) but it's still not complete.	Does its job.	Somewhere on the internet.	For the job.	ocean ;-)	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system			Built-in unittests								std.concurrency & std.process	Multi-paradigm				opt-in GC and runtime																Deprecation of the comma operator									Code I love and maintain is written in D.	Shared not working.	Yes, I'm already doing so		Spaces	2018-02-28 16:40:06	2018-02-28 17:00:28	e791b22ef1
cd06d1d6afcc7df51733412df04440e6	No, I have never used D			tooling		tour.dlang.org											4	lack of experience with a low level language 	4	would love more accessible examples 	1	5	5	examples feel overwhelming 	1	5	none 	1	Always great content	none 	3			#d on StackOverflow					5	Yes, I like StackOverflow.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development	Desktop applications											Official Windows .exe installer					Official dlang.org/install.sh script	d-apt Debian/Ubuntu																	2.071.2 (import access check fixes)						DMD	Linux		Windows	BSD-variant			WebAssembly			dmd	rdmd	dub						No	Visual Studio Code		3	0			lack of time 	4		It's awesome - keep it as is																				Yes	4	4	4							Fear to do breaking changes			@nogc		Performance	More -betterC support				std.eventloop				std.graph	std.database	std.i18n			std.color	std.image	std.drawing (2D)					std.bitmanip																																												No, but I want to to				Time is my only enemy	Personal laziness			High barrier to entry					Language complexity (e.g. inout, abuse of mixin)																Non-enterprise IDE support																			Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials	No good point for learning D																																																																							Spaces	2018-02-28 16:44:48	2018-02-28 16:58:27	4ae1c8813c
be0cb3ab288e9ef9565ec48f0073b5f7	Yes	4				tour.dlang.org	Language specification	#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker					4	Nothing to do with the language, I'm just slow and had a hard time groking a few of the trickier pieces	5	The format of putting functions in a box was confusing at first (I thought they were examples at first glance) but after looking at it for a sec it made sense. Being able to run and tweak examples in the browser is an AWESOME feature	4	4	5	The forum's style (mailing list displayed as forums) is a really weird way to do it. I've also seen a lot of forum posts in ddg searches that don't exist anymore, which is frustrating.	1	4	I think it's a great overview, enough to touch D's strengths without getting too deep. It's not great as a reference but I get that it's not the point.	1	Always great content	None, posts have been great	5	D Forum	#d on IRC						5	No, improve DFeed.	Making the forum more of a forum and less of a mail feed would be nice. Please don't move to SO, it's community is an absolute trash fire	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications				Game Development							Official Windows .exe installer							Arch Linux							Compiled from custom ports for CRUX Linux		2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows	BSD-variant								dub						No	Visual Studio Code		4	0				5		It's awesome - keep it as is																				Yes	3	5	6	Nothing - Phobos (Standard Library) is great											Performance	More -betterC support					@nogc containers	better json serialization											toStringz is a weird name.. c_str from C++ makes more sense. (i know, tiny gripe)	std.base64	std.bigint	std.bitmanip		std.complex	std.concurrency	std.container		std.csv		std.demangle	std.digest	std.encoding			stdx.checkedint	stdx.logger		std.getopt		std.math	std.mathspecial	std.meta	std.outbuffer	std.parallelism		std.process			std.signals					std.traits	std.typecons	std.uni	std.uri		std.uuid	std.variant	std.windows	std.xml			None, I'm still too much of  noob	No, and I don't plan to											I am boycotting Github due to business practices and refuse to use their website						Dependence of some language features + Phobos (Standard Library) on the GC					Nothing												D's dependence on a large and bulky runtime		Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects							Nothing.							None	C++ but good	nixers.org IRC	I hate the needless complexity of C++ but need performance, some OOP features, and cross-platform support.	Derelict-SDL2	Ranges & std.algorithm	Mixin				Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system				In, out, ref parameters				Contracts		import("myfile")		Multi-paradigm			static foreach				Compile-time format string checking	-betterC										Runnable examples on dlang.org								Cross-compilation with LDC			It's what C++ should have been	Guesswork on GC collections	Maybe, I'm still a student	Nope	Spaces	2018-02-28 16:35:34	2018-02-28 16:57:33	742fbc8cc2
801c48039d1197eabb69f73e82fd280e	Yes	4														browsed the language spec for a month	5	References which are later obsoleted by compiler updates	5	not much, especially the interactive examples on the website are very good.	3	4	4	not much.	0			1	Mostly great content	I only read the D blog occasionally, so I have little to comment on.	3		#d on IRC						3	Yes, I like StackOverflow.	A Discord community would improve accessibility, but only if the server remains active.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications				Game Development							Official Windows .exe installer			Official .deb packages													2.078.3 (latest)													DMD	Linux		Windows		Android			Embedded		dmd		dub						No		Code::Blocks	4	0			Haven't ever found an issue.	4	64-bit Windows support without using Visual Studio	It's awesome - keep it as is																				Yes	3	5	5								A lot of the library is flagged for renovation which it hasn't received yet.				Performance							better json serialization	better xml serialization		std.database		std.benchmark				std.drawing (2D)	encryption library	there were some rough parts when the time and sorting libraries were being updated, but those are good now.	std.base64		std.bitmanip	std.compiler	std.complex		std.container		std.csv		std.demangle		std.encoding	std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt			std.mathspecial				std.path			std.regex	std.signals					std.traits		std.uni	std.uri				std.windows				non-updated libraries	No, and I don't plan to					Personal laziness						My overall programming skill level is far behind the community average.	Nothing				Non-perfect C++ integration					Too many programmers are afraid of garbage collectors.	Nothing							Non-enterprise IDE support							Nothing																		Stubbornness of peers who fear new things.	Nothing.							no	Open-source C#	the developer for a game called Torus Trooper talked about how the game was written in D, around 2003	Initially: Obsessed with the newest and greatest. Eventually: Saw advantages of D over existing languages, including C/++/#, Java, PHP	std.random		Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates				@safe strings + arrays	Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm																	Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8						The ease-of-use to power ratio is better than anything else out there.	Multithreading behavior is highly tempermental and the error messages could be more informative.	Yes, just tell me how	D has ruined me as a C++ programmer, everything is too easy.	Spaces	2018-02-28 16:28:45	2018-02-28 16:53:18	32b1ee21a0
5716a8bf2ac5cbc719cf60ed2b1098e2	No, I have never used D			Waiting  for thorough non-GC support - in VR development, frametime consistency is key, and even an 1ms stall would be problematic	"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn								2	Visual studio integration is pretty good but doesn’t use dub to build - even pretty simple dub-to-vcxproj conversions fail for me. And surprising inconsistencies with 64 but windows	3	 	0	4	5	Would like more clear step-by-step guide for install, build, run hello world (win32 and console) apps, using both visual studio and visual studio code	1	2	While it lists some components/plugins for example for vs code, there are not instructions for actually installing, quick guides to common commands, and how to actually use all functionality. I am never sure if my setup is broken due to something I did wrong, or if the plugin just doesn’t have the features I expect	1	Always great content	 	1	D Forum							3	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly		Desktop applications				Game Development		Embedded Systems					Official Windows .exe installer																2.078.3 (latest)													DMD			Windows		Android	iOS						dub					The visual studio integration one (msbuild?)	No	Visual Studio + VisualD		3	0				4		It's awesome - keep it as is																				Yes	2	3	3						Reliance on the GC	Fear to do breaking changes			@nogc				More/better container classes				@nogc containers						std.benchmark			std.image					std.bigint			std.complex						std.demangle	std.digest				stdx.checkedint																															No, but I want to to				Time is my only enemy	Personal laziness					I am just starting to learn D						Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC																					Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)					Less corporate support (including jobs) than other languages						No good point for learning D													C++ is too bloated, slow compiles, too complex due to back compact. Need a native, non-GC language, and Rust (the only other contender I see) is too radical and too hard to quickly prototype in								Native interoperability with C		UFCS		Closeness to C/C++	Simple, but powerful module system					@safe strings + arrays						std.concurrency & std.process					opt-in GC and runtime	DMD as a DUB library																									Not having const function parameters by default			Meh, I don't care.	2018-02-28 15:04:05	2018-02-28 16:53:03	a2cd8f326b
e06e628052dcf7780ba280de75eed799	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification	#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli			"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms		5	No major hurdles, just took time as it is a large language	5	No complaints although I think beginners can find the function signatures (full of attributes, constraints, etc.) daunting when they first encounter them	2	4	4	My small complaint would be that on https://dlang.org/phobos/index.html the left hand std, core, etc are not expanded by default, I exclusively browse phobos documentation by jumping to the module I want to see with that	1	4	I haven't checked it out in a long time, no idea	1	Mostly great content	No complaints	5	D Forum	#d on IRC						5	No, the D.Learn forum is fine.	I prefer what we have now	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications									Science/Research									Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux									dmd	rdmd	dub						Yes, I work with D full time	vim / neovim		4	0			Laziness/assuming already known	3	Being able to very easily use D as a Better C, last I tried I needed to strip symbols out of the generated binary, etc. Here is a repository showing a simple program from scratch that prints out each string from argv, you can see the compiler flags and stripping I needed to do in build.d https://github.com/miotatsu/BareD/tree/master/src 	It's awesome - keep it as is																				Yes, but only for some projects	4	5	6						Reliance on the GC				@nogc		Performance	More -betterC support				std.eventloop	@nogc containers	better json serialization		std.graph	std.database	std.i18n	std.benchmark	std.decimal					Last time I tried to use std.parallelism I found it isn't actually as simple as slapping parallel on a foreach because often the things I'd want to run in parallel would rely on things that were thread local but really need to be shared and then the foreach just ends up throwing an out of bounds exception etc, but that is maybe less a problem with the library and more a problem with my coding style	std.base64			std.compiler	std.complex		std.container		std.csv			std.digest				stdx.checkedint								std.outbuffer								std.stdint								std.uuid	std.variant		std.xml	std.zlib		Personally, I'd like something like an std.scriptlike: https://github.com/Abscissa/scriptlike	No, but to other D repositories			Finding good issues to get started	Time is my only enemy	Personal laziness	No roadmap		High barrier to entry									Dependence of some language features + Phobos (Standard Library) on the GC									Poor GC implementation / performance				Poor debugging	dub			D's dependence on a large and bulky runtime						Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language										Nothing.							Not that I can think of right now	My favourite language	reddit.com/r/programming (although I don't really check there these days)	I already knew C++ and it looked like a compelling language + I knew of Andrei and thought he was a pretty cool dude from talks by him that I had seen	Phobos is pretty great, especially std.experimental.allocator, std.algorithm, std.getopt, std.path, std.format, std.string, std.stdio, std.datetime, and std.random.  I also really like scriptlike, the derelict bindings to various non-D libraries, and vibe.d is pretty cool though I haven't really done anything with it	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests				Inline assembler		Debug attribute	import("myfile")						opt-in GC and runtime			Compile-time format string checking	-betterC																	DCompute	Cross-compilation with LDC	newCTFE		Familiarity, convenience, other languages sucking	GC, exceptions, defaults I don't agree with I guess and the implications these things have had on Phobos for example	Yes, just tell me how	Nope	Spaces	2018-02-28 14:07:41	2018-02-28 16:52:56	0d3886ddae
abaa3e8228194b621dbed6af78212d7e	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe	d-idioms		4	Getting everything set up. Linux IDE was a bit of a struggle	5	Template constraints make function signatures look messy	4	5	5	Nothing	0			1	Mostly great content	More posts would be awesome!	5									I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly							Big Data				Science/Research								d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux									dmd		dub						Not applicable	Visual Studio Code		3	1	5	Too slow		5		It's awesome - keep it as is																				Yes	3	5	5		Auto-decoding for strings							@safe for all modules		DIP1000			More/better container classes				@nogc containers			std.graph			std.benchmark																																																					No, but to other D repositories											Never created a pull request before! Only every done commits to my own repositories.										Phobos and @nogc would be more usable together if we could capture a lambda's context by value								Non-enterprise IDE support																																						Ranges & std.algorithm		CTFE (static if, static foreach)			Performance			UFCS				Templates		Built-in unittests			Garbage collection																							Automatic compilation of imports (dmd -i)							Colorized error messages					Fast, easier to code than C++				Meh, I don't care.	2018-02-28 15:39:56	2018-02-28 16:52:45	e9fb3f3b25
ffb799afb951a84655a27f0ed2d84ab4	Yes	5					Language specification										5		5	Return types are often auto	1	5	4		1	5		1	Always great content		5		#d on IRC	#d on StackOverflow	dlang.slack.com				5	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications	IoT			Game Development							Official Windows .exe installer			Official .deb packages				Arch Linux								2.079.0 (nightly)	2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows									dub						Yes, I work with D full time	Visual Studio Code		5	1				5		It's awesome, but I miss a few features	no implicit creation, ref/out are implicit, no property += syntax (opOpAssign on properties)	tuples	string interpolation		named arguments	assert diagnostics		multiple alias this									No	5		Yes	5	6	4	Nothing - Phobos (Standard Library) is great										DIP1000		More -betterC support				std.eventloop		better json serialization	better xml serialization			std.i18n			std.color	std.image	std.drawing (2D)							std.complex		std.container								stdx.allocator	stdx.checkedint						std.mathspecial								std.signals		std.stdint										std.windows		std.zlib			No, but to other D repositories								High barrier to entry											Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000		Nothing						Nothing											Virtual by default	Wrong defaults (e.g. not @safe by default)						Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow									Lack of progress on DIPs					good standard library	github	wanted to get rid of C++ and its linker errors (header/source separation)	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection				import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime			Compile-time format string checking			New range functionality (substitute, slide)	toString with output ranges							Runnable examples on dlang.org		Deprecation of the comma operator			vibe.d 0.8	Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		good and productive language		Maybe, I'm still a student		Tabs	2018-02-28 16:36:55	2018-02-28 16:49:36	29cc4b3048
6fe812e5e45e3bcfef8cd582a2612d38	Yes	4					Language specification									trying	2	getting the compiler to work in 2008	5	to few example of how to combine features	3	4	3		0			1	Mostly great content		4	D Forum							4	I don't care.	Force users to search for their question before they are allowed to ask. 	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly											Science/Research									Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux											dub	make					Not applicable	vim / neovim		5	1	2	it is not github		4	replace DCD	It's awesome - keep it as is																				Yes	6	6	5	Nothing - Phobos (Standard Library) is great													More/better container classes						better xml serialization										std.parallelism			std.bitmanip								std.demangle																			std.signals										std.uuid		std.windows		std.zlib	std.zip		Yes	3	not many people reviewing stuff. general lack of specific long term goal for phobos.										Nothing										Nothing						Nothing								Nothing									Fewer third-party libraries than other language													Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level			getting shit done		because everything else is even more fucked up	std.algorithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance		Readable syntax					Templates		Built-in unittests			Garbage collection											DMD as a DUB library																								I get shit done	control statements without curly braces (blockstatements)	No, I'm already donating my free time	Stop complaining about the GC. You're not a snowflake, the GC is not your problem.	Tabs	2018-02-28 16:28:18	2018-02-28 16:44:12	434008e380
b10e7bcf70ac9d5e86a6f1ff1c052cd3	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org			D Forum: Learn	"Programming in D" by Ali Çehreli							3	The documentation, while often quite good, can be rather unclear at points. Sometimes the documentation makes function definitions really easy to read with clear examples, and other times it's just a whole bunch of garbed function parameters.	3	Some parts have excellent examples, and other parts don't. There are also cases where examples don't actually work, and can cause frustration and confusion.	5	5	5		1	4	Error checking with the examples.	1	Mostly great content	It can be quite patchy, and some series start but aren't followed up quickly enough to maintain interest. 	5	D Forum							4	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications									Science/Research					Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows							dmd	rdmd							Yes, I work with D part time	Sublime		5	1	4	I would prefer GitHub much more.		4		It's awesome - keep it as is																				Yes	5	5	6							Fear to do breaking changes	The need for so many qualifiers like @nogc @nothrow pure etc. etc. it gets so confusing needing to figure out which ones apply and when to use them.										@nogc containers	better json serialization												std.base64										std.demangle	std.digest				stdx.checkedint								std.outbuffer																						I think the parallelism stuff could be reworked. I've found that things that are expected to work easily usually don't without a lot more work than would be expected looking at some of the example code.	No, but I want to to			Finding good issues to get started			No roadmap		High barrier to entry					Language complexity (e.g. inout, abuse of mixin)						Issues with language feature X (e.g. shared, @property)					Compiler regressions	Poor compiler error messages						dub									Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language		Little marketing / no evangelists		Little info on StackOverflow		Lack of good examples / tutorials	No good point for learning D						Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level	I think we need to be made aware of the corporate donations that are made, that cleraly drive development of new or advanced features where management disappear for a while while working on paid-for problems and ignoring the rest of the community.	D is becoming buried by the likes of Rust and Go because, despite their flaws, they target a specific audience, or aim themselves at a specific task, and have the marketing to pull it off. D is struggling to dust itself off from the decades of slow adoption to convince people new to D that we have a dedicated community and an exciting, fun-to-use language that can compete with Go/Rust. Marketing is a huge issue here, and improving the GC would go a long way to putting off those that instantly dismiss it for no reason, alongside the further dissemination of benchmarks and blogs/tutorials relating to GC usage.	I hate C++	Online back in 2012/2013. Then picked up The D Programming Language to take a look.	I really dislike the bloat of C++, it has such a huge barrier to entry and having to maintain header files was just crushing to my productivity. Having come from Java/C++, I felt that D was positioned perfectly to let me just get on with programming. I was also fortunate enough to become a postgraduate student and could develop models in any language I wished, without dependencies.	functional?	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters		Garbage collection				import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime		Templated vector operations		-betterC									Automatic compilation of imports (dmd -i)				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8			Cross-compilation with LDC	newCTFE		At the moment, pleasure of writing programs in D, but the lack of third-party library support is pushing me to consider Go.	So many function attributes and the confusion that results. Pure @nothrow @safe alongside in out inout etc.	No, I'm already donating my free time		Tabs	2018-02-28 14:07:26	2018-02-28 16:41:37	040fdfbf17
a6d8a29c10ea482e6278a1e73cc32f43	Yes	5					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4	The times I had to ask on the forums for explanations for things	5	Not much! I can't think of anything that bothers me about it.	0	4	4	The forums really need to be something better than a mailing list! It's a bit embarrassing not to be able to highlight D code on our own website...	1	4		1	Mostly great content	I wish there were articles about D's interesting aspects a bit more often!	4	D Forum							5	I don't care.	I'm not sure. I like the hominess of the D forums, even if they're clunky. It makes me feel I'm interacting with D community, rather than some general place like StackOverflow. Maybe it's what D needs, I'm not sure. Maybe just answer questions in both places?	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly		Desktop applications										Scripts, tools for work, other personal projects	Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows									dub						Yes, I work with D part time	Sublime		3	0				4		It's awesome, but I miss a few features		tuples			named arguments						static break		UFCS for local symbols			Pattern matching	No	5	IIRC, there were some things that were meant to be guaranteed safe by the spec but were unimplemented in D. Cannot remember for the life of me what they were.	Yes	5	6	5						Reliance on the GC			@safe for all modules	@nogc	DIP1000		More -betterC support					@nogc containers	better json serialization						std.decimal	std.color	std.image	std.drawing (2D)			std.base64				std.complex						std.demangle					stdx.checkedint								std.outbuffer						std.signals		std.stdint						std.uri		std.uuid			std.xml				No, but to other D repositories					Personal laziness						I'm focused on other projects and am unsure if I can solve the problems projects have	Nothing										Nothing						Nothing								Nothing										Less corporate support (including jobs) than other languages								None of my classes give me the opportunity to use it! >:(	Nothing.							D struggles to really "meme" itself like, say, Rust has. We're not quite as hip, and as a result, we struggle to convince people to take the language seriously.	The best language.	I think Googling with the mindset of, "If there's a C language, is there a D language??"	Because it looked really neat! I saw some really great code examples that showed off some of its coolest features.	Probably std.algorithm, and outside the standard library, vibe.d.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays	Garbage collection				import("myfile")			Functional programming paradigm		static foreach				Compile-time format string checking	-betterC						Reproducible builds													newCTFE		The ability to just get things done in the most comfy language/standard library possible.	The fact that I can't really get a proper full stack trace (at least on Windows?)	Maybe, I'm still a student	Thanks for making such an awesome language!! I shill it to others so much that I'm a bit known for it. It's expanded my knowledge in programming considerably by learning to use it, and it's led to so many enjoyable problem-solving experiences.	Spaces	2018-02-28 16:03:49	2018-02-28 16:41:32	9580dcb9f0
0dbb024f83cc4c46b5e72760562bbb48	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	None.	5	Nothing.	0	5	5	Nothing.	0			1	Mostly great content	Nothing.	5	D Forum					I don't need help		5	Yes, I like StackOverflow.	No.	Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications		DevOps									Official Windows .exe installer					Official dlang.org/install.sh script		Arch Linux			Choco						2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux									dmd	rdmd	dub					reggae	Yes, I work with D full time	emacs		5	1	5	Awful bugs can remain unfixed for a long while.		4	To not break valid correct code in updates.	It's awesome, but I miss a few features	Lack of AST macros or any other way to change syntax.				named arguments	assert diagnostics						writing files at compile-time	UFCS for local symbols				No	3	Too focussed on the grammar.	Yes	2	6	6		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket				@safe for all modules		DIP1000			More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization		std.database						std.drawing (2D)		None.	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container				std.demangle	std.digest	std.encoding			stdx.checkedint						std.mathspecial		std.outbuffer						std.signals		std.stdint		std.system				std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	1. @safe everywhere. 2.  pure nearly everywhere.	Yes	4	The autotester is a bottleneck and what it actually runs is opaque.														Non-perfect C++ integration								Compiler regressions				Nothing													C behavior without warning (e.g. signed to unsigned comparisons)			Nothing											Nothing.							Implentation issues and marketing are the weakest points.	Imperfect but best.	I can't remember.	DConf 2013 videos made me interested. Reading TDPL got me hooked.	unit-threaded.	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection				import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm				DMD as a DUB library									Reproducible builds				Runnable examples on dlang.org		Deprecation of the comma operator				Colorized error messages	DCompute	Cross-compilation with LDC	newCTFE		No other language hits the sweet spot of trade-offs. No other current language is better.	The "attribute soup" of `@safe @nogc pure nothrow`, especially when @safe and pure should be the default.	No, I'm already donating my free time	`shared` needs to be finalised.	Spaces	2018-02-28 16:14:21	2018-02-28 16:41:13	d6c7f323e5
3d5a5232d8219b376a1ec7ecc77ddd9c	Yes	4			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe	d-idioms		5	Lack of a single-click solution that sets-up a fully functional and rich development+debugging environment for Windows (I was coming from C# and was spoiled by Visual Studio).	3	There is large variation in quantity and quality of documentation throwout the many modules. Sometimes theres paragraph after paragraph explaining design decisions and idioms and such (which is awesome), sometimes there's just a very thin layer of documentation on top of the raw API, and some other times there's just the raw API with some fancy CSS on top.  Also, unittest blocks don't always make for great examples. Unit tests are great at exploring the implementation edge cases, but not always that great at conveying what is a typical use case for a particular set of functions. 	0	4	3	There are some important things a single click away, like the official blog and the downloads page, which is good, but then there are other just-as-important-things that are not, like the wiki and the forums.  I always forget that the big and prominent "Learn" link, next to the logo, takes me to tour.dlang.org, when I really just want to go to the Learn forum.	0			1	Mostly great content	Sometimes the subjects covered are not that interesting, because they are too esoteric, or too niche, etc.	5	D Forum		#d on StackOverflow					5	No, the D.Learn forum is fine.	No, D.Learns is great. It encourages extended discussion (which SO doesn't). Also, I don't mind the lack of fancy features.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications									Science/Research		Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows								rdmd	dub						Not applicable	Visual Studio Code		1	0			I don't feel qualified.	4	Better error messajes. More warnings. Yeah I put two things. Sue me.	It's awesome, but I miss a few features	It doesn't allow for great tooling support.	tuples	string interpolation			assert diagnostics										yield return	No	4	I don't know what parts are implemented or up to date.	Yes	2	2	1						Reliance on the GC			@safe for all modules	@nogc		Performance		More/better container classes	More math/scientific functions			@nogc containers						std.benchmark	std.decimal			std.drawing (2D)		std.algorithm and std.range. Mainly because the names don't match .NET's LINQ library. Which is nobodys fault.	std.base64			std.compiler					std.csv		std.demangle	std.digest	std.encoding				stdx.logger		std.getopt	std.json			std.meta	std.outbuffer					std.regex	std.signals	std.socket	std.stdint		std.system	std.traits	std.typecons	std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip	Wish #1: AWESOME containers. Lots of them. Wish #2: AWESOME numerics. std.numeric is pretty good as is, but it can be so much more! Wish #3: I'll hold on to this one for ten years from now. 	No, but I want to to			Finding good issues to get started					High barrier to entry		I am just starting to learn D				Missing language feature X / not moving fast enough									Poor Phobos (Standard Library) documentation						Non-enterprise IDE support			DLL support on Windows				Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages					Lack of good examples / tutorials		Few transition guides from programming language Y			Too much low-level focus (C/C++)		Lack of progress on DIPs				Incompatible object type formats on Windows.	painfully almost perfect	Wikipedia	Because C# was not getting me high enough anymore.	NDSlice	Ranges & std.algorithm					Performance	Native interoperability with C					Simple, but powerful module system	Templates		Built-in unittests			Garbage collection						Multi-paradigm				opt-in GC and runtime													Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org		Deprecation of the comma operator						Cross-compilation with LDC	newCTFE		Its community!	Inheriting nonsense from C.	Maybe, I'm still a student	I would LOVE to see a second edition of TDPL.	Meh, I don't care.	2018-02-28 14:58:51	2018-02-28 16:34:38	d0b63728df
3502e0162f6f93710076a7c29a8563e9	Yes	4				tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							4	IDE support	5		0	5	5		1	5		1	Mostly great content	more developer stories. tips and tricks. More and shorter entries. Short enough for a 5min coffee break	5	D Forum							4	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly	Web development	Desktop applications	IoT										Official Windows .exe installer			Official .deb packages													2.078.3 (latest)													DMD	Linux	macOS	Windows		Android	iOS	WebAssembly	Embedded				dub						No	Visual Studio + VisualD		3	0				5		It's awesome - keep it as is																				Yes	6	4	4	Nothing - Phobos (Standard Library) is great	Auto-decoding for strings							@safe for all modules					More/better container classes								std.database		std.benchmark					asio - async io like https://en.wikipedia.org/wiki/Asio_C%2B%2B_library			std.bigint	std.bitmanip	std.compiler	std.complex				std.csv		std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial	std.meta	std.outbuffer							std.socket	std.stdint			std.traits	std.typecons	std.uni	std.uri				std.windows	std.xml	std.zlib	std.zip		No, but I want to to					Personal laziness																3rd party libraries	Nothing						Nothing	Non-enterprise IDE support											Wrong defaults (e.g. not @safe by default)				Nothing	Fewer third-party libraries than other language										Nothing.								a new beginning	reddit	frustration of C++	phobos	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance		Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays			Contracts			std.concurrency & std.process		Functional programming paradigm	compilation time																									newCTFE		faster, easier development. mix of python and c++	gc	Yes, just tell me how		Spaces	2018-02-28 15:58:46	2018-02-28 16:29:29	a160840d77
c86aba77ab85d4f6d54f7bdd4ffa7283	Yes	3					Language specification												2	Layout hard to read	1	3	3		0			1	Mostly great content		3		#d on IRC			My colleagues			3	I don't care.		Yes, it was hard to find out why.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily							Big Data												d-apt Debian/Ubuntu							I compiled D from source			2.078.3 (latest)							2.071.2 (import access check fixes)	2.070.2 (alias as a function literal)			D1		DMD	Linux										rdmd		make				makd	Yes, I work with D part time	vim / neovim		3	1	3			3		It's ok		tuples			named arguments												No	2	Incomplete	Yes, but only for some projects	3	2	1				Poor naming choices		Reliance on the GC				@nogc		Performance																																																std.signals																No control over allocations	Yes	3	Too much attention to unimportant details, or completely unresponsive											Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC							Compiler regressions						Poor debugging								Attribute bloat							Fewer third-party libraries than other language												Frequent breaking changes			Wrong decisions at the management level														Readable syntax			Closeness to C/C++	Simple, but powerful module system												Multi-paradigm					DMD as a DUB library													Runnable examples on dlang.org		Deprecation of the comma operator							newCTFE		Still one of the best options in a very shitty landscape of programming languages...	Community / management	Maybe, I miss accountability at the moment			2018-02-28 16:05:28	2018-02-28 16:28:56	e791b22ef1
809d87aa65e3ddc040cbecbc311ead0d	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							5	Lack of template programming docs.	4	More examples.	0	3		Remove dead projects. 	0			1	Always great content	Post more often? (But how to still keep the quality?)	4	D Forum							5	I don't care.	We need both real-time (as in irc) and non-real time.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly		Desktop applications	IoT					Embedded Systems			Science/Research				Official .rpm packages														2.078.3 (latest)													DMD	Linux						WebAssembly	Embedded		dmd			make					No	vim / neovim		3	1	5	Browsing old issues could be smoother.		5		It's awesome - keep it as is																				Yes	2	2	3						Reliance on the GC			@safe for all modules	@nogc	DIP1000		More -betterC support															std.drawing (2D)																																												std.windows				Make as much as possible work without GC. It should be up to the programmer whtether to use it or not.	No, but I want to to			Finding good issues to get started		Personal laziness			High barrier to entry				Nothing										Nothing						Nothing								Nothing										Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects											Lack of focus at the management level			D is a moving target. Should we fork off a frozen release?	C++ as it should have been!	I stumbled upon Digital Mars and D in 2001.	I wanted a C without the warts.	Vibe-D								Readable syntax	UFCS	-betterC		Simple, but powerful module system	Templates														static foreach	opt-in GC and runtime			Compile-time format string checking	-betterC						Reproducible builds				Runnable examples on dlang.org						Colorized error messages		Cross-compilation with LDC			A hope to have D usurp C++ entirely!!!	Yes, I like GC, but not as obligatory.	Maybe, I miss accountability at the moment	Right now, D could and should take over the entire wasm scene! Become THE language there!  That is where all our efforts should be for the next three years. The rewards will be enormous. 	Meh, I don't care.	2018-02-28 13:44:42	2018-02-28 16:24:23	a902baa344
d9686824c1602eb9766a5cfd9d860ff7	Yes						Language specification		D Forum: Learn								3	Complexity of ranges / static&dynamic arrays / strings / tuples. I.e. implicit convertibility between some of them, phobos functions working for some subsets of these entities, etc.	4	Templated APIs (e.g. most of them) don't have it clearly specified what types (arrays / strings / ranges, what sort of ranges) they expect or work with. Also what are efficiency consequences in using other types (especially what would imply some sort of implicit conversion)	0	5	5	Having to click twice to get to GitHub, Issues, Forum, Wiki	0			0			5	D Forum							4	No, the D.Learn forum is fine.	Actual forum instead of an mailing list interface. But basically, whatever medium is used by the people _answering_ the question is fine for me, as long as it's not facebook or other social crap.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely											Science/Research																	2.079.0 (nightly)		2.077.1 (latest LDC)												DMD	Linux		Windows							dmd								No			5	1	5	Issues don't get fixed		3	Bug-free	It's ok	Complexity, unfinished features	tuples						multiple alias this									Yes, my project depends on it	5		Yes, but only for some projects	2	1	3		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance	More -betterC support					@nogc containers						std.benchmark	std.decimal	std.color	std.image			strings				std.compiler	std.complex	std.concurrency	std.container	std.conv	std.csv		std.demangle				stdx.allocator			std.functional		std.json			std.meta		std.parallelism		std.process			std.signals	std.socket	std.stdint						std.uri		std.uuid			std.xml			Template bloat, GC, fear of changes	No, but I want to to				Time is my only enemy						I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems			Bugs						Bugs	Nothing									Auto-decoding of strings		Virtual by default					Nothing																Wrong decisions at the management level	E.g. Final by default and Autodecoding - two battles gloriously won by Andrei and lost by community	Fear to change, autodecoding, virtual by default, bugs, GC, unfinished features		With I could remember, it was years ago	In hope of a better C			Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax		-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests					Contracts		import("myfile")		Multi-paradigm	Functional programming paradigm			opt-in GC and runtime	DMD as a DUB library			-betterC	stdx.checkedint					Reproducible builds			Automatic compilation of imports (dmd -i)			Deprecation of the comma operator							newCTFE				Maybe, I miss accountability at the moment	Thanks for D, it's awesome! But, still long way ahead to perfection. Please don't stop.	Spaces	2018-02-28 15:25:17	2018-02-28 16:23:06	9f0b1b44e9
42d707c55c8b2525be731b7f137a4d62	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli			"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms		5	The Language reference can be Quote Hard Rock read	3	The online documentation is still diffiziler to search and navigate	0	4	4		1	4		1	Always great content	More Frequent Posts wolle be Nice, But i know that is difficult 	5	D Forum							5	I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development		IoT						Machine Learning		Science/Research									Arch Linux	Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows									dub						No	Visual Studio Code		4	1	4	Its difficult to find out which of all These fields Need to be filled 		5		It's awesome - keep it as is																				Yes	1	5	2		Auto-decoding for strings								@nogc	DIP1000			More/better container classes	Replacement of XML/json libraries, http (Client and Server) Library 		std.eventloop			better xml serialization		std.database							Http					std.compiler							std.demangle						stdx.logger					std.mathspecial		std.outbuffer						std.signals		std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid		std.windows		std.zlib	std.zip		Yes	4											Nothing		Missing language feature X / not moving fast enough								Nothing							Non-enterprise IDE support	Poor debugging						Nothing								Nothing												Too much low-level focus (C/C++)							Anything is possible 	https://blog.fefe.de/	I thought it was an interesting and productive language (and rightfully so)	Requests/poodinis/vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits			Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests												static foreach		DMD as a DUB library													Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8			Cross-compilation with LDC	newCTFE		I can quickly Write fast and yet easily maintainable code	Delegates can only have a Single context  Pointer which effectively prevents you from using e.g. parallel.map in an Operator chain	Yes, but only for a specific project	Keep up the good work!	Meh, I don't care.	2018-02-28 15:23:18	2018-02-28 16:21:46	cbf9e81911
abe15a98b833742951e0a8172ab59c5b	Yes	4					Language specification										4	Finding the right modules in Phobos	3	It is not always obvious which feature should be used for what case	0	4	5	A dark mode (css) for the documentation	0			0			4						I don't need help		4	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily																Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows									dub						Not applicable		Textadept	4	0				4		It's awesome - keep it as is																				Yes	2	3	2				Poor naming choices															better json serialization								std.image			std.json																																															No, but I want to to			Finding good issues to get started									Nothing										Nothing							Non-enterprise IDE support							Nothing															Lack of good examples / tutorials												fast, convenient, underdog	Wikipedia	Needed a compiled language with memory safety and convenience	derelict-sdl2						Performance	Native interoperability with C	Readable syntax			Closeness to C/C++			Built-in documentation (Ddoc)				Garbage collection						Multi-paradigm				opt-in GC and runtime				-betterC																Colorized error messages					There is currently no better alternative for what D does, in my opinion				Tabs	2018-02-28 15:43:08	2018-02-28 16:17:30	b297e67f02
85c79fba37ae70ebebd0f07cf31eba79	Yes	3			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org				"Programming in D" by Ali Çehreli							3	No full featured and reliable IDE for windows.  Not enough quality docs for external platforms such as gtk.	3		2	2	3	 	1	4	 	0			3	D Forum		#d on StackOverflow					3	No, improve DFeed.	No	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely		Desktop applications											Official Windows .exe installer																2.078.3 (latest)													DMD			Windows		Android					dmd								No	Visual Studio Code		2	0			The few issues I personally experienced had already been reported.  They had been ignored or closed.  Example optlink windows path parsing bug.	3	A full featured IDE sitting in front of it.	It's awesome - keep it as is																				No	2	2	2					Old modules like std.outbuffer or std.socket				@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes					better json serialization	better xml serialization		std.database					std.image			 																																															No, and I don't plan to										I am just starting to learn D																			Non-enterprise IDE support		dub					Nothing									Fewer third-party libraries than other language										Nothing.									Reddit	Seemed a good midpoint between c and java								Native interoperability with C																	Multi-paradigm																													Want use gtk and gst to create windows desktop video tools.	Difficulty with gtkd documentation.  It sucks.			Meh, I don't care.	2018-02-28 15:51:10	2018-02-28 16:15:43	7ad398686d
ae2c3c0679385baff9c44bd5d1898a72	Yes	3														trial & error, reading compiler sources	4	reference compiler implementation > spec/docs	4	Heavy template usage makes generated definitions almost useless for newcomer - most of the time only looking at examples help (and all other stuff is just noise)	0	5	5		0			0			3						I don't need help			I don't care.		Yes, it was a regression.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily				DevOps			Big Data												d-apt Debian/Ubuntu	Arch Linux						I compiled D from source				2.077.1 (latest LDC)							2.070.2 (alias as a function literal)					LDC	Linux						WebAssembly	Embedded				dub	make					Yes, I work with D full time	vim / neovim		5	1	2	Only thing bugzilla good at is finding already reported similar issues from other devs. It is huge unmanaged issue database with few to zero feedback on reported issues.		3	Compiler as a library with an API suitable for external tools	It's ok	Attribute explosion, various minor limitations like defining manual lexical scope outside of functions, too permissive (optional parens, UFCS abuse)															pattern matching, static interfaces / template concepts, attribute inference	No	2	Only real specification is DMD source code	Yes, but only for some projects	2	3	4				Poor naming choices	Old modules like std.outbuffer or std.socket			Legacy range design problems that will never be fixed (and cause bugs in std.algorithm)							Moving all utility functionality to dub registry, focusing on core APIs and universal algorithms														More range and metaprogramming utilities		std.base64	std.bigint		std.compiler	std.complex				std.csv		std.demangle	std.digest				stdx.checkedint				std.json		std.mathspecial		std.outbuffer						std.signals	std.socket	std.stdint	std.string	std.system				std.uri		std.uuid		std.windows	std.xml	std.zlib	std.zip	Pretty much everything but std.range and std.algorithm to be honest. And even few things in those.	Yes	2	https://blog.mist.global/articles/My_concerns_about_D_programming_language.html																	Issues with language feature X (e.g. shared, @property)		See the linked article. Also please add DIP1000 to the list of language misfeatures.			Compiler regressions							dub							Attribute bloat																			Frequent breaking changes	Lack of progress on DIPs		Wrong decisions at the management level		It does not evolve fast enough to become mature product before any of potential competitors start providing better experience in one of its niches.					Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C		UFCS						Built-in unittests									Multi-paradigm		Slices	static foreach	opt-in GC and runtime	DMD as a DUB library																					Cross-compilation with LDC	newCTFE		I have a lot of expertise in it and get paid for that	shared, DIP1000	Yes, but only for a specific project	Sorry for ranting too much. It has been a while since I did that last time :)	Spaces	2018-02-28 15:32:34	2018-02-28 16:15:22	d6c7f323e5
dd4e8b35d74fdfd85e274c005ace288c	No, I have never used D			it doesn't feel mature not enough support libraries no simple instructions for simple cases		tour.dlang.org				"Programming in D" by Ali Çehreli							5		4		0	4	3	metaprogramming examples	0			1	Mostly great content		3						I don't need help		3	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely		Desktop applications									Science/Research		Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows		Android					dmd								No	Visual Studio + VisualD		4	0			The issue is already documented	4	better metaprogramming debugging	It's awesome, but I miss a few features	the ! syntax for templates is confusing and out of place	tuples	string interpolation		named arguments		language binding to X							Static inheritance			No	5		Yes	1	2	4				Poor naming choices										More/better container classes							std.graph	std.database			std.decimal	std.color	std.image	std.drawing (2D)																																																	No, and I don't plan to			Finding good issues to get started					High barrier to entry	I don't use D																Poor compiler error messages					Poor debugging		DLL support on Windows				Nothing									Fewer third-party libraries than other language				Little info on StackOverflow		Lack of good examples / tutorials					Too much low-level focus (C/C++)							c# but meta	i dont remember	it looked like exactly what i love		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)						UFCS			Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays	Garbage collection		Contracts					Functional programming paradigm		static foreach							New range functionality (substitute, slide)																	newCTFE				Maybe, I'm still a student	you guys are awesome	Tabs	2018-02-28 15:45:42	2018-02-28 16:08:26	dc39bdeecb
83c72405ceac7abae7735f2a79092df4	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org				"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker			d-idioms		5	Templates and when to `alias`	5		0	4	5		1	4		1	Mostly great content	Make posts more often, it's an great read	4	D Forum							4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications				Game Development					Science/Research		Official Windows .exe installer							Arch Linux									2.078.3 (latest)													DMD	Linux	macOS	Windows		Android		WebAssembly		XBox One, PS4? Please get there, it would be great to have push there for DLang. Game Development with it is neat.			dub						Yes, I work with D part time	Visual Studio + VisualD		3	0			Would you ever do UFCS for class/struct methods? Yeah...	5		It's awesome, but I miss a few features	UFCS, please, UFCS for methods, there are some usages for it that doesn't have sense without context of members of the class.							multiple alias this					UFCS for local symbols				Yes, but only for experimenting/testing/debugging	5		Yes	3	4	5						Reliance on the GC				@nogc		Performance		More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization	std.graph	std.database	std.i18n	std.benchmark															std.csv		std.demangle					stdx.checkedint	stdx.logger							std.outbuffer																							No, but I want to to			Finding good issues to get started	Time is my only enemy		No roadmap											Dependence of some language features + Phobos (Standard Library) on the GC			@safe-ty problems / missing DIP1000		Nothing							Non-enterprise IDE support	Poor debugging		DLL support on Windows				Nothing											Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow									Lack of progress on DIPs	Lack of focus at the management level			Need more evangelists, better marketing and absolutely UFCS for local methods	Great, Fast, Smooth	Open Source news website (don't remember which)	I'm get enough of thinking about C++ instead of thinking about architecture			Mixin	CTFE (static if, static foreach)		std.traits		Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)		In, out, ref parameters				Contracts		import("myfile")	std.concurrency & std.process	Multi-paradigm	Functional programming paradigm				DMD as a DUB library	Templated vector operations				New range functionality (substitute, slide)						DMD support for AVX2		Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)					Cross-compilation with LDC	newCTFE		It's smooth ride, I really liked CTFE/Mixin/DTemplates/DUB/Phobos - it's an fresh air after C++, especially being able to "seamlessly" glue it with C/C++ (mainly point is with C++) is an pure win		Maybe, I miss accountability at the moment	UFCS for local members, do it!	Meh, I don't care.	2018-02-28 15:42:06	2018-02-28 16:07:00	b3f4c7e038
5d2453b8bf8819b9e1c7a1553a7006dd	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification	#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe	d-idioms		4	Learning Phobos	3	It's often not accurate, precise, or clear enough	0	3	3	Too much self-congratulation and not enough objective info.	0			1	Always great content	Postings are not frequent enough.	3	D Forum	#d on IRC		dlang.slack.com				4	Yes, I like StackOverflow.	 	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications						Embedded Systems												Arch Linux									2.078.3 (latest)													GDC	Linux		Windows				WebAssembly	Embedded			rdmd							No	Visual Studio Code		2	1	2	Lack of integration with GitHub and inability to edit comments		3	Decouple from the runtime	It's awesome, but I miss a few features	Historical baggage and inconsistencies				named arguments			multiple alias this						Static inheritance			Yes, but only for experimenting/testing/debugging	2	It's often inaccurate, imprecise, and/or unclear.	Yes, but only for some projects	3	2	2				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000							@nogc containers		better xml serialization						std.color	std.image	std.drawing (2D)				std.bigint			std.complex												stdx.logger																														Yes	2	Lack of velocity.  It's much too unproductive.												Missing language feature X / not moving fast enough			Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000		Nothing							Non-enterprise IDE support	Poor debugging				D's dependence on a large and bulky runtime				Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language													Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Poor overall mangement, and lack of sufficient talent to review contributions.	Convenient, Poweful, Efficient	Through a google search to dlang.org	Other current language offerings are lacking.  D has a lot of potential	Phobos	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance					Closeness to C/C++		Templates	Built-in documentation (Ddoc)					Inline assembler								static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking					Deprecation of the integral promotion for unary operators						Runnable examples on dlang.org		Deprecation of the comma operator							newCTFE		It can be used for any domain from small embedded systems to enormous distributed cloud services, supports Windows, Linux, Intel, and ARM, and is as convenient as high-level languages such as C#, yet more powerful and efficient.	Ubiquitous use of runtime TypeInfo for information known at compile-time.	No, I don't like the management of the DLF	Don't worry about breaking changes; all changes can be managed through a gradual deprecation process.  D has a lot of potential...take it there.	Spaces	2018-02-28 15:32:24	2018-02-28 16:04:42	8a4b1bbc5d
019882a3c447b3bb3319faf95b8b4b24	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	The language sometime is not consistent and orthogonal, or incomplete (see shared)	4	The old version of the template was better than the actual; core. is poorly documented.	0	3	3	A  lot of valuable information is scattered around, in the wiki for example, and should be distilled and inserted in the main site. Very very poor informations about the ecosystem, like Visual-D relegated into 'resources', or 'dub' buried into the packages page, along with it's documentation.	0			1	Mostly great content	That should be the official channel for the foundation, with reports, periodic statistics, plans.	3	D Forum				My colleagues			5	No, the D.Learn forum is fine.	No. The forum / newsgroup / mailing list combo is enough. I would like to have Vibe and Dub sections also, as at least dub is now officially part of the ecosystem.	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications		DevOps					Machine Learning			Custom utilities for big companies	Official Windows .exe installer	Official tarballs					d-apt Debian/Ubuntu		Homebrew								2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows							dmd		dub					tup	Yes, I work with D part time	Visual Studio Code		2	1	2	You should really migrate to GitHub. BugZilla is too much decoupled with other tools to have a modern management of the development process. Like having stuff scattered in Trello also. Migrate everything to GitHub, OR BETTER to GitLab and enjoy the better efficiency in coordination.		3	Please turn on memory management!	It's ok	Inconsistency just for sake of not braking code, for example,  property, @safe, @trusted, @system, disable, nog, @disable... just remove the '@' and break code. Or allow them ONLY on the right side and break code. Let's break and remove complexity please! 															The biggest missing feature is COMPLETE what you have started: shared, every quirk in alias this, extern(C++) mangling, etc... no more feature please	Yes, but only for experimenting/testing/debugging	4	It's pretty good	Yes	3	4	5	Nothing - Phobos (Standard Library) is great				Old modules like std.outbuffer or std.socket		Fear to do breaking changes				DIP1000				Interfaces: specify an interface for sockets, event loops, db, that library authors should implement		std.eventloop	@nogc containers			std.graph				std.decimal	std.color	std.image			Sometimes there are corner cases not working related to language problems (like tail-const and const ranges, etc)					std.complex						std.demangle					stdx.checkedint						std.mathspecial		std.outbuffer						std.signals		std.stdint		std.system				std.uri				std.windows	std.xml	std.zlib	std.zip	Revamped IO/Event loop range based Graph range based std.cpp (is it dead?)	No, but I want to to				Time is my only enemy											Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)	Non-perfect C++ integration			Issues with language feature X (e.g. shared, @property)		Poor attention to essential ecosystem: alas, on macOS I'm still unable to have a decent debugging experience!			Compiler regressions			The debugging information and integration in the toolchains should be perfect (see the recent correction of the '_' prefix in OSX)			Poor debugging	dub											Ugly bits of the standard library			Fewer third-party libraries than other language														Lack of focus at the management level	Wrong decisions at the management level	Lack of courage to reach a vision: remove what's wrong, break to reach what's good.	Should be more transparent in the planning and in the status of the started projects (new CTFE, extern(C++), DIP1000, allocator + container, etc)	It's a language you HAVE to love.	I'm coding D since 2006	Coming from Python and C++, it was refreshing	Phobos, of course	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C		UFCS		Closeness to C/C++		Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection			Debug attribute		std.concurrency & std.process	Multi-paradigm	Functional programming paradigm					Templated vector operations	Compile-time format string checking						Back referencing of mangled symbols	Reproducible builds			Automatic compilation of imports (dmd -i)			Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)					Cross-compilation with LDC	newCTFE		It's one inch from being THE language to use!		Yes, but only for a specific project	Be brave, stop adding, start refining.	Spaces	2018-02-28 15:01:57	2018-02-28 16:03:42	13b8c453b0
37e9292cbd24e8d108bcdd7dd9044f40	No, I have stopped using D		Changed jobs; no uptake in new company		"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn					"D Cookbook" by Adam D. Ruppe			4	Correct examples; grokking the specification and library documentation style	3	Incomplete or poor examples	3	4	4		0			1	Huge variance in quality		2	D Forum							4	No, the D.Learn forum is fine.	Please avoid slack, the immediacy is not a good trade off for effective searching and interoperation. Slackoverflow has a moderation problem and preservation of stale or wrong answers.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development			DevOps				Embedded Systems						Official tarballs					d-apt Debian/Ubuntu		Homebrew					I compiled D from source			2.078.3 (latest)													DMD	Linux	macOS		BSD-variant	Android					dmd		dub	make					No	emacs		4	0				5		It's awesome, but I miss a few features	Debugging CTFE and templates		string interpolation	in-place struct initialization	named arguments												Yes, but only for experimenting/testing/debugging	4		Yes	6	4	3					Old modules like std.outbuffer or std.socket				@safe for all modules				More -betterC support	More/better container classes					better json serialization			std.database												std.compiler	std.complex											stdx.checkedint						std.mathspecial	std.meta																				std.xml				No, but I want to to			Finding good issues to get started	Time is my only enemy	Personal laziness										Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation					Nothing								Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects								Too much low-level focus (C/C++)		Lack of progress on DIPs				Lack of mindshare. I have discussed its use with colleagues and they give the "Cool, that's great!" and then we use Go, C++, Rust, or an interpreted language	C++ done well	search engine	Replace use of C/C++		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C			-betterC	Closeness to C/C++				Built-in unittests			Garbage collection					std.concurrency & std.process				static foreach					-betterC														New third-party applications (e.g. Tilix)	vibe.d 0.8								Maybe, I miss accountability at the moment		Spaces	2018-02-28 15:31:35	2018-02-28 16:01:42	7a92e13135
4bfb6bd1f63bbd7f0eb0f14ea61fefcb	Yes	5					Language specification										3	The specification is somewhat obtuse, but I learned D a very long while ago	4	Lack of examples for some parts; Hard to find related things. Advanced features like templates, ranges and so on can make the documentation confusing	1	5	5		0			1	Always great content		5	D Forum	#d on IRC						5	I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications	IoT			Game Development		Embedded Systems			Science/Research		Official Windows .exe installer						d-apt Debian/Ubuntu		Homebrew								2.078.3 (latest)													LDC		macOS									rdmd	dub	make					Yes, I work with D part time		TextMate	2	1	4			4	Line info in backtraces on macOS	It's awesome - keep it as is																				Yes	2	2	2		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000		More -betterC support	More/better container classes				@nogc containers	better json serialization	better xml serialization				std.benchmark																																																				better betterC support better nogc support std.traits version of missing __traits functionality	Yes	3	Lingering pull requests										Nothing										Nothing								Poor debugging						Nothing									Fewer third-party libraries than other language										Nothing.			Lack of progress on DIPs				There should be an option to check for null accesses and printing a message with line info, instead of just crashing, even if just crashing is @safe	Cleaner systems programming	Slashdot	It had lost of nice features, was clean but powerful		Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C		UFCS	-betterC		Simple, but powerful module system	Templates		Built-in unittests									Multi-paradigm			static foreach	opt-in GC and runtime				-betterC	stdx.checkedint		toString with output ranges						Automatic compilation of imports (dmd -i)									Cross-compilation with LDC	newCTFE		D feels natural to me	No macOS exception line info	Maybe, I'm still a student		Spaces	2018-02-28 15:35:17	2018-02-28 15:59:39	8de4e1e056
84204ca7ca4aeaa94eb2dc481ca2c6d7	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								3	There is a major gap in the documentation, it tersely assumes a moderate to high level of knowledge and often lacks examples that would make things clearer. The gap is from basic explanations to fuller ones, it feels like rules about how the compiler understands code and even things as simple as traits are somewhat arcanely inaccessible yet are broadly understood by a decent number of posters to the forums.	2	Too few simple examples to illustrate the function as concisely as possible so you can use it right away.		3	3	The style is very dated visually. The messages about the language are somewhat generic and not necessarily really supported by the reality of using the language at the moment. The forum is really crippled by its insistence on being a view on a mailing list. Threads regularly split up and you cannot edit nor delete posts. Please improve it.	0			0			3	D Forum							4	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly						Game Development	Big Data						Official Windows .exe installer																2.078.3 (latest)													DMD	Linux		Windows		Android					dmd								No	Visual Studio + VisualD		5	1	4			4	Last time I tried trying to get 64 bit Windows applications to work was a pain.	It's awesome, but I miss a few features	It could be more elegant, taking a lot of Go's style to make a language that's both powerful and elegant. Minimalism matters enormously for initial impressions. It doesn't matter in the slightest for powerusers annotating everything to death in library level functions but you already have those people.	tuples			named arguments								UFCS for local symbols				No	3		Yes	3	5	5		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc	DIP1000	Performance	More -betterC support					@nogc containers				std.database		std.benchmark										std.compiler															std.getopt					std.outbuffer														std.uri	std.utf	std.uuid						Common functions causing name space clashes is silly. Std.file.write should be renamed to writeFile so it doesn't clash with std.stdio.write.	No, and I don't plan to												Nothing										Nothing								Poor debugging							Auto-decoding of strings		Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)			Nothing														Lack of progress on DIPs	Lack of focus at the management level			It needs to start from a memory management agnostic position and then add GC. Not start with GC and then attempt to subtract it. This would make a significant difference to the reality of using different memory management strategies.	Better C/C++	No idea!	Annoyance with C++.	std.algorithm	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)						UFCS				Templates		Built-in unittests				Inline assembler								static foreach	opt-in GC and runtime		Templated vector operations										DMD support for AVX2				Deprecation of the comma operator							newCTFE		It feels generally well engineered. Doing things that should be easy is easy.	Auto-conversion to int for types like byte. You clearly want to work with bytes and accept the behaviour of bytes. It feels too far from the metal.	No, I'm not interested into D		Tabs	2018-02-28 15:35:42	2018-02-28 15:58:07	6e2b13b9b3
bc02b196e61332bfdb28c0d1cbbd8165	Yes	4					Language specification			"Programming in D" by Ali Çehreli							5		4		0	5	5		1	5		1	Mostly great content		5	D Forum			dlang.slack.com				5	Yes, I like StackOverflow.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development										Science/Research			Official tarballs																	2.076.1 (static foreach)											GDC	Linux																shake	Yes, I work with D part time	vim / neovim		5	1	3			3		It's awesome - keep it as is																				Yes, but only for some projects	2	5	5		Auto-decoding for strings					Fear to do breaking changes									I'm happy as is.																		std.compiler							std.demangle											std.mathspecial																									Yes	5												Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)					Compiler regressions														Attribute bloat												Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials																Ranges & std.algorithm							Readable syntax			Closeness to C/C++	Simple, but powerful module system			Built-in unittests													opt-in GC and runtime																				Colorized error messages							No, I'm already donating my free time		Tabs	2018-02-28 15:37:05	2018-02-28 15:53:01	b4f58109c7
b6ce2b9ff5e209d7b9368745e5feacc8	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			3	I started almost 10 years ago. Back then, the worst things were the compiler bugs: there were severak gaps between what the compiler did and what the documentation said it should do. This has improved enormously.	4			4			0			1	Mostly great content		4	D Forum							4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly	Web development	Desktop applications				Game Development							Official Windows .exe installer							Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows		Android	iOS	WebAssembly			dmd	rdmd	dub	make					No	Atom		3	1	4			4		It's ok	All those annotations are annoying. Plus, overall, I find that the syntax reflect the complexity of D. It is a huge improvement over C++, but looking at other modern languages it just feels too complicated. (Perhaps D is another niche, but that's what I feel.)	tuples	string interpolation	in-place struct initialization	named arguments												No	3		Yes	3	3	3									@safe for all modules	@nogc			More -betterC support	More/better container classes			std.eventloop	@nogc containers	better json serialization		std.graph	std.database	std.i18n					std.drawing (2D)			std.base64	std.bigint	std.bitmanip	std.compiler	std.complex						std.demangle					stdx.checkedint						std.mathspecial	std.meta	std.outbuffer							std.socket									std.uuid		std.windows	std.xml	std.zlib	std.zip		No, but to other D repositories				Time is my only enemy	Personal laziness			High barrier to entry					Language complexity (e.g. inout, abuse of mixin)	Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing										DLL support on Windows		D's dependence on a large and bulky runtime				Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language											Too much low-level focus (C/C++)			Lack of focus at the management level				Potential, bad perfectionism	It was in a mailing list of university colleagues.	Because I used C++ and D is way better than C++		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C		UFCS				Templates		Built-in unittests									Multi-paradigm			static foreach	opt-in GC and runtime				-betterC													New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)					newCTFE		It feels great to write code in D.	Complexity is reaching high levels... C++ feelings (though I know C++ is much worse even)	Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 14:35:06	2018-02-28 15:50:29	3b7fb75e7c
3554bed34649ac9e362e076f3ee6b840	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org	Language specification										5	C and C++ libraries to which you need to write bindings I would like to compile C ++ and D and link them together.	5		2	3	5		1	5		1	Mostly great content		3						I don't need help		5	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely		Desktop applications				Game Development							Official Windows .exe installer							Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows				WebAssembly					dub				scons		Not applicable	Visual Studio Code		3	0				4	I would like to compile C ++ and D by one compiler.	It's awesome, but I miss a few features					named arguments												No	5		Yes	3	4	2				Poor naming choices		Reliance on the GC				@nogc	DIP1000							@nogc containers	better json serialization		std.graph	std.database	std.i18n			std.color	std.image	std.drawing (2D)																																																nogc	No, and I don't plan to			Finding good issues to get started		Personal laziness			High barrier to entry		I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)			Non-perfect C++ integration										Poor GC implementation / performance			Non-enterprise IDE support				Missing support for platform X	D's dependence on a large and bulky runtime		Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects			Lack of good examples / tutorials							Lack of progress on DIPs											CTFE (static if, static foreach)					Readable syntax			Closeness to C/C++	Simple, but powerful module system												Multi-paradigm	Functional programming paradigm			opt-in GC and runtime				-betterC										Runnable examples on dlang.org								Cross-compilation with LDC					Maybe, I'm still a student	more functional style features, like in haskell. optional function parameters	Tabs	2018-02-28 14:37:56	2018-02-28 15:48:59	a919302a0a
b476468c1e1b1fc9351ae0896792fe24	Yes	4					Language specification										4		3		0	2	3	design of the documentation is terrible	0			1	Mostly great content		1		#d on IRC			My colleagues			3	I don't care.		Yes, it was a regression.		Daily	Web development					Game Development	Big Data									Official .deb packages			d-apt Debian/Ubuntu														2.074.1 (compile-time format checking)							D1			Linux						WebAssembly					dub	make					Yes, I work with D full time	vim / neovim		3	1	1			1		It's ok					named arguments				UDAs for attributes								No	2		Yes	3	3	3						Reliance on the GC				@nogc																						std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency			std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint		std.functional		std.json		std.mathspecial	std.meta	std.outbuffer	std.parallelism	std.path				std.signals		std.stdint		std.system			std.uni	std.uri	std.utf	std.uuid		std.windows	std.xml	std.zlib	std.zip		Yes	1	Got ignored.																			Stability of compiler & Lack of long-term-support versions that don't break your code			Compiler regressions						Poor debugging											C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language												Frequent breaking changes		Lack of focus at the management level	Wrong decisions at the management level								Mixin										Simple, but powerful module system			Built-in unittests	In, out, ref parameters								Multi-paradigm											toString with output ranges												vibe.d 0.8								Yes, I'm already doing so		Meh, I don't care.	2018-02-28 15:28:43	2018-02-28 15:41:56	6a041c03e3
62697a8218cce489f3195db3a78ac91c	No, I have stopped using D		Lack of faith in the language's future success. 				Language specification	#d IRC on freenode							d-idioms		5	Templates in D are a amazing, but the way the documentation presents them was rather confusing. There's some ambiguity issues with the different types of templates. 	4	It's a lot better now than it used to be. Being able to easily pull up implementation code is a huge improvement.	2	3	5		0			1	Mostly great content		5		#d on IRC						4	No, the D.Learn forum is fine.	IRC is truly the best platform for learning languages. It's a shame it's popularity continues to decline.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly		Desktop applications			Security									Official tarballs		Official .deb packages		Official dlang.org/install.sh script		Arch Linux	Homebrew					I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux			BSD-variant				Embedded		dmd		dub			meson			No	vim / neovim		2	0				4	error messages can always be improved. I'd also like to see optimizations to the resulting binary sizes. 	It's ok	D feels like it's starting to suffer from similar feature bloat issues that C++ has. 			in-place struct initialization	named arguments												No			Yes	2	3	6						Reliance on the GC	Fear to do breaking changes			@nogc		Performance																	std.io 																																																No, but to other D repositories			Finding good issues to get started	Time is my only enemy									Language complexity (e.g. inout, abuse of mixin)				Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems								Poor GC implementation / performance					dub			D's dependence on a large and bulky runtime				Attribute bloat		Wrong defaults (e.g. not @safe by default)																							compile-time, easy, unfortunate	Longtime follower of Walters work		std.regex	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C		UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests					Contracts			std.concurrency & std.process	Multi-paradigm	Functional programming paradigm			opt-in GC and runtime																											Maybe, I miss accountability at the moment		Tabs	2018-02-28 15:11:03	2018-02-28 15:29:39	00a9a08319
1365c88d9d6dcd6f1dc9538887783b3a	Yes	5					Language specification								d-idioms		5		4		0	5	5	Can't see "Latest announcements" and "Active discussions" on mobile	0			1	Always great content	Maybe some periodicall articles aboud great D feauters or D design choices.	5	D Forum					I don't need help		5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily						Game Development							Official Windows .exe installer							Arch Linux										2.077.1 (latest LDC)												LDC	Linux		Windows		Android							dub						No		MonoDevelop	4	1	5			5		It's awesome - keep it as is																				Yes	2	5	5						Reliance on the GC				@nogc	DIP1000		More -betterC support	More/better container classes				@nogc containers												Most of Phobos because of GC.	std.base64	std.bigint		std.compiler	std.complex				std.csv			std.digest	std.encoding			stdx.checkedint	stdx.logger		std.getopt	std.json		std.mathspecial		std.outbuffer						std.signals	std.socket	std.stdint					std.uni	std.uri	std.utf	std.uuid	std.variant		std.xml	std.zlib	std.zip	It is a pity that a lot of platform dependant stuff is using GC when it might as well don't use it. List directories e.t.c	No, and I don't plan to				Time is my only enemy	Personal laziness												Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)			Nothing							Non-enterprise IDE support			DLL support on Windows		D's dependence on a large and bulky runtime					Virtual by default					Nothing											Nothing.								Safe, fast, expressive	Andrei talk	Because it seemed as time saver for GameDev		Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta		Performance	Native interoperability with C	Readable syntax	UFCS	-betterC		Simple, but powerful module system		Built-in documentation (Ddoc)	Built-in unittests							import("myfile")		Multi-paradigm			static foreach	opt-in GC and runtime				-betterC					Back referencing of mangled symbols	Reproducible builds												Cross-compilation with LDC	newCTFE		Less bugs coding, hard stuff. Less time debuging more time optimizing.		Maybe, I'm still a student		Meh, I don't care.	2018-02-28 14:46:21	2018-02-28 15:27:10	7422142dad
c5bdc9ba61ad8a74c2b312447a1936b2	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org				"Programming in D" by Ali Çehreli							4	Dub needs some better docs, until vscode got it's new plugin it was tough to find a pleasant editor/ide setup.	4		0	3	3	It could be more attractive, and modern.	1	4		0			2			#d on StackOverflow					3	Yes, I like StackOverflow.	Reddit, or gitter.im are good options as you can have conversations that are less formal. StackOverflow is Q+A only really.	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development	Desktop applications						Embedded Systems			Science/Research							Official dlang.org/install.sh script			Homebrew									2.077.1 (latest LDC)												LDC	Linux	macOS						Embedded				dub		cmake				No	Visual Studio Code		4	0				4		It's awesome, but I miss a few features	Destructuring assignment would be nice. 	tuples	string interpolation														Yes, but only for experimenting/testing/debugging	4		Yes	3	4	4	Nothing - Phobos (Standard Library) is great									@nogc		Performance	More -betterC support	More/better container classes				@nogc containers	better json serialization		std.graph	std.database		std.benchmark	std.decimal																																															std.windows				More parallelism patterns (think java.util.concurrent).  More manual vectorization support (trig and math functions). A fast, simple HTTP server and client lib.	No, but I want to to					Personal laziness											Non-perfect C++ integration										Poor GC implementation / performance	vibe.d needs improvement, and i do a lot of REST/websockets/microservices				dub					Nothing									Fewer third-party libraries than other language						Lack of good examples / tutorials				Nothing.							Not sure why ldc is not the defacto compiler.	fast, clever, betterC++	Andrei talk on youtube	It had cool features and generated fast code.	mir						Performance				-betterC	Closeness to C/C++		Templates		Built-in unittests					Contracts				Multi-paradigm	Functional programming paradigm							-betterC								DMD support for AVX2										Cross-compilation with LDC			It can be as fast as C++, or as high-level as Java depending on the need.	The tooling needs continued refinement, front to back. 	Yes, just tell me how		Spaces	2018-02-28 14:29:51	2018-02-28 15:25:23	699a8cb026
8c77acd899b65414c5f0ec94efc33b4c	Yes	4					Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli							3		4		0	4	4		0			0			3	D Forum	#d on IRC						4	No, the D.Learn forum is fine.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly														Official tarballs	Official .rpm packages	Official .deb packages										I compiled D from source			2.078.3 (latest)													DMD	Linux									dmd		dub						Not applicable	Coedit		4	1	4			4		It's ok															Nothing - D is already awesome		Yes, but only for experimenting/testing/debugging	4	Semantic lacks a bit of accurary	Yes	3	4	4										@nogc		Performance		More/better container classes				@nogc containers						std.benchmark								std.bigint			std.complex	std.concurrency	std.container		std.csv					std.exception		stdx.checkedint		std.functional				std.mathspecial		std.outbuffer	std.parallelism					std.signals		std.stdint		std.system				std.uri			std.variant	std.windows	std.xml				Yes	3																								Poor compiler error messages					Poor debugging						Nothing								Nothing											Nothing.								template expressiveness gc	It was mentioned, on a IT site, at the beginning of the 2010's that it could be eventually be a default package in Fedora Core, which didn't happen but this was really the first time.			Ranges & std.algorithm				std.traits		Native interoperability with C					Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests									Multi-paradigm								-betterC		New range functionality (substitute, slide)			Back referencing of mangled symbols		Removed prelude assert for constructors & destructors		Automatic compilation of imports (dmd -i)				New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)						newCTFE				No, I'm already donating my free time		Spaces	2018-02-28 15:01:17	2018-02-28 15:24:00	b4136da9ee
413f3cd741586d2d59ae28ec40a111e6	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										5	none	4	some modules lack documentation, and there could be more examples. but overall i'm kind of happy with it. and it has improved a lot over the bast 6 years	0	4	3	i really miss a quicknav section at the bottom of the page	0			1	Always great content	more posts would be nice ( i know it needs more contributors )	5	D Forum	#d on IRC						5	No, improve DFeed.	no	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications	IoT			Game Development		Embedded Systems					Official Windows .exe installer																2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows				WebAssembly	Embedded			rdmd	dub						Yes, I work with D part time	Visual Studio Code		4	1	2	i just dislike the bugzilla interface. also i think it would be better if reporting bugs would be quick and easy => github issues. but i'm also fine using bugzilla...		5		It's awesome, but I miss a few features	syntax is good, but D should drop stupid C semantics like promotion/conversation rules.	tuples			named arguments			multiple alias this			static break	writing files at compile-time					No	2	it is incorrect at some places. or at least underspecified. 	Yes	3	5	4		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc		Performance					std.eventloop		better json serialization	better xml serialization		std.database	std.i18n			std.color	std.image					std.bigint					std.container		std.csv		std.demangle					stdx.checkedint	stdx.logger							std.outbuffer						std.signals	std.socket	std.stdint									std.variant		std.xml	std.zlib	std.zip		Yes	5													Missing language feature X / not moving fast enough	Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)							Nothing								Poor debugging		DLL support on Windows					Auto-decoding of strings		Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)										Lack of good examples / tutorials							Lack of progress on DIPs		Wrong decisions at the management level			not bad @all	openMW (used D initially, but switched to c++ later)	learning new languages is fun	derelict. or vibe.d, though it can be improved ALOT	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)					Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection			Debug attribute	import("myfile")					static foreach		DMD as a DUB library		Compile-time format string checking			New range functionality (substitute, slide)						DMD support for AVX2				Deprecation of the comma operator			vibe.d 0.8			Cross-compilation with LDC	newCTFE		having to work with c++ at work. D is just pure productivity.	OPTLINK	No, I'm already donating my free time		Tabs	2018-02-28 14:46:18	2018-02-28 15:18:41	3faafade48
0c64335e2987e5e784086430bd54194b	Yes	4					Language specification	#d IRC on freenode	D Forum: Learn								3	Finding clear and up to date sources	3	Information about how to use functions and the organizationam structure of the standard library 	4	3	3	Search features are lacking and hard to use	0			0			3		#d on IRC			My colleagues			3	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development	Desktop applications	IoT				Big Data	Embedded Systems	Machine Learning							Official .deb packages			d-apt Debian/Ubuntu																							GDC	Linux			BSD-variant				Embedded				dub	make	cmake				Not applicable	vim / neovim		4	0				4	better compile error messages that are more descriptive of the cause and reason of the problem 	It's awesome, but I miss a few features		tuples			named arguments											sets in the form used by java. Dictionaries could possibly be useful 	No			Yes	3	4	3				Poor naming choices		Reliance on the GC				@nogc		Performance	More -betterC support	More/better container classes			std.eventloop	@nogc containers				std.database					std.image	std.drawing (2D)																																																					Time is my only enemy						I am just starting to learn D													Poor Phobos (Standard Library) documentation		Poor compiler error messages					Poor debugging											C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library			Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects			Lack of good examples / tutorials																																																																						Maybe, I'm still a student		Meh, I don't care.	2018-02-28 14:40:23	2018-02-28 15:07:24	8759457b91
10499bd907a2b2b3afc2a0ab51f9b85e	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker		"D Cookbook" by Adam D. Ruppe	d-idioms		4	Came from scripting language	4	Phobos docs have gotten a lot better. I like the look of Adam Ruppe's version though.	0	3	3	It's a little busy.	1	4	It's been a while since I tried it. Hard to say.	1	Always great content	Nothing really.	5	D Forum							5	Yes, I like StackOverflow.	D learn is a great resource for help, but I grok the benefits of stack overflow. The previous question only has the options to switch. What if we switch D learn to stack overflow, but re-name D learn as D help and make it specifically for questions that aren't quite appropriate for stack exchange?	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly											Science/Research		Official Windows .exe installer					Official dlang.org/install.sh script	d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows							dmd	rdmd	dub						No		Notepad++	4	1	4	Nothing stands out.		4	Improved templates/ctfe.	It's awesome - keep it as is																				Yes	2	5	6					Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers				std.database		std.benchmark						Knowing what to fix when template constraints fail	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container				std.demangle	std.digest	std.encoding			stdx.checkedint	stdx.logger			std.json		std.mathspecial		std.outbuffer			std.process	std.random	std.regex	std.signals	std.socket	std.stdint		std.system				std.uri		std.uuid		std.windows	std.xml	std.zlib	std.zip	1) add an improved version of Attila's concepts library to help with template errors, 2) make as @safe and nogc as possible while still being easily usable	Yes	3	I'm a weak git user and a mediocre programmer...																			In the past it was libraries, but as mir improves I'm getting fewer excuses not to use D				Poor compiler error messages					Poor debugging	dub												These don't discourage me, but I largely agree that they are concerns.		Fewer third-party libraries than other language			Few showcases / flagship projects			Lack of good examples / tutorials		Few transition guides from programming language Y					Lack of progress on DIPs				0) Lack of built-in tuples, 1) Figuring out how to use C libraries with D on Windows was quite a bit of a struggle for a beginner, 2) D does not have Jupyter kernel, REPL would be nice complement for run.dlang.io, 3) People complain about the GC too much reddit, 4) Template slow and bloaty, 5) C++ getting metaclasses would be a negative for D, 6) Lack of AST macros, 7) Limited options for operator overloading	Faster than python	reddit	Not R, faster than python, better templates than C++	mir	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits	Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests									Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library	Templated vector operations		-betterC										Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute	Cross-compilation with LDC	newCTFE		Faster than scripting languages	Whatever Ilya says is his least...	Yes, I'm already doing so	Lots of progress and stuff moving in the right direction. Too much negativity on the forums. Too much repetition of topics on the forum.	Meh, I don't care.	2018-02-28 14:22:45	2018-02-28 15:07:24	e5338de841
867a17b0829fa941e2b7cda156516947	Yes	4				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		5	Ranges. Some CTFE stuff.	4	Need more structure, more examples.	0	4	3	Weird/complex examples of D usage (from C user perspective).	1	4		1	Mostly great content		4	D Forum	#d on IRC						5	I don't care.	D.learn is fine by me.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly								Embedded Systems					Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux		Windows	BSD-variant	Android			Embedded		dmd		dub	make	cmake				No	Eclipse		3	0			I was not sure of myself.	4	Success, more widespread usage.	It's awesome - keep it as is																				Yes	4	4	4						Reliance on the GC	Fear to do breaking changes		@safe for all modules		DIP1000						std.eventloop	@nogc containers												Ranges, but it's certainly due to the concept itself.																																														- Eventloop support (unix fd like support). - Proper ref-count primitives (shared-pointers etc). - 	No, but I want to to			Finding good issues to get started		Personal laziness					I am just starting to learn D		Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.							1/ It looks like it does not get the credit it deserves. 2/ I hope the focus on keeping it as a proper system language will be kept (I think it should not target as being a replacement of Python, even if it could be). We should stay focused.	Intelligent, smart, system	From a colleague in a random discussion about programming languages.	Wanted to learn C++ for a personal project but found out D was way better and enjoyable.	std.traits	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection				import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library		Compile-time format string checking	-betterC		New range functionality (substitute, slide)			Back referencing of mangled symbols	Reproducible builds	Removed prelude assert for constructors & destructors			Runnable examples on dlang.org		Deprecation of the comma operator		New third-party applications (e.g. Tilix)	vibe.d 0.8			Cross-compilation with LDC	newCTFE		So rewarding to use.		Maybe, I miss accountability at the moment	I also like the coding style of D (bracket at the start of a new-line)	Spaces	2018-02-28 14:35:01	2018-02-28 15:06:40	b8855fffda
99b027b3d6b670aa3c3d11f517231f20	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn								5	Probably the fact that when I started, D2 was in its infancy, so not only were there a lack of resources to learn it, but it was constantly changing.	5	 I have no particular problems with Phobos' documentation. When I was originally learning D, the fact that functions with auto return types didn't show up in the docs tended to make std.algorithm downright scary, but that's long since been fixed.	3	4	3	Overall, I don't have any particular complaints about it, but I also don't use it much. Even when reading the documentation, I'm more likely to just open the source code locally than dlang.org, and I use the mailing list interface to the newsgroup rather than forum.dlang.org. I'm sure that the spec does need some clarifications and some fleshing out, but it's decent. We could probably use more in the way of tutorial stuff, since that's completely lacking, but someone would have to write it, and I think that there are a couple of sites geared toward that. They're not the sort of thing I go looking for though, since I'm not a newbie.	0			0			5	D Forum					I don't need help		4	No, the D.Learn forum is fine.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily		Desktop applications			Security																					I compiled D from source		2.079.0 (nightly)														DMD	Linux			BSD-variant	Android					dmd		dub						Yes, I work with D full time	vim / neovim		5	1	5	The only real problem I see with D's issue process is getting folks to fix bugs. Typically, folks fix the stuff that affects them, and certainly sometimes, folks fix stuff that other folks report, but a lot of bugs just end up sitting in bugzilla with no real attention. And ultimately, that's a manpower issue, not an issue with the software that we use. For some stuff, we may need to find a way to have some folks paid to go through bugzilla and fix bugs, but that's a hard situation with a volunteer project. Regardless, I very much hope that we stick with bugzilla rather than switching to something inferior like github issues like has been suggested previously.		5		It's awesome - keep it as is																				Yes	2	5	5		Auto-decoding for strings			Old modules like std.outbuffer or std.socket				@safe for all modules		DIP1000	Performance		More/better container classes					better json serialization	better xml serialization									Better, more complete containers (not necessarily @nogc), a better socket solution, and an @safe replacement for std.mmfile.		std.base64	std.bigint		std.compiler	std.complex				std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger			std.json		std.mathspecial		std.outbuffer					std.regex	std.signals	std.socket	std.stdint		std.system				std.uri		std.uuid		std.windows	std.xml	std.zlib	std.zip	1. Get rid of auto-decoding. 2. Get rid of or replace any modules that we consider sub-par - particularly those which date back to D1 and have never been upgraded to fit into D2. 3. Remove all C bindings from Phobos along with anything that relies on external libraries that aren't part of the OS (in particular, std.net.curl). druntime should have the C bindings for the OS, and all other bindings should be in external projects.	Yes	4	There is sometimes a tendency for PRs to languish - sometimes for years, particularly if there's any disagreement or if it requires input from Walter or Andrei. Obviously, that doesn't always happen, but it's not entirely uncommon either.										Nothing									Using D for some projects would certainly be easier if the ecosystem of 3rd party projects were larger and better maintained, but it's not generally a showstopper. The biggest thing that has limited my use of D historically has been the fact that my job has been using C++, not D, and I was not in a position to change that, though my current job is finally one that allows me to use D.	Nothing						Nothing							dub's situation does not discourage me from using D, but it certainly can make it harder than it would be with a more flexible build system.	Nothing							None of these things discourage me from using D, but stuff like auto-decoding definitely makes it more annoying, and I do think that the fact that code is not @safe by default seriously undermines the @safety situation and makes Walter's talk of D being memory safe somewhat of a joke, because it's not memory safe by default. You _can_ make it memory safe with some extra work, which is great, but it's frequently just easier to not bother with @safe, and even if you want to bother, it's easy to forget and end up with code that you think is @safe but isn't. The prevelance of generic code and attribute inference also makes it harder to ensure that code is @safe - especially if it's generic code rather than using generic code.		Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages								Many of the libraries on code.dlang.org do not give the impression that they are either particularly complete or well-maintained.							I wouldn't say that it discourages me from using D, but the focus on -betterC and @nogc worries me. Having code minimize its use of the heap is good, and not using the GC when it's not needed is good, but too often, the focus seems to be on completely removing uses of the GC, when in reality, the GC is a huge blessing, and programming without it can be hell (certainly, in many cases, it tends to complicate code considerably to try to avoid the GC, and it makes it far more error-prone). I think that management does agree the the GC is a good thing on some level, but the attempts to please the folks who freak out about the GC (be it rightly or wrongly) frequently give the impression that there is agreement that the GC should be removed from as much as possible as if it were evil. And -betterC concerns me, because some folks clearly want to use it as their goto version of D rather than as a porting tool, and it seems like management is bending over backwards to muck with druntime and Phobos to make more work with -betterC, which I think actively makes the code worse in many cases, and I sure don't want to be programming in a crippled version of the language like -betterC is. 	Ultimately, the fact that it's not necessarily easy to use C/C++ libraries, and there aren't enough D libraries to replace or wrap the C/C++ ones for your average D programmer to avoid doing it themselves if they want  to do serious work. While the fact that D can bind to C as easily as it can is great, the fact that you have to create the bindings in D is a serious problem, because it's time-consuming and error-prone to do it by hand, and none of the automated tools get it quite right, whereas C++ can just #include C and go on its merry way. And the fact that D can bind to C++ at all is great, but it's still a royal pain to do so, and lots of basic C++ stuff isn't accessible from D without a lot of work. So, using C++ libraries from D can be quite hard. The fact that it's _possible_ is awesome, but in some ways, the fact that it doesn't do a lot more makes it look pretty bad, sad as that may be.	Powerful Safe Awesome	I don't remember. It's been way too long. Maybe the wikipedia article on unit testing?	I wanted a language that had the power of C++ and the safety of Java.	Phobos? I don't do a lot with 3rd party libraries at this point.	Ranges & std.algorithm		CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax			Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection					std.concurrency & std.process	Multi-paradigm	Functional programming paradigm						Compile-time format string checking						Back referencing of mangled symbols		Removed prelude assert for constructors & destructors												newCTFE		It's powerful and pleasant to use. The only language that even comes close is C++, and C++ is very unwieldy to use in comparison to D, not to mention far less safe. I know both D and C++ quite well, but I can program in D way faster than C++, and the code is much more pleasant to write and maintain.	Auto-decoding would be the biggest pain point, but a lot of the implicit conversions come close (e.g. the fact that true can be converted to int without a cast or that integral types implicitly convert to character types, which causes fun problems when doing stuff like appending to strings).	No, I'm already donating my free time		Spaces	2018-02-28 14:06:06	2018-02-28 15:04:59	51fde8cbb0
bfbfd16ea3029ce204c82896471c1ec1	Yes	4							D Forum: Learn	"Programming in D" by Ali Çehreli							3	Language spec docs are extremely hard to navigate. It fills like it was populated by a bot. Cppreference imho has just the right amount of substance, depth and examples	1	Completely illegible mess. I cringe at the thought of reading std docs. Just a looong page of words and hyperlinks	5	3	2	The blog should be more prominently featured. Emphasize community. Highlight 2-3 marquee application. What’s up with a giant code/example taking up half the page? Docs docs docs.  	1	4		1	Huge variance in quality	The blog does not have a cohesive theme. Rather it’s a mix of upcoming announcements sprinkled with esoteric topic (why D is better C? Which is not really a newcomer topic is it?). 	3			#d on StackOverflow		My colleagues			3	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily							Big Data		Machine Learning							Official .deb packages					Homebrew											2.075.1 (removed built-in .sort)										DMD	Linux	macOS								dmd			make					Yes, I work with D full time	Visual Studio Code		2	0				3		It's awesome, but I miss a few features	Lol. Sometime it feels there are way too many ways to do same thing. Makes it hard to read other ppls code		string interpolation		named arguments								UFCS for local symbols				No	3		Yes	3	2	0				Poor naming choices					@safe for all modules	@nogc		Performance						@nogc containers	better json serialization	better xml serialization		std.database	std.i18n											std.compiler							std.demangle													std.outbuffer																		std.windows				Need tensor manipulation code a la numpy 	No, but I want to to			Finding good issues to get started					High barrier to entry		I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)						Issues with language feature X (e.g. shared, @property)				Poor Phobos (Standard Library) documentation			Poor GC implementation / performance			Non-enterprise IDE support	Poor debugging				D's dependence on a large and bulky runtime											Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow		Lack of good examples / tutorials	No good point for learning D						Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Given the niche it fills for us being in the middle of python and c++. D should go really in. An awesome linear algebra system, faster rdmd, maybe even a kernel for jupyter notebook would be game changer in my book	Fun, sensible, powerful 	Work	Work		Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax	UFCS		Closeness to C/C++		Templates		Built-in unittests							import("myfile")			Functional programming paradigm																	Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages		Cross-compilation with LDC			It’s so much better after c++. 		Yes, but only for a specific project		Spaces	2018-02-28 14:22:00	2018-02-28 15:04:24	035ffb6eda
016cbee6b7ebeccbdd99097e06a1e416	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli				"D Cookbook" by Adam D. Ruppe			3	Bad documentation and code examples. This has improved a lot since I started though.	3	Examples are sometimes very obscure, long and way more complex than necessary.	0	4	3	The search feature is terrible and sometimes it's not so obvious where you find certain information, could be combined with a solution for the first one.	0			1	Always great content	I have nothing negative to say about the DBlog. It's just amazing.	5	D Forum		#d on StackOverflow			I don't need help		5	I don't care.	I would be fine with pushing more questions to stackoverflow, but certain things just don't fit on stackoverflow, but are very accepted in the learn forum. Stackoverflow is very strict, where as the forum really isn't.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications			Security	Game Development							Official Windows .exe installer													I compiled D from source			2.078.3 (latest)													DMD	Linux	macOS	Windows		Android	iOS	WebAssembly			dmd	rdmd	dub						Yes, I work with D part time	Atom		2	1	4	Not sure		3	Not sure what exactly.	It's awesome, but I miss a few features	Some things become very verbose, because often library solutions are more acceptable than syntactic sugar.		string interpolation		named arguments	assert diagnostics			UDAs for attributes		static break	writing files at compile-time		Static inheritance			Yes, but only for experimenting/testing/debugging	4	Nothing in particular.	Yes	2	3	4		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket			Some modules are set to be deprecated, but have no equivalent counter parts. Sometimes certain symbols also gets deprecated without replacements.	@safe for all modules			Performance		More/better container classes					better json serialization	better xml serialization		std.database	std.i18n		std.decimal	std.color	std.image	std.drawing (2D)	Concurrent containers such as ConcurrentDictionary<TKey,TValue> from C#				std.bitmanip								std.demangle	std.digest							std.getopt					std.outbuffer																			std.xml				No, but to other D repositories				Time is my only enemy								Nothing										Nothing						Nothing								Nothing								Nothing											Nothing.								Fun, expressive and elegant	Wikipedia.	It looked interesting.	Probably vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)						UFCS																		static foreach	opt-in GC and runtime				-betterC																					That every other language does what D does bad, worse.		Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 14:33:22	2018-02-28 14:59:53	a101309e95
d6cdae23f881319c2d14a77c4fcdf8a9	Yes	5			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org										Google - alternatives to c++	5	None. 	5	Nothing 	3	5	5	Nothing	0			1	Mostly great content	Nothing	4		#d on IRC	#d on StackOverflow					4	No, the D.Learn forum is fine.	IRC works well	Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly							Big Data				Science/Research						Official OSX dmg installer		d-apt Debian/Ubuntu		Homebrew									2.077.1 (latest LDC)												LDC	Linux	macOS				iOS				dmd								Not sure	Visual Studio Code		5	0			No	5		It's awesome - keep it as is																				Yes	4	4	4						Reliance on the GC						Performance	More -betterC support													std.color	std.image	std.drawing (2D)		None																																														Nothing	No, but I want to to				Time is my only enemy						I am just starting to learn D											Would like to see D working in R like RCpp	Nothing						Nothing								Nothing									Fewer third-party libraries than other language										Nothing.								Fast intuitive fun	Long time ago on Netscape 	Wanted a fast language and alternative to c++																		@safe strings + arrays						std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach																							Cross-compilation with LDC			For research to build fast simulators		Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 14:32:53	2018-02-28 14:54:32	37f314ca68
bd9299588632a84ae97d6d37f33140bf	Yes	5					Language specification			"Programming in D" by Ali Çehreli					d-idioms	Trial and error	5		5		2	5	5		0			1	Always great content	I would have liked more post from guest authors, to get a more general feel of the D community. What their struggles are, what they gained by using D, or just more project showcases. 	5	D Forum	#d on IRC			My colleagues	I don't need help	Wild's Code Club discord	5	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development	Desktop applications				Game Development				Kernel Development										Arch Linux						I compiled D from source			2.078.3 (latest)													DMD	Linux									dmd	rdmd	dub						Not applicable	Visual Studio Code		4	1	3	The gui is a bit verbose for new users.		5		It's awesome, but I miss a few features									UDAs for attributes			writing files at compile-time					Yes, my project depends on it	5		Yes, but only for some projects	5	5	5		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules		DIP1000		More -betterC support					@nogc containers					std.i18n																													std.mathspecial																std.uri				std.windows					No, but I want to to			Finding good issues to get started	Time is my only enemy	Personal laziness							Nothing										Nothing						Nothing						D's dependence on a large and bulky runtime		Nothing								Nothing											Nothing.			Lack of progress on DIPs	Lack of focus at the management level				Powerfull Modular SImple	OSDev.org & reddit	I was sick of how C++ treated me and it looked cool	vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits		Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays		Inline assembler		Debug attribute	import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime			Compile-time format string checking	-betterC		New range functionality (substitute, slide)	toString with output ranges	Deprecation of the integral promotion for unary operators	Back referencing of mangled symbols	Reproducible builds				Runnable examples on dlang.org		Deprecation of the comma operator				Colorized error messages		Cross-compilation with LDC	newCTFE		I want the language to be bigger so I'm 'forced' to use the language, and the constant improvement of the language.	The large amount of runtime needed just to compile simple code.	Maybe, I'm still a student		Tabs	2018-02-28 14:08:16	2018-02-28 14:51:20	fdc5b59f80
f482e5cb1dc3f9b92c29f7e461293e24	Yes	4					Language specification	#d IRC on freenode	D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4	Sometimes lame compiler errors.	3	I dont use phobos that much.	0	3	2	The first stuff i should see is some super simple code, not a mixin haxory.	0			1	Mostly great content	its ok	4		#d on IRC						5	I don't care.	I dont ask that many questions. And the guys on IRC are great.	No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly		Desktop applications	IoT			Game Development							Official Windows .exe installer	Official tarballs												I compiled D from source			2.078.3 (latest)													DMD	Linux		Windows		Android					dmd								Yes, I work with D part time	Sublime		3	0			Lack knowlage. And also not many bugs in my usecases.	4	It would be cool to leverage the compiler for code completition. And I dont mind how slow it woul be.	It's awesome, but I miss a few features	- Too many attributes, and some starts with @ some don't - int[$] = [0, 1, 2, 3, 4]; // instead of int[4] - immutable/auto is nice, but var/val in Kotlin hard to beat - immutable is too long for useful  keyword  	tuples			named arguments			multiple alias this			static break						Yes, but only for experimenting/testing/debugging	4	dont know	Yes	2	3	2					Old modules like std.outbuffer or std.socket	Reliance on the GC				@nogc		Performance		More/better container classes				@nogc containers	better json serialization	better xml serialization																												std.functional				std.mathspecial	std.meta																								No, but I want to to			Finding good issues to get started			No roadmap						Nothing													Poor compiler error messages				Non-enterprise IDE support	Poor debugging					DCD just don't work reliably for me.						C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages												Lack of progress on DIPs				manpower / money?	nice, native, productive	Don't know, but I was getting back to C from Java/C#. And I hate header files and forward declarations. I was evaluating other native languages and one point was the seller: I can GC or malloc and cast to range. BOOOM I was sold.	No more C for me. No C++ ever again.No header files. JVM/.NET is sometimes not fast enought.	adamdruppe/arsd simpledisplay			CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax		-betterC	Closeness to C/C++		Templates		Built-in unittests			Garbage collection						Multi-paradigm			static foreach		DMD as a DUB library			-betterC																			newCTFE		Pleasure to code. Enough for support programs that i can push inside our company. For hobby projects (gamedev).	C auto casting of int / uint / bool / ... this should be a OptIn feature for extern(C)	Yes, just tell me how	D is awsome, and a small comunity is not a bad thing. Quality over quantity and zealots ;-)	Spaces	2018-02-28 14:03:40	2018-02-28 14:50:50	3b9b862baf
c92ddf14ac6d173ecb68b5ee50e5afd1	Yes	5					Language specification			"Programming in D" by Ali Çehreli							4	Understanding the Phobos documentation. Too many templates and ranges.	4	There are some incorrect/incomplete pieces in there.	0	4			0			1	Always great content	Not enough posts from leadership about where things are going	5	D Forum		#d on StackOverflow					5	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily											Science/Research			Official tarballs		Official .deb packages																2.075.1 (removed built-in .sort)										DMD	Linux	macOS	Windows							dmd	rdmd		make			scons		Yes, I work with D part time		Geany	5	1	5			5		It's awesome - keep it as is																				Yes	3	3	6				Poor naming choices																better xml serialization		std.database									std.base64	std.bigint		std.compiler	std.complex	std.concurrency	std.container						std.encoding		stdx.allocator	stdx.checkedint	stdx.logger			std.json		std.mathspecial	std.meta	std.outbuffer						std.signals		std.stdint					std.uni			std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	It would be less generic	Yes	3	Slow process, lots of rules, lot of time to build things locally										Nothing										Nothing									dub	DLL support on Windows				Nothing									Fewer third-party libraries than other language				Little info on StackOverflow		Lack of good examples / tutorials				Nothing.								C with features	Probably on Reddit	I wanted something better than C and D works well with C libraries while producing fast code.			Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax						Built-in documentation (Ddoc)	Built-in unittests			Garbage collection						Multi-paradigm								-betterC										Runnable examples on dlang.org											It's the best language for the job. I can edit it with a text editor and build simple projects with a Makefile.	Big install on Windows	Yes, just tell me how	It would be hard to donate to the DLF when everything they do is a mystery. I won't donate if the money is used to support enterprise users, for instance.	Tabs	2018-02-28 14:27:22	2018-02-28 14:50:37	1719758524
c92caae175d232b19554e414357ef284	Yes	5				tour.dlang.org	Language specification	#d IRC on freenode									5	Needs more examples.	1	Needs more examples.	5	5	5	Horrible theming.	1	2	Needs more comprehensive examples.	1	Huge variance in quality	Needs more content	5	D Forum		#d on StackOverflow					2	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development	Desktop applications	IoT			Game Development		Embedded Systems			Science/Research					Official .deb packages				Arch Linux	Homebrew					I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows	BSD-variant	Android	iOS	WebAssembly	Embedded				dub			meson			Not applicable	Visual Studio Code		5	0				5		It's awesome - keep it as is																				Yes	3	3	6	Nothing - Phobos (Standard Library) is great								@safe for all modules	@nogc		Performance		More/better container classes					better json serialization			std.database		std.benchmark				std.drawing (2D)		regex	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container		std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint	stdx.logger	std.functional					std.meta	std.outbuffer						std.signals	std.socket				std.traits		std.uni	std.uri		std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip	Static library	No, and I don't plan to			Finding good issues to get started			No roadmap				I am just starting to learn D						Non-perfect C++ integration							Poor Phobos (Standard Library) documentation											D's dependence on a large and bulky runtime		Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow	Missing tutorials / documentation in spoken language X	Lack of good examples / tutorials	No good point for learning D	Few transition guides from programming language Y		Nothing.							Needs more exposure		Google	Trying something new	stdio						Performance		Readable syntax						Built-in documentation (Ddoc)	Built-in unittests			Garbage collection																				Reproducible builds								New third-party applications (e.g. Tilix)				Cross-compilation with LDC			Simple bu static		Maybe, I'm still a student		Tabs	2018-02-28 14:27:36	2018-02-28 14:48:46	f045b3fae6
d2224a657a5936512a6f588176fe1ec9	Yes	4				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4		3	Some modules are underdocumented, with only basic descriptions	1	4	4	Navigating the dropdowns to find stuff is a bit confusing.	1	5		1	Mostly great content		4	D Forum							5	No, improve DFeed.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications		DevOps									Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux		Windows							dmd	rdmd	dub						No	Visual Studio Code		4	0				4	Better error messages, specially for template errors.	It's awesome, but I miss a few features	I actually like the (now dead) 2.079 change, with the import a : b, c, d : e, f syntax i.e. allowing selective imports in the same line as normal imports.	tuples		in-place struct initialization	named arguments						static break			Static inheritance		Pattern matching	No	4		Yes	2	5	5							Fear to do breaking changes		@safe for all modules								std.eventloop		better json serialization			std.database												std.compiler					std.csv		std.demangle	std.digest			stdx.allocator							std.mathspecial		std.outbuffer																						std.database pls	No, but to other D repositories			Finding good issues to get started		Personal laziness			High barrier to entry						Missing language feature X / not moving fast enough											Poor compiler error messages				Non-enterprise IDE support	Poor debugging									Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages																The "fast code, fast" thing is weird to me, it's more "cringy" than anything	fast, flexible, concise	reddit	I was sick of C++		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)				Native interoperability with C		UFCS			Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays	Garbage collection							Functional programming paradigm		static foreach										Back referencing of mangled symbols								New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)						newCTFE				Maybe, I miss accountability at the moment		Spaces	2018-02-28 14:26:21	2018-02-28 14:48:38	b9d4c74261
7d765da28435c9c3c50a2ae0456b1201	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe			4	No IDE support	4	I would prefer more examples for some parts	3	5	4	nothing at all	0			1	Always great content	Nothing	4	D Forum							4	Yes, I like StackOverflow.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development			DevOps			Big Data								Official .rpm packages					Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)											latest GDC from source code on github	LDC	Linux		Windows					Embedded				dub	make	cmake				Yes, I work with D part time	Visual Studio Code		3	1	2	I would prefer using github issues, but oveall I am ok with current state		4	Take less memory, be faster	It's awesome, but I miss a few features	No way to disable some attributes like final, pure ...	tuples	string interpolation	in-place struct initialization						@mutable in immutable				Static inheritance			Yes, but only for experimenting/testing/debugging	4	Some specific topics are not well documented	Yes	4	4	2		Auto-decoding for strings		Poor naming choices		Reliance on the GC			@safe for all modules	@nogc	DIP1000		More -betterC support	More/better container classes			std.eventloop	@nogc containers							std.decimal							std.bigint		std.compiler	std.complex																	std.mathspecial		std.outbuffer						std.signals																make it not dependand on GC	Yes	1	Nothing														Non-perfect C++ integration										Poor GC implementation / performance			Non-enterprise IDE support					D's dependence on a large and bulky runtime			Auto-decoding of strings	Attribute bloat		Wrong defaults (e.g. not @safe by default)					Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects										Lack of progress on DIPs				It would be nice to have better bare-metal support	effective fast easy	On some web article(news), but it is too long, to remember correctly	At works we were looking  replacment  for PHP on one of our projects, we want something fast as C++, but without headers issues, with better memory managment, with fast compilation times and nice syntax.	vibe-d	Ranges & std.algorithm					Performance	Native interoperability with C	Readable syntax	UFCS	-betterC			Templates											Multi-paradigm	Functional programming paradigm			opt-in GC and runtime				-betterC										Runnable examples on dlang.org		Deprecation of the comma operator			vibe.d 0.8			Cross-compilation with LDC	newCTFE		I do not know	slow CTFE	No, I'm already donating my free time		Spaces	2018-02-28 14:06:13	2018-02-28 14:47:25	ab9a0482ae
c586b4fcccf0db1d315232d32acbdd55	Yes	4								"Programming in D" by Ali Çehreli							4		4	Explanation about the use of tuples (i.e. std.algorithm.group)	0	3	4		1	4		1	Mostly great content		3	D Forum							3	No, the D.Learn forum is fine.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly		Desktop applications																	d-apt Debian/Ubuntu										2.078.3 (latest)													DMD	Linux											dub						No		MonoDevelop	4	1	3			4		It's awesome - keep it as is																				Yes	4	4	4					Old modules like std.outbuffer or std.socket														better json serialization	better xml serialization										(Anonymous) tuples given as a return type from functions	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex	std.concurrency	std.container		std.csv		std.demangle	std.digest	std.encoding		stdx.allocator	stdx.checkedint		std.functional	std.getopt	std.json		std.mathspecial	std.meta	std.outbuffer			std.process		std.regex		std.socket	std.stdint		std.system			std.uni	std.uri	std.utf		std.variant	std.windows	std.xml	std.zlib	std.zip		No, but I want to to			Finding good issues to get started								Uncertainty										Lacking small and to the point DUB packages (e.g. D's Newtonsoft.Json equivalent) Many dub packages are monolithic	Nothing							Non-enterprise IDE support	Poor debugging	dub					Nothing									Fewer third-party libraries than other language			Few showcases / flagship projects	Little info on StackOverflow										Lack of focus at the management level			A consistent marketing to get more users	Easy to use	Reference by a PhD at university	To learn programming in general	DSFML	Ranges & std.algorithm		CTFE (static if, static foreach)					Readable syntax	UFCS				Templates		Built-in unittests			Garbage collection		Contracts				Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library																					Cross-compilation with LDC			It allows me to try different programming styles either to learn them or to pick the best tool for the job		Maybe, I miss accountability at the moment		Spaces	2018-02-28 14:28:18	2018-02-28 14:45:43	8ad3b76250
f6e881b70013a56520090d159ec3959e	No, I have never used D			uncertainty with lightweight flows, lack of http2 support 	"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org											3	the lack of examples of implementation of the functionality I need: http 2, network microservices, poor standard libraries unlike golang	3	intricacy and inconvenience with multithreading implementation strategies	2	3	4	standard library is too poor in contrast golang	1	4		1	Poor/unhelpful content		3	D Forum							5	No, the D.Learn forum is fine.	no		Go ahead and break code, even for the "little things", but do so through a gradual, managed process.		Web development															Official .deb packages																										DMD	Linux	macOS	Windows	BSD-variant						dmd								No	Visual Studio Code		4	0																																																																																																																																																																																																																																						2018-02-28 14:15:39	2018-02-28 14:43:53	fd4d1bde06
4f4f9fafbe4f23c3c05aa4ba314f871e	Yes	4								"Programming in D" by Ali Çehreli							5	lacking (unit tests with) sample code for APIs. basic code is there, but it's difficult to use it as building blocks	3	there is almost no cross reference. sample code covers isolated use, but not how it relates to other parts of the API	5	5	5		0			1	Mostly great content	no organization of published content. posts from more than a year are lost (as they're not interconnected)	5	D Forum		#d on StackOverflow					5	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Monthly		Desktop applications					Big Data				Science/Research			Official tarballs																2.077.1 (latest LDC)												LDC	Linux			BSD-variant								dub						Yes, I work with D part time	emacs		3	0				5		It's awesome - keep it as is																				Yes	3	6	4	Nothing - Phobos (Standard Library) is great									@nogc				More/better container classes					better json serialization		std.graph		std.i18n										std.bitmanip									std.digest																																			No, and I don't plan to			Finding good issues to get started	Time is my only enemy						I am just starting to learn D											"nobody's using D, too risky, too untested"	Nothing									dub					Nothing									Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages									Nothing.								a better C	One of Alexandrescu's presentation	tired of C++ self-endulging evangelists 	phobos	Ranges & std.algorithm					Performance			UFCS		Closeness to C/C++				Built-in unittests		@safe strings + arrays			Contracts				Multi-paradigm	Functional programming paradigm					Templated vector operations				New range functionality (substitute, slide)								Runnable examples on dlang.org	docarchives.dlang.io							Cross-compilation with LDC			there's a better option that c++	too few people use it	No, I'm already donating my free time		Spaces	2018-02-28 14:09:29	2018-02-28 14:39:08	e5a8bfdd90
ba0f1591760e3d15fcdb1cee2aaac70e	Yes	4			"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org				"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms		2	Keywords have multiple meanings, so static was misunderstood until I realized it meant compile-time in certain contexts.	5	None	5	4	5	It's difficult to get to Dub's documentation without knowing the URL.	1	5	None	1	Always great content	None	3					My colleagues			4	I don't care.	I prefer asking Steve to his face at the D meetup in Boston	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly												iOS	Official Windows .exe installer			Official .deb packages			d-apt Debian/Ubuntu		Homebrew			Docker		I compiled D from source				2.077.1 (latest LDC)												LDC	Linux	macOS	Windows	BSD-variant		iOS	WebAssembly	Embedded				dub						No	Visual Studio Code		3	0			"Am I doing it wrong?" Feelings	3	ARM64 LDC builds.  I can't figure out building them myself.	It's ok	I want a custom syntactic sugaring API so I can use "?" Syntax optionals or whatever else I can think up.															AST Macros?	Yes, but only for experimenting/testing/debugging	5	None	Yes, but only for some projects	3	4	5						Reliance on the GC			@safe for all modules	@nogc			More -betterC support					@nogc containers				std.database							std.database should interop with a CTFE predicate DSL	None																																															No, but I want to to			Finding good issues to get started		Personal laziness							Nothing										Nothing						Nothing								Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects							Nothing.							What if Walter is wrong and Andrei is too busy to convince him?	Forever beginner, :(	I was trying to learn dtrace and took a wrong turn somewhere.	I want my C to be safe and not as complex as C++	Vibe	Ranges & std.algorithm		CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++													Multi-paradigm	Functional programming paradigm			opt-in GC and runtime																	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)			DCompute	Cross-compilation with LDC	newCTFE		I want to build software that is delightfully quick	Not knowing how to do CTFE based development and blocking on it for two years.	Yes, just tell me how		Tabs	2018-02-28 13:56:19	2018-02-28 14:31:26	87d9461d98
b8e2426140a070e2d35e4ad0786fc38c	Yes	4				tour.dlang.org			D Forum: Learn	"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms		4	Finding a reason to use D.	3	It is difficult to find a clean list of methods for a given module. For methods with several overloads or template constraints, it is difficult to find what a function does. Also a lot of descriptions for functions are missing a synthetic short version.	0	5	5		1	3		1	Always great content		5	D Forum		#d on StackOverflow					5	Yes, I like StackOverflow.	no	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Monthly		Desktop applications					Big Data						Official Windows .exe installer						d-apt Debian/Ubuntu							I compiled D from source		2.079.0 (nightly)	2.078.3 (latest)													DMD	Linux		Windows					Embedded		dmd	rdmd	dub						Not sure		Ultraedit / Code::Blocks	2	1	4			5		It's awesome - keep it as is																				Yes	4	3	2							Fear to do breaking changes				DIP1000									better xml serialization		std.database	std.i18n	std.benchmark			std.image			std.xml	std.base64	std.bigint	std.bitmanip	std.compiler	std.complex				std.csv	std.datetime	std.demangle			std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional	std.getopt	std.json	std.math	std.mathspecial		std.outbuffer				std.random	std.regex	std.signals								std.uri		std.uuid	std.variant						Yes	5																				setup of environment can be challenging										dub		Missing support for platform X		Unconventional platform installations are problematic (no admin rights, proxies, offline etc.)								My work environment is discouraging, not D per se.						Little info on StackOverflow		Lack of good examples / tutorials			Few tutorials on best practices. The scope of D is so vast that it's difficult to learn how to structure a project.				Lack of progress on DIPs				Lack of confidence. People try too hard to find excuses when the same tropes come up in discussion. gc yadda, yadda. It would be better to be more assertive: gc is good and gfy are entirely appropriate responses.	Real progress, bottom-up.	Web	Only language that got C and knew how to extend it in the right way (C++ is completely bonkers and they never understood C, even if pretending to extend it).	Not many tested so there's no point .		Mixin	CTFE (static if, static foreach)				Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests	In, out, ref parameters	@safe strings + arrays	Garbage collection				import("myfile")	std.concurrency & std.process	Multi-paradigm					DMD as a DUB library		Compile-time format string checking						Back referencing of mangled symbols					Runnable examples on dlang.org							DCompute	Cross-compilation with LDC	newCTFE				No, I'm already donating my free time	A little more love for GUI would be nice (DWT, DlanGUI etc.).	Spaces	2018-02-28 13:48:56	2018-02-28 14:31:08	ffd943db67
2e6498bcff300e739132a24ce0c8cd48	Yes	4				tour.dlang.org	Language specification										4		3		0	4	4		1	4		1	Always great content											I don't care.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development												Official Windows .exe installer						d-apt Debian/Ubuntu										2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows				WebAssembly					dub						Yes, I work with D full time	Visual Studio + VisualD		3	0				4		It's awesome - keep it as is																				Yes	3	5	5									@safe for all modules		DIP1000						std.eventloop		better json serialization			std.database											std.bitmanip	std.compiler	std.complex				std.csv		std.demangle	std.digest			stdx.allocator	stdx.checkedint			std.getopt			std.mathspecial	std.meta	std.outbuffer								std.stdint								std.uuid			std.xml	std.zlib			No, and I don't plan to				Time is my only enemy				High barrier to entry								Non-perfect C++ integration																													Fewer third-party libraries than other language																		c++ but pleasent	Wikipedia		vibe.d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)					Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system			Built-in unittests												static foreach	opt-in GC and runtime	DMD as a DUB library																		vibe.d 0.8			Cross-compilation with LDC					Maybe, I'm still a student		Meh, I don't care.	2018-02-28 14:06:01	2018-02-28 14:31:00	f1e1d36bad
aece7889c8959a98c6b42389ca42dd60	Yes	4				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		5		5		0	5	5		1	5		1	Mostly great content		3	D Forum	#d on IRC						4	I don't care.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development	Desktop applications	IoT						Machine Learning							Official .deb packages													2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux	macOS	Windows							dmd	rdmd	dub						Yes, I work with D part time	Visual Studio Code		4	1	4	It seems outdated. I would like to use github for issues.		4		It's awesome, but I miss a few features	Missing a tuple syntax. 	tuples	string interpolation		named arguments			multiple alias this									No	5	Some parts are undocumented, some features is partially implemented. Some documentation is out-of-date and examples are missing (ex: extern(c++))	Yes	2	5	5		Auto-decoding for strings			Old modules like std.outbuffer or std.socket									More/better container classes				@nogc containers			std.graph					std.color	std.image	std.drawing (2D)	std.dom	containers		std.bigint		std.compiler	std.complex						std.demangle													std.outbuffer						std.signals		std.stdint								std.uuid		std.windows		std.zlib			Yes	5														Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)				Issues with language feature X (e.g. shared, @property)						Poor compiler error messages					Poor debugging								Attribute bloat							Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages	Little marketing / no evangelists	Few showcases / flagship projects										Lack of progress on DIPs					fast, powerful, versatile	I can't even remember	It was the real c++ :)	phobos 	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS				Templates		Built-in unittests							import("myfile")		Multi-paradigm			static foreach							New range functionality (substitute, slide)								Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)			Colorized error messages		Cross-compilation with LDC	newCTFE		I feel comfortable		Yes, but only for a specific project	For god's sake, don't translate error messages. Or at least let's put an error code inside. For beginners it's really difficult to find support for an error written not in english.	Spaces	2018-02-28 14:02:38	2018-02-28 14:30:33	8291dcf9a1
445a1fb3bcf9f8c9b094e2d8297fb0e7	Yes	4				tour.dlang.org	Language specification								d-idioms		3		3		2	4	4		1	4		1	Always great content		4						I don't need help		3	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly																		Official dlang.org/install.sh script		Arch Linux									2.078.3 (latest)	2.077.1 (latest LDC)												DMD	Linux									dmd		dub	make						Visual Studio Code		3	0				3		It's awesome - keep it as is																				Yes	4	6	2						Reliance on the GC				@nogc		Performance	More -betterC support					@nogc containers									std.image							std.compiler							std.demangle					stdx.checkedint																															No, but to other D repositories										I am just starting to learn D		Nothing														Poor GC implementation / performance					dub					Nothing									Fewer third-party libraries than other language										Nothing.														CTFE (static if, static foreach)			Performance			UFCS																		static foreach																			New third-party applications (e.g. Tilix)					newCTFE				Maybe, I'm still a student		Spaces	2018-02-28 14:04:53	2018-02-28 14:30:15	633ea14d90
63ba522955747b6cb54632c68c10f4a5	Yes	4				tour.dlang.org	Language specification		D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		4	Lack of domain specific all-rounded articles. Example: how to write a complete @nogc library in idiomatic D.	4	Not easy to find things. Most likely the layout doesn't help, especially for structs and classes where you need to always go to the header to see the member list.	0	3	3	Needs a redesign, aesthetically wise (it is getting old). And maybe split it in "new comers" and "experienced" section, so either group can access faster the relevant resources.	1	4	Some sections are long. They try to cover to many things at once.	1	Mostly great content	It should have more articles on "hands-on" D. Like more interviews with people using D in various industries (dealing their experience) and let the community know about what works/doesn't.	3	D Forum							4	Yes, I like StackOverflow.		Yes, it was a regression.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily			IoT					Embedded Systems					Official Windows .exe installer						d-apt Debian/Ubuntu							I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows				WebAssembly	Embedded				dub						Yes, I work with D full time	Visual Studio + VisualD		4	1	4	Some times it take to much for bugs to get fixed. There should be a daily/weekly routine on the core team to scrub the bug db and prioritize them, eventually fix 3-5 major bugs a week. 		4	Less regressions (blocker bugs), more focus on quality.	It's awesome, but I miss a few features	AA literals, first class tuples	tuples	string interpolation	in-place struct initialization							static break			Static inheritance			Yes, my project depends on it	4	It should be broken in smaller sections.	Yes	2	4	4		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes			@nogc	DIP1000		More -betterC support	More/better container classes			std.eventloop	@nogc containers	better json serialization	better xml serialization			std.i18n		std.decimal					Archaic parts like XML, Zip and Concurrency 					std.complex		std.container		std.csv							stdx.checkedint	stdx.logger													std.signals													std.xml		std.zip	Modernize (up 2 latter D standard) all modules, less dependencies between modules, usable without a GC and still @safe.	Yes	5	All went surprisingly smooth :)															Dependence of some language features + Phobos (Standard Library) on the GC		Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000				Compiler regressions	Poor compiler error messages	Poor GC implementation / performance				Poor debugging		DLL support on Windows					Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)	Ugly bits of the standard library					Little marketing / no evangelists	Few showcases / flagship projects	Little info on StackOverflow									Lack of progress on DIPs	Lack of focus at the management level			Some features don't feel complete: shared. In general there should be more focus on quality.	C syntax, fast dev. times, abstraction power and low-level support.	slashdot	Interested on a better C and Java alternative.	mir	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection						Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC			toString with output ranges		Back referencing of mangled symbols				Automatic compilation of imports (dmd -i)	Runnable examples on dlang.org		Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)	vibe.d 0.8			Cross-compilation with LDC			It is the closest to the perfect system level programming I dream about. Hopefully it will get even closer to the perfection over time.	shared	Yes, but only for a specific project	would like to prioritize the dip1000 development.	Spaces	2018-02-28 13:52:20	2018-02-28 14:29:54	064cf97695
b378de0f9f11d539585a1eca34289a1b	Yes	3								"Programming in D" by Ali Çehreli		"Learning D" by Michael Parker	"D Web Development" by Kai Nacke	"D Cookbook" by Adam D. Ruppe	d-idioms		3	C++	3	A few things are outdated, examples, basic algorithms	0	4	4	Nothing in particular...	1	3	Nothing in particular...	1	Always great content	Nothing in particular...	3	D Forum	#d on IRC						3	No, the D.Learn forum is fine.	 	No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly		Desktop applications				Game Development					Science/Research						Official OSX dmg installer									I compiled D from source			2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd		dub						No	Visual Studio Code		2	0			Lack of time...	3	Not the compiler, but please provide good debug capablities on macOS!	It's awesome, but I miss a few features	the enum keywoard				named arguments												No	3	 	Yes	3	3	2				Poor naming choices		Reliance on the GC				@nogc		Performance											std.i18n				std.image	std.drawing (2D)																																																Make it gc-free	No, and I don't plan to				Time is my only enemy						I am just starting to learn D						Non-perfect C++ integration	Dependence of some language features + Phobos (Standard Library) on the GC					Nothing								Poor debugging						Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists					No good point for learning D						Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Nothing in particular...	Brave new native 	c't Magazin (german computer hardware/software magazine)	Because I like(d) it...	derelict libraries	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C																		Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC																					To get better with/at it	If this counts as a bug: no debugger on macOS	Maybe, I'm still a student	Keep up the good work and don't get stuck in unnecessary political discussions.	Spaces	2018-02-28 14:09:43	2018-02-28 14:27:03	cee73175fd
716aa084d7a27486da093b190ad38815	Yes	3								"Programming in D" by Ali Çehreli							5	Lack of Editor support. Seriously. GNOME builder. Gedit. Geany. I need linting, completion and formatting. Please.	2	Very suboptimal performance. No GC-less concurrency. Lack of async I/O. Lack of shared pointer. 	0	3	4	Add benchmarks about relative performance.	0			1	Mostly great content	Nothing in particular. 	5	D Forum	#d on IRC						4	I don't care.	No. N/A	No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications																		Arch Linux										2.077.1 (latest LDC)												LDC	Linux											dub						No	Visual Studio Code		3	1	3	N/A		5		It's awesome - keep it as is																				Yes	3	4	5						Reliance on the GC				@nogc	DIP1000	Performance	More -betterC support					@nogc containers												N/A																		std.functional				std.mathspecial																std.uri								@nogc stadlib.	No, but to other D repositories				Time is my only enemy	Personal laziness												Dependence of some language features + Phobos (Standard Library) on the GC	Performance problems								Poor GC implementation / performance									Lack of editor support. No, only syntax highlighting is not enough. I want linting, suggestion and formatting in common editors like gedit, geany or IDE like GNOME builder. Rust is miles ahead as it has a language server. It even supports GNOME builder. 				Virtual by default					Nothing														Lack of progress on DIPs	Lack of focus at the management level	Wrong decisions at the management level		Phobos libraries are slow, at times slower than python! Only way left is to write C with in D. D should be able to interoperate C external libraries less painfully. I'd like to see <pthreads.h> in core.stdc 	potentials, performance, convinience	Reddit	I always wanted modules and painless  dependency management in C. Hated autoconf and CMake.	core.stdc.*							Native interoperability with C		UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests														DMD as a DUB library			-betterC																			newCTFE		I like it.	GC.	Maybe, I miss accountability at the moment	Language server. More editor support. GtkD library documentation (one that's actually meant to make sense and doesn't look like it's from 1999)	Spaces	2018-02-28 14:00:19	2018-02-28 14:23:55	e3b64540c8
e5dbf49ba0e2e0799941faa2a814bfaf	Yes	5			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn						d-idioms		5	poor toolset	4	more examples	1	4	4	I don't know	0			1	Mostly great content		5	D Forum							5	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily		Desktop applications														Official .deb packages													2.078.3 (latest)		2.076.1 (static foreach)											DMD	Linux											dub		cmake				Yes, I work with D part time	Sublime		2	1	3			4	compiler as library	It's ok		tuples					language binding to X	multiple alias this			static break						No	4		Yes	3	4	5		Auto-decoding for strings				Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000	Performance	More -betterC support	More/better container classes				@nogc containers	better json serialization		std.graph		std.i18n	std.benchmark		std.color	std.image	std.drawing (2D)			std.base64	std.bigint		std.compiler	std.complex						std.demangle	std.digest	std.encoding			stdx.checkedint				std.json		std.mathspecial		std.outbuffer	std.parallelism					std.signals	std.socket	std.stdint		std.system						std.uuid		std.windows	std.xml	std.zlib	std.zip	gui	Yes	5															Non-perfect C++ integration													Non-enterprise IDE support	Poor debugging							Auto-decoding of strings	Attribute bloat	Virtual by default	Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language													Lack of progress on DIPs	Lack of focus at the management level			d infrastructure is suitable for seniors, but isn't friendly to juniors, dlang needs adoption to masses (but I wouldn't say it's the first task to do)	enlightening, productivity, elegance 				Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits			Readable syntax	UFCS				Templates		Built-in unittests			Garbage collection				import("myfile")		Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library			-betterC		New range functionality (substitute, slide)	toString with output ranges		Back referencing of mangled symbols							Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)			DCompute				productivity and elegance		Yes, but only for a specific project	IDE integration and debugging should be improved	Tabs	2018-02-28 13:50:52	2018-02-28 14:21:09	f959d663c6
2d0c8d2dac5dcb82f0d519473c165ae5	Yes	4			"The D Programming Language" by Andrei Alexandrescu					"Programming in D" by Ali Çehreli							4		3	Needs more examples rooted in common usage	0	5	5		1	5		0			4	D Forum			dlang.slack.com				5	No, the D.Learn forum is fine.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development																				Homebrew								2.078.3 (latest)													LDC	Linux	macOS										dub						No	Sublime		5	1	4	Not enough attention given to regressions		5		It's awesome - keep it as is																				Yes	3	5	5		Auto-decoding for strings									DIP1000	Performance		More/better container classes			std.eventloop	@nogc containers					std.i18n		std.decimal																																			std.signals								std.uri						std.zlib	std.zip	stdx.allocator based containers	Yes	4																				Not a lot of D programmers, so I can't use it at work unless someone else can maintain it	Nothing						Nothing								Nothing										Less corporate support (including jobs) than other languages									Nothing.									I saw Programming in D in a bookstore	For fun.	std.algorithm	Ranges & std.algorithm							Readable syntax	UFCS									Garbage collection																																					No, I'm already donating my free time		Spaces	2018-02-28 14:01:28	2018-02-28 14:18:14	e53d7291e6
14940d92d56a65f52d013e3e4ff4f08d	Yes	5							D Forum: Learn								5	writing code to avoid GC, only recently that is made easy due to throw and std.experimental.allocator.	5	today it's perfect, that wasn't the case a few years ago.	0	5	4	It's to hard to find the changelog, which is one of the most interesting ascets.	1	5	N/A	1	Always great content	N/A	5	D Forum							5	No, the D.Learn forum is fine.	No the current forum is the best experience I had for any language.	Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Weekly								Embedded Systems					Official Windows .exe installer																	2.077.1 (latest LDC)												LDC	Linux	macOS	Windows	BSD-variant	Android	iOS	WebAssembly	Embedded			rdmd							No	Sublime		5	1	5	N/A		5		It's awesome - keep it as is																				Yes	6	6	6						Reliance on the GC					DIP1000							@nogc containers												N/A																						std.mathspecial																		std.uuid			std.xml			N/A	No, but to other D repositories				Time is my only enemy													Dependence of some language features + Phobos (Standard Library) on the GC					Nothing												D's dependence on a large and bulky runtime		Nothing								Nothing											Nothing.											Pegged		Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++						@safe strings + arrays					import("myfile")		Multi-paradigm			static foreach																										D is the only language I know which offers this high productivity and high performance at the same time. 	GC	Yes, but only for a specific project		Tabs	2018-02-28 13:59:16	2018-02-28 14:17:47	39f98bde41
6fb311f05cb479f9b4b8f8ad8ecbcbf0	Yes	5					Language specification										5	Understanding D's ranges, versus regular arrays, and writing functions that can return ranges as values or accept them as parameters.	4	In certain cases, a broader "example program" or rundown of a library would be nice, rather than one-by-one explanations of functions and data types. 	3	4	5	The example program on the front page is badly formatted and uses a lot of jargon like "alias this" that will confuse new users. Needs to have something that better demonstrates the language's ability.	0			0			4	D Forum							4	Yes, I like StackOverflow.	D.Learn should be used for people who are genuinely new to learning D. StackOverflow should be for people who have a more complicated or involved question.	Yes, but it was a simple fix.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily		Desktop applications				Game Development							Official Windows .exe installer							Arch Linux									2.078.3 (latest)													DMD	Linux	macOS	Windows							dmd		dub						No		Geany	3	0			Only case where I suspected an issue with the compiler, it was an issue with GDC, so I switched to DMD.	5		It's awesome - keep it as is																				Yes	5	6	6								Certain obvious features missing, especially in std.datetime				Performance					std.eventloop					std.database		std.benchmark		std.color				Some aspects of std.datetime makes no sense. You can roll all units, but you can't add "days", only roll them. Why?																																															No, and I don't plan to								High barrier to entry														Nothing							Non-enterprise IDE support	Poor debugging						Nothing										Less corporate support (including jobs) than other languages		Few showcases / flagship projects							Nothing.							There are situations where the program writer can obfuscate whether or not a function is being called. The ability to call non-@property functions without parenthesis may have been a mistake.	Clean, easy, modern.	I stumbled across the dlang.org website	It looked clean and I was frustrated with C++'s overly-bloated syntax.	std.algorithm	Ranges & std.algorithm						Native interoperability with C	Readable syntax	UFCS		Closeness to C/C++	Simple, but powerful module system			Built-in unittests			Garbage collection										opt-in GC and runtime																									I like the language and everything is very easy.		No, I'm already donating my free time		Meh, I don't care.	2018-02-28 13:43:53	2018-02-28 14:15:50	ff78e09d34
c09ce75e14e8a11599c80d6faf6653e1	Yes	3			"The D Programming Language" by Andrei Alexandrescu		Language specification										4	The standard library	1	Difficult to get into and hard to understand	0	3	3		1	4		1	Mostly great content		4		#d on IRC				I don't need help		4	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Rarely	Web development	Desktop applications					Big Data				Science/Research									Arch Linux									2.078.3 (latest)													DMD	Linux									dmd	rdmd							No	vim / neovim		4	0				4	Not so many bugs	It's awesome - keep it as is																				No	0	0	0					Old modules like std.outbuffer or std.socket			Needs more simple interface						More/better container classes					better json serialization			std.database		std.benchmark			std.image	std.drawing (2D)		XML				std.compiler							std.demangle																																				No, but to other D repositories			Finding good issues to get started			No roadmap		High barrier to entry							Missing Phobos (Standard Library) module (e.g. std.database or std.eventloop)								Poor Phobos (Standard Library) documentation	Compiler regressions	Poor compiler error messages														Virtual by default			Ugly bits of the standard library										No good point for learning D							Lack of focus at the management level	Wrong decisions at the management level			Easy fast all-included	Reddit	Fast native code, but nice abstraction	Vibe	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance		Readable syntax	UFCS			Simple, but powerful module system	Templates		Built-in unittests		@safe strings + arrays	Garbage collection						Multi-paradigm	Functional programming paradigm																	Runnable examples on dlang.org		Deprecation of the comma operator			vibe.d 0.8						I like the language		Maybe, I'm still a student		Tabs	2018-02-28 13:56:29	2018-02-28 14:15:19	5fdd07e12a
dcb17a5e881dcedd8e91b16d59e2384e	Yes	4					Language specification									some random webpages	4	string and array "methods" being distributed over dozens of standard modules, but once I got the hang of it that was a pretty sexy paradigm. also, not being able to include C	4	jumping between function overloads is a little tedious	0	4	4		1	3	why does "synchronization & sharing" need safePrint	0			3			#d on StackOverflow					5	I don't care.		Yes, it was hard to find out why.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Weekly	Web development												Official Windows .exe installer							Arch Linux						I compiled D from source			2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows								rdmd	dub	make					No	Visual Studio Code		2	1	3			4	including C headers directly 	It's awesome, but I miss a few features	no tuple unpacking, no anonymous structs/data, deriving exceptions just for type matching sake is ugly (forwarding this), too many keywords (in and out for example, are not restricted to parameter context)			in-place struct initialization	named arguments		language binding to X	multiple alias this	UDAs for attributes								No	4		Yes	2	5	5				Poor naming choices		Reliance on the GC		hasUnsharedAliasing is not acessible from outside std.parallelism							clean up that core.sync mess, semaphore not being shared is a joke :D also, maybe steal some features from Go (channels, select)														multithreading utilities	core.sync (old), std.parallelism (message channels are bound to threads -> can't have multiple threads work on a single queue, globals are bad and such. Go is much prettier), std.fiber (can't pass work between threads)																																															No, but to other D repositories																					having to write C bindings for everything			Compiler regressions					Non-enterprise IDE support	Poor debugging															Fewer third-party libraries than other language										Nothing.								template heaven		C++ was frustrating		Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)		std.traits				UFCS			Simple, but powerful module system	Templates											Multi-paradigm	Functional programming paradigm																												fast, quick to write, cross platform	missing includeC 	Maybe, I'm still a student		Spaces	2018-02-28 13:37:02	2018-02-28 14:15:17	0de9aa57a6
054922f9ccf94e9375b75a668b96eaf8	Yes	4								"Programming in D" by Ali Çehreli							5	Understanding the ! And extra () for templates	5	The separation between the range and algorithm documentation given how related they are. 	0	4	5	Uptime	1	5		1	Mostly great content		5					My colleagues			5	Yes, I like StackOverflow.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily	Web development		IoT	DevOps			Big Data	Embedded Systems						Official tarballs							Homebrew			Docker						2.077.1 (latest LDC)												LDC	Linux	macOS	Windows									dub						Yes, I work with D part time	vim / neovim		3	0				4	Keep improving error messages to provide more clarity	It's awesome, but I miss a few features															Nothing - D is already awesome		No	5		Yes	3	5	4		Auto-decoding for strings				Reliance on the GC			@safe for all modules	@nogc									better json serialization															std.compiler	std.complex				std.csv		std.demangle				stdx.allocator	stdx.checkedint	stdx.logger						std.meta	std.outbuffer													std.uni		std.utf			std.windows	std.xml				No, but I want to to				Time is my only enemy												Non-perfect C++ integration						Nothing							Non-enterprise IDE support						More direct use of C headers and libraries without obscure tool use		Auto-decoding of strings			Wrong defaults (e.g. not @safe by default)														Integration with existing C headers and libraries without conversions		Too much low-level focus (C/C++)			Lack of focus at the management level			Ability to use C header files without modification or external tools	Much better C++	Co-worker	Because I don’t want to fall into the C++ trap/nightmare of metaprogramming hell	Phobos algorithms/ranges	Ranges & std.algorithm		CTFE (static if, static foreach)				Native interoperability with C		UFCS		Closeness to C/C++		Templates		Built-in unittests					Contracts				Multi-paradigm			static foreach																				vibe.d 0.8						High-performance requirements without a desire for crap languages	Convert C header file to D file	Maybe, I miss accountability at the moment	Make it easier to use C header files as-is	Spaces	2018-02-28 13:53:55	2018-02-28 14:11:08	e4a656d435
7d165c9046b4b2b5f5e1bd14a9b50573	Yes	4				tour.dlang.org			D Forum: Learn						d-idioms	Just using it	4	Template type arguments not being inferred	4	Too few examples, especially on SIMD instructions	0	3	3		1	4		1	Mostly great content		3							I don't ask questions 		I don't care.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily		Desktop applications				Game Development														Arch Linux	Homebrew								2.078.3 (latest)													LDC	Linux	macOS									rdmd	dub	make					No	vim / neovim		3	0				4	Better errors when it cannot infer template type arguments 	It's awesome - keep it as is																				Yes	3	4	4		Auto-decoding for strings				Reliance on the GC				@nogc		Performance	More -betterC support	More/better container classes			std.eventloop	@nogc containers	better json serialization										stb.build, to use rdmd or even a compiled binary for building. I want to write my build script in D, not JSON or similar	containers	std.base64			std.compiler					std.csv	std.datetime				std.exception	stdx.allocator	stdx.checkedint	stdx.logger	std.functional				std.mathspecial	std.meta	std.outbuffer			std.process					std.stdint					std.uni	std.uri				std.windows	std.xml	std.zlib	std.zip	No GC dependency. Be less of a dependency for the compiler	No, but I want to to			Finding good issues to get started	Time is my only enemy	Personal laziness																GC, C/C++ single-header libraries				Poor compiler error messages	Poor GC implementation / performance				Poor debugging				D's dependence on a large and bulky runtime																													Familliar, Flexible, Excellent	Reddit, I think	It has everything I need, and it lets me do what I want without telling me how to do it. I can do OOP, I can do functional, and I can do imperical, and all feels nice	Derelict SDL2			CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax		-betterC	Closeness to C/C++	Simple, but powerful module system	Templates		Built-in unittests				Inline assembler					Multi-paradigm			static foreach	opt-in GC and runtime		Templated vector operations	Compile-time format string checking	-betterC								DMD support for AVX2		Runnable examples on dlang.org								Cross-compilation with LDC	newCTFE		It's better than its competitors, in my mind	GC	Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 13:40:41	2018-02-28 14:05:40	483259ff19
618354d3bc16c8105e86148c930a994e	No, I have never used D			Adoption		tour.dlang.org	Language specification			"Programming in D" by Ali Çehreli							4	Lack of good documentation/examples	4	It lacks examples	1	4	4		1	4		1	Always great content														Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Rarely	Web development																												2.078.3 (latest)													DMD	Linux	macOS								dmd	rdmd		make					No	vim / neovim			0																																																																																																																																																																																																																																						2018-02-28 13:46:17	2018-02-28 13:54:28	4c66001cd0
313a132f697b94f9bb32ed1233b5030e	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										3	Template function error messages	4	Inconsistency	0	5	5		1	5		1	Mostly great content		5	D Forum							4	I don't care.		No.	Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Monthly							Big Data		Machine Learning		Science/Research									Arch Linux											2.076.1 (static foreach)											LDC	Linux											dub						Not applicable	Sublime		3	0				4		It's awesome - keep it as is																				Yes	2	4	3				Poor naming choices	Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc	DIP1000			More/better container classes			std.eventloop	@nogc containers						std.benchmark																																																					No, but to other D repositories																																													Fewer third-party libraries than other language	Less corporate support (including jobs) than other languages		Few showcases / flagship projects								Too much low-level focus (C/C++)		Lack of progress on DIPs	Lack of focus at the management level				Delivers it's promises	I don't remember	I was searching for an efficient and elegant language	libmir	Ranges & std.algorithm		CTFE (static if, static foreach)		std.traits	Performance	Native interoperability with C	Readable syntax	UFCS			Simple, but powerful module system	Templates	Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays					import("myfile")			Functional programming paradigm		static foreach	opt-in GC and runtime	DMD as a DUB library													Runnable examples on dlang.org	docarchives.dlang.io		New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)				DCompute						Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 13:34:56	2018-02-28 13:51:37	a83a1c9fa7
cbfde4b020daa814f3c62677b1cd4d89	Yes	5				tour.dlang.org			D Forum: Learn	"Programming in D" by Ali Çehreli					d-idioms		5	Learning D was really easy.	4	Need more examples in some corners	0	3	3		1	5		1	Mostly great content		4	D Forum							5	No, the D.Learn forum is fine.		No.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Weekly	Web development					Game Development						Scripting	Official Windows .exe installer																2.078.3 (latest)													LDC	Linux		Windows		Android		WebAssembly					dub						No	Sublime		4	1	5			5		It's awesome - keep it as is																				Yes	5	5	5						Reliance on the GC				@nogc		Performance	More -betterC support				std.eventloop	@nogc containers														std.bigint		std.compiler	std.complex						std.demangle	std.digest		std.exception	stdx.allocator	stdx.checkedint	stdx.logger					std.mathspecial		std.outbuffer						std.signals				std.system													No, but I want to to				Time is my only enemy								Nothing										Nothing								Poor debugging						Nothing									Fewer third-party libraries than other language										Nothing.								Easy Fast Meta		Looks easier than c++	std.stdio, std.algorithm, std.range	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)	std.meta	std.traits	Performance	Native interoperability with C	Readable syntax	UFCS	-betterC	Closeness to C/C++	Simple, but powerful module system	Templates											Multi-paradigm	Functional programming paradigm		static foreach	opt-in GC and runtime				-betterC																		Cross-compilation with LDC	newCTFE		Fast development cycles	GC is the best and the worst feature at the same time.	Maybe, I miss accountability at the moment	Keep the good work <3	Tabs	2018-02-28 13:31:36	2018-02-28 13:51:04	558d23e449
0713d96ce5026a7eaa7d59eecd2ea5dc	No, I have stopped using D		moved to different languages, such as rust or elixir		"The D Programming Language" by Andrei Alexandrescu	tour.dlang.org											4	lack of libraries	4		0	3	4		1	4		0			2	D Forum							4	Yes, I like StackOverflow.		No.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Rarely	Web development						Big Data													Arch Linux	Homebrew								2.078.3 (latest)													DMD	Linux											dub						No	emacs		3	0			haven't found any	5		It's awesome, but I miss a few features			string interpolation														No	4		Yes	3	4	4					Old modules like std.outbuffer or std.socket														better json serialization		std.graph	std.database									std.base64		std.bitmanip	std.compiler	std.complex		std.container		std.csv		std.demangle	std.digest			stdx.allocator	stdx.checkedint	stdx.logger		std.getopt			std.mathspecial	std.meta	std.outbuffer	std.parallelism		std.process			std.signals						std.typecons	std.uni			std.uuid		std.windows	std.xml	std.zlib	std.zip		No, but I want to to				Time is my only enemy	Personal laziness			High barrier to entry		I am just starting to learn D			Language complexity (e.g. inout, abuse of mixin)									Nothing						Nothing								Nothing									Fewer third-party libraries than other language		Little marketing / no evangelists	Few showcases / flagship projects								Too much low-level focus (C/C++)								not sure	I hated C++ and needed more than C									Readable syntax	UFCS			Simple, but powerful module system			Built-in unittests			Garbage collection						Multi-paradigm							Compile-time format string checking																								Maybe, I miss accountability at the moment		Meh, I don't care.	2018-02-28 13:37:38	2018-02-28 13:50:19	5a0dd09cd7
599590c5b87136eb4d6814bc3de31d28	Yes	5			"The D Programming Language" by Andrei Alexandrescu				D Forum: Learn						d-idioms		5	poor toolset	5	more examples	5	5	4	I don't know	1	4	I cannot say																																																																																																																																																																																																																																																																																																																							2018-02-28 13:45:45	2018-02-28 13:49:33	f959d663c6
853c4ff90a447b6a4994d3bc6e0aaf3a	Yes	3					Language specification		D Forum: Learn								3		3		0	4	4		0			0			3						I don't need help			No, keep it as it is.		Yes, it was a regression.	Most D code has yet to be written. Go ahead and break code, but do it now and get it finished quickly.	Daily														Official tarballs												I compiled D from source		2.079.0 (nightly)	2.078.3 (latest)	2.077.1 (latest LDC)												LDC	Linux		Windows							dmd	rdmd											1	4			3	bug fixes	It's ok		tuples			named arguments			multiple alias this			static break						No	3	holes in the specification, e.g. shared, @safe	Yes	3	3	5		Auto-decoding for strings			Old modules like std.outbuffer or std.socket		Fear to do breaking changes		@safe for all modules	@nogc																																																																			Yes	3	Sometimes takes forever, and multiple pings to get a review.																	Issues with language feature X (e.g. shared, @property)	@safe-ty problems / missing DIP1000				Compiler regressions													Auto-decoding of strings	Attribute bloat		Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)			Nothing																Wrong decisions at the management level			Bugs, bugs, bugs.	Announcement of D 1.0.	Seemed like a saner C.		Ranges & std.algorithm		CTFE (static if, static foreach)			Performance											@safe strings + arrays	Garbage collection			Debug attribute			Multi-paradigm			static foreach																								newCTFE				No, I don't like the management of the DLF		Meh, I don't care.	2018-02-22 21:30:33	2018-02-22 21:56:49	df2369800c
230114252dec78af2527fc3bfc5c708f	Yes																							Uu	0			0																																																										DMD	Linux									dmd		dub						No	vim / neovim		5	0			Laziness	5		It's awesome - keep it as is																				Yes		3	5	Nothing - Phobos (Standard Library) is great								@safe for all modules			Performance		More/better container classes			std.eventloop		better json serialization					std.benchmark			std.image						std.bitmanip								std.demangle				stdx.allocator			std.functional				std.mathspecial															std.uni	std.uri			std.variant	std.windows					No, but I want to to					Personal laziness							Nothing										Nothing						Nothing								Nothing								Nothing			Little marketing / no evangelists		Little info on StackOverflow				Few transition guides from programming language Y		Nothing.								Powerful expressive cool	Seb	Seb	Vibe d	Ranges & std.algorithm	Mixin	CTFE (static if, static foreach)			Performance	Native interoperability with C				Closeness to C/C++			Built-in documentation (Ddoc)	Built-in unittests		@safe strings + arrays	Garbage collection			Debug attribute		std.concurrency & std.process	Multi-paradigm	Functional programming paradigm		static foreach		DMD as a DUB library		Compile-time format string checking			New range functionality (substitute, slide)				Reproducible builds		DMD support for AVX2				Deprecation of the comma operator	New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)		vibe.d 0.8						Seb		Maybe, I'm still a student		Spaces	2018-02-09 22:54:16	2018-02-09 23:12:07	4813eaafd2
8cde5a1fa8a2494e758a88cd93d2c20d																																																																																																																																																																																																																																																																																																																																																		2018-02-09 22:54:05	2018-02-09 22:54:11	4813eaafd2
494ce97f7a2d07f6cae825a752af6487	Yes	3			"The D Programming Language" by Andrei Alexandrescu												4	foo	5	test	0	4	4	tb	0			0			3	D Forum							3	Yes, I like StackOverflow.		Yes, but it was a simple fix.	Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development																	Official dlang.org/install.sh script																								DMD	Linux									dmd								Yes, I work with D part time	vim / neovim		3	0	3			2		It's awesome, but I miss a few features								multiple alias this									Yes, but only for experimenting/testing/debugging	4		Yes, but only for some projects	0	0	1									@safe for all modules									@nogc containers																							std.demangle																																				No, but I want to to																																																																																																																											Meh, I don't care.	2018-02-05 15:39:19	2018-02-05 15:56:15	41ced5ad66
4d6892e379e2c289582d3f51a36060e8																																																																																																																																																																																																																																																																																																																																																		2018-02-02 16:50:35	2018-02-02 16:50:41	41ced5ad66
09c274f656202ecbeb2afc04601ed5a3																																																																																																																																																																																																																																																																																																																																																		2018-02-02 16:50:06	2018-02-02 16:50:23	41ced5ad66
0020e0e873bdfe3b1768e5425fd16302	Yes	4			"The D Programming Language" by Andrei Alexandrescu												3		2		0	4	3		0			1	Mostly great content		4	D Forum			dlang.slack.com				2				Only introduce breaking changes that fix major problems and can demonstrate a high benefit/cost ratio, and do so through a gradual, managed process.	Daily	Web development	Desktop applications		DevOps			Big Data		Machine Learning					Official tarballs																2.077.1 (latest LDC)	2.076.1 (static foreach)		2.074.1 (compile-time format checking)									DMD	Linux									dmd		dub						Yes, I work with D part time	emacs		3	1	3	No prioritization		3	Attribute Inference	It's awesome, but I miss a few features		tuples															Yes, but only for experimenting/testing/debugging	2		Yes	1	4	3		Auto-decoding for strings			Old modules like std.outbuffer or std.socket	Reliance on the GC			@safe for all modules	@nogc				More/better container classes					better json serialization										std.io, leave the rest to dub	std.sockets		std.bigint		std.compiler	std.complex		std.container						std.encoding				stdx.logger	std.functional						std.outbuffer						std.signals	std.socket	std.stdint		std.system				std.uri			std.variant	std.windows	std.xml				Yes	3																				Quality, too small ecosystem																								Fewer third-party libraries than other language														Lack of focus at the management level				Awesome 	Searched for C++ Alternatives	C++ seemed like a dead-end	vibe.d	Ranges & std.algorithm				std.traits	Performance		Readable syntax	UFCS				Templates																								Back referencing of mangled symbols					Runnable examples on dlang.org					vibe.d 0.8				newCTFE		introspection+templates, CTFE+mixin		No, I'm already donating my free time			2018-02-01 12:29:19	2018-02-01 13:00:49	9eb1474c14
9702b402c11ab5089c252ccc1abd8995	Yes	2			"The D Programming Language" by Andrei Alexandrescu		Language specification			"Programming in D" by Ali Çehreli							5	Compiler errors are not great (but much better than C++!), lack of good package manager and understanding of programming environment.	2	Phobos's documentation is elaborate, no question. However, the formatting is hard to read. For example, in types with a lot of methods and other nested types it's hard to understand where attributes belong due to the boxed formatting which requires scrolling up/down to figure out location.	0	1	1	Too much clutter	1	3	It's too jumpy. Similar tours just show syntax and you have to "go with the flow". The dlang tour has to much text and requires understanding too much to survive it. I gave up after a few minutes. Also it's not comfortable on a tablet, but that was a while ago so it may better now.	1	Huge variance in quality	I read all my news through an RSS app. Therefore dlang sits in some category and I go through new items once every few hours. The titles in DBlog are not self-contained in the sense that mixed with other news articles it's impossible to know that it's D. For example, Bootstrap's titles always start with "Bootstrap". D's start with "DMD version NN" or "New DMD Release: ..." and sometimes just an obscure title (Project Highlight: ...).	0	D Forum							3		There are too many ways to get help and too many places to look for it. Personally, I like StackOverflow and many projects just use it. I would feel more welcome to answer questions where they could be rated rather than bashing with people in the forums. The D forum is a violent and unwelcoming place.		Go ahead and break code, even for the "little things", but do so through a gradual, managed process.	Daily	Web development			DevOps				Embedded Systems													Homebrew			Docker						2.077.1 (latest LDC)												LDC	Linux	macOS	Windows										make					Yes, I work with D full time	emacs		4	0	2	Bugzilla is old. GitHub issues are great, JIRA for open source is also fine		5		It's awesome - keep it as is																				Yes	0	4	5					Old modules like std.outbuffer or std.socket	Reliance on the GC	Fear to do breaking changes		@safe for all modules	@nogc		Performance							better json serialization																	std.concurrency												std.functional	std.getopt						std.parallelism																	std.windows	std.xml			Its reliance on libc. It's a huge licensing issue, I'd like to be able to statically link with Phobos without the GNU baggage.	No, but I want to to						No roadmap	D community	High barrier to entry						Missing language feature X / not moving fast enough								Nothing									dub			D's dependence on a large and bulky runtime						Wrong defaults (e.g. not @safe by default)	C behavior without warning (e.g. signed to unsigned comparisons)				Fewer third-party libraries than other language		Little marketing / no evangelists		Little info on StackOverflow							Too much low-level focus (C/C++)							Fast, reliable and modern	At work	I have to work in D	vibe.d	Ranges & std.algorithm					Performance		Readable syntax	UFCS		Closeness to C/C++		Templates														static foreach																										The type system!	dub	Yes, I'm already doing so			2018-02-01 07:12:40	2018-02-01 07:41:18	23445d3611
c99168d49c743789a40921f8de4519ac	Yes	4					Language specification			"Programming in D" by Ali Çehreli							4	Few venues to get code reviews by experienced D programmers	3	Overviews of how to use related sets of features	0	5	3		0			1	Mostly great content		4	D Forum							5					Weekly							Big Data		Machine Learning		Science/Research			Official tarballs			Official OSX dmg installer	Official dlang.org/install.sh script						Docker						2.077.1 (latest LDC)												LDC	Linux	macOS								dmd	rdmd		make					Yes, I work with D part time	emacs		3	1	4	Don't know if anyone has viewed the report.		4	More informative template mismatch errors	It's awesome - keep it as is																				Yes	1	4	1		Auto-decoding for strings													Better container classes														Memory friendly associative arrays	The combination of OutputRanges and File ouput is incomplete/inconsistent, with a number of performance issues.	std.base64		std.bitmanip	std.compiler	std.complex				std.csv		std.demangle				stdx.allocator	stdx.checkedint	stdx.logger	std.functional		std.json				std.outbuffer						std.signals	std.socket									std.uuid	std.variant	std.windows	std.xml	std.zlib	std.zip		Yes	3																														dub						Auto-decoding of strings										Little marketing / no evangelists												Lack of focus at the management level				Native compiled Python	Don't remember	Looking for: a) Native compiled language for data scientists; b) A better language than C++ for large, performance sensitive applications.	std.algorithm	Ranges & std.algorithm					Performance			UFCS						Built-in unittests			Garbage collection																								Runnable examples on dlang.org			New third-party libraries (e.g. Vectorflow by Netflix or eBay's CLI tools)	New third-party applications (e.g. Tilix)							Ranges	Auto-decoding	Yes, I'm already doing so			2018-01-31 20:24:26	2018-01-31 21:14:21	af82aed65d
1a4edc2b603d5bfa61c218e54375ace4	Yes	3					Language specification										2	Lack of debug support.	3	It's nearly impossible to read the function names—the only way to understand how to use the function is to see the examples.	0	4	4		1	4	That it isn't more prominent on dlang.org's front page.	1	Always great content		4													Monthly	Web development					Game Development															Homebrew																					DMD	Linux	macOS								dmd		dub						No	Visual Studio Code		4	1	3	Bugzilla doesn't have the nicest UI.		4	rdmd built in.	It's awesome - keep it as is																				Yes	2	2	1		Auto-decoding for strings		Poor naming choices	Old modules like std.outbuffer or std.socket			Modules with poor APIs, and some missing functionality.			DIP1000						std.eventloop		better json serialization	better xml serialization		std.database																														std.mathspecial										std.stdint															Yes	4			Time is my only enemy	Personal laziness																Lack of surrounding frameworks, like DB integrations.				Poor compiler error messages				Non-enterprise IDE support								Auto-decoding of strings					Ugly bits of the standard library				Less corporate support (including jobs) than other languages																Things like ranges and its associated algorithms are nice except when they fail, and then they fail in incomprehensible ways. I love the idea of generic code but in practice it sometimes loses to plain old runtime interfaces.	Friendly, fast, powerful	In my college class at UVU, taught by Chuck Allison.	It struck me as approaching the perfect language.							Performance		Readable syntax	UFCS					Built-in documentation (Ddoc)	Built-in unittests	In, out, ref parameters		Garbage collection											DMD as a DUB library								Back referencing of mangled symbols					Runnable examples on dlang.org		Deprecation of the comma operator							newCTFE				Maybe, I miss accountability at the moment			2018-01-31 19:28:47	2018-01-31 20:08:07	fe613a4648
c592b7fbaab38bd3c64cb9d6c195b2f9	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification		D Forum: Learn					"D Cookbook" by Adam D. Ruppe			5		4		5	5	5		0			1	Always great content		1	D Forum	#d on IRC		dlang.slack.com				3		Forums could use Markdown/Edit/Reaction (+1/-1)			Daily	Web development	Desktop applications	IoT			Game Development		Embedded Systems		Kernel Development				Official tarballs				Official dlang.org/install.sh script	d-apt Debian/Ubuntu							I compiled D from source																DMD	Linux		Windows							dmd	rdmd		make	cmake				Yes, I work with D part time	emacs		1	1	1	Hard to find things, visual design is messy and unorganized.  There is very little engagement.		4		It's awesome, but I miss a few features		tuples	string interpolation	in-place struct initialization	named arguments	assert diagnostics		multiple alias this		@mutable in immutable	static break	writing files at compile-time						5		Yes	2	3	4						Reliance on the GC	Fear to do breaking changes	Lack of support for pointer-style programming		@nogc			More -betterC support						better json serialization																																																										Yes	2	Community is very negative.  Leadership seems very unengaged.  There is not enough delegation/trust.					D community				I try not to make too many changes until my current changes have received some attention.																																																			Positive Community/Good Leadership	Powerful Native Pretty	google	I liked what I saw when I looked into it		Ranges & std.algorithm				std.traits	Performance	Native interoperability with C	Readable syntax	UFCS				Templates	Built-in documentation (Ddoc)	Built-in unittests			Garbage collection		Contracts									DMD as a DUB library												Automatic compilation of imports (dmd -i)							Colorized error messages					metaprogramming capabilities					2018-01-31 18:16:36	2018-01-31 18:40:46	dc7a2ced72
e041f744c3b8b12a17fa74db3fcc3774	Yes	4			"The D Programming Language" by Andrei Alexandrescu		Language specification										4																																																																																																																																																																																																																																																																																																																																	2018-01-31 18:14:26	2018-01-31 18:17:50	c4ea2db0d6
bf3def5d92e97032d363262ae197b3c1	Yes	5					Language specification								d-idioms		2	Finding good examples.	4	Nothing		3				2						D Forum			dlang.slack.com				4		Discussions on the Forum are badly structured and have a high noise.			Daily	Web development						Big Data		Machine Learning		Science/Research			Official tarballs				Official dlang.org/install.sh script		Arch Linux						I compiled D from source																DMD	Linux									dmd	rdmd	dub	make					Yes, I work with D part time	vim / neovim		1	1	1	Bugzilla is just a huge graveyard.		3																						Yes	5	2	3									@safe for all modules	@nogc							std.eventloop	@nogc containers						std.benchmark						std.traits got really messy.																																														API inconsistencies		3	Too many PRs got stalled.																																																												Tuples	Fast code fast	A friend	Got nothing better to do	vibe.d																																																					mixin	import leaks		D is great!		2018-01-27 16:59:09	2018-01-27 17:07:43	41ced5ad66